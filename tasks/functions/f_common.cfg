includInfoDir= . "$rootdir"/tasks/functions/info/includeInfoDir.cfg
$includInfoDir

# EOL info for distros stored in variables
eolInfo= . "$rootdir"/tasks/functions/support/distroEOLinfo.cfg
$eolInfo

downloadRelatedFunctions= . "$rootdir"/tasks/functions/f_download.cfg
$downloadRelatedFunctions

################################################

# Limits output to seven characters, and removes the rest
sevenCharLimit="cut -c-7"

## This is not going to work longterm as it will not get anything if your on Plasma5 
gtkversion=$(inxi -Sx | grep Desktop | sed 's/^.*(Gtk//g;s/).*$//g;s/\s//g' | $sevenCharLimit)


##############################
## Misc Functions

function quitScript
{
    clear
    echo "Goodbye"
    exit
}


function invalidSection
{
    echo "invalid selection "
    sleep 2s
    x=1
}


function userPrompt
{
  read -p "Press [Enter] to continue "
}

##########################################################
# git Download function to download from git repos
function gitDL
{
    stripFileInfo

    git clone $1
    echo -e "File Variable is now ${file}"
    userPrompt

    cd $file

    pwd
    userPrompt

}

###########################################################

## Putting this here ... for now anyway

function setupGit
{
    // Separating this since this can be used on any distro

    ## SETUP GIT
    # Ask and read in name from user
    git config --global user.name "$userName"

    # Ask and read in email from user
    git config --global user.email "$userEmail"

}

## New function ... do I have this type of function elsewhere?
function gitDownload
{
  echo -f "Filler"

}

###########################################################
## IDEA: make this displayable from various parts of the scripts so if people forget different info, they can just hit a button and this function is called
function mainDisplayDistroInfo
{

  #For a space
  echo

  echo -e "The base of your distro, appears to be:\t\t ${bold} $distroBase ${normal}"
  echo -e "The Distro you seem to be on is:\t\t ${bold} ${id} ${normal}"
  echo -e "Your version, appears to be:\t\t\t ${bold} $version ${normal}"
  echo -e "Your Active Kernel:\t\t\t\t ${bold} $kernel ${normal}"

  echo -e "Your Desktop Environment:\t\t\t ${bold}$desktopNameWVersion ${normal}"
  echo -e "Your GTK Version:\t\t\t\t ${bold} $gtkversion ${normal}"

  # For Space
  echo
}

##################################################################
###############################################################

function detectPackageInstalled
{


  # $1 = the package name

  ## Fedora only test for now ... it may work in OpenSuse too


  ## If statement that assigns the packageInstalled Var ... this will expand for other distro bases
  if [ "$distroBase" == 'fedora' ]; then
    packageInstalled="rpm -q $1"
    echo -e "packageInstalled: $packageInstalled "

  else
    return

  fi



  # Checks to see if packageInstalled is equal to null
  if [ ! -z "$packageInstalled" ]; then
    echo -e "HORRAY Package $1 is installed"
  else
    echo "sorry $1 package is not installed"
  fi

  # Clear Var
  $packageInstalled=""



  return
}

function detectPackageVersion
{
  $1 is the package you want info on

  # (one option) Ubuntu
  apt-cache madison $1 | cut -d \| -f 2 | sed 's/\s//g'

  # Fedora  I THINK I found this works on OpenSuse too ... 99% sure of that
  rpm -q $1 | cut -d - -f 2,3


  # note to self: I should limit the number of char's from the left ... to remove the stuff like "foobar-3.033_ubuntu2..." or "foobar3.033_f26_x86_64...." as it may be the same version (what i would want to detect... in a sense) but it'd come up different because of the extra part, specific to distros
}
