sublimetextFunctions= . "$rootdir"/tasks/functions/universal/software/f_sublimeText.cfg
$sublimetextFunctions

#########################################################################
## To be moved later

function thirdPartySoftwareTemplate
{
    ## WHERE is this being called FROM? ... I NEED to have the "getinfo" (may not be the name btw) function get info about the uRL, filename, and file extension first 


    ## comment days after writing: THIS IS not the way to do it ... since I was thinking of putting tarball or .git repos (??? ) support here ... I need to CHECK the extension of the file... as say tarballs can be used on distros like Ubuntu and Fedora/OpenSuse too if needed 
    
    if [ "$distroBase" == 'ubuntu' ]; then
      packageURL=$DEBURL
      packageType=deb
    elif [ "$distroBase" == 'fedora' ] || [ "$distroBase" == 'opennsuse' ]; then
      packageURL=$RPMURL
      packageType=rpm
    fi 

    ## NOW packageURL is known 

    #############################################################

    ## Download package
    echo -e "Downloading $programName"
    wget $packageURL




    ######################################
    ## FYI, JUST A TEST output, to be removed later 
    echo -e "$packageName has been downloaded"
    userPrompt
    #######################################



    ## Installs downloaded DEB or RPM 
    if [ "$packageType" == 'deb' ]; then
      ## Gdebi or dpkg ? ... gdebi is not always installed 
      sudo dpkg -i $packageURL
    elif [ "$packageType" == 'rpm' ]; then
      sudo rpm -i $packageURL
    fi 
}


#########################################################################
function LAMPInstall
{
  ## Assumes packages names are same cross-distro

  ## This code below is probably from an Ubuntu based distro 
  installApp apache2 mysql-server php libapache2-mod-php
}

function wineInstall
{
    programName="Wine Emulator"
    programHomepage=http://www.winehq.com


    if [ "$distroBase" == 'ubuntu' ]; then
        # Source: https://wiki.winehq.org/Ubuntu
        clear
        sudo dpkg --add-architecture i386

        addPPA ppa:wine/wine-builds

        ubuntuUpdate
        clear

        installApp --install-recommends winehq-devel

        installApp playonlinux

    elif [ "$distroBase" == 'fedora' ]; then
         echo "FILLER TEXT FOR NOW ... "

    elif [ "$distroBase" == 'opennsuse' ]; then
         echo "FILLER TEXT FOR NOW ... "

         ## Add Wine Repos

    elif [ "$distroBase" == 'arch' ]; then
        installApp wine
    else
       echo "FILLER TEXT FOR NOW ... "
    fi

}


function etcherInstall
{
  programName="Etcher"
  packageURL=https://github.com/resin-io/etcher/releases/download/v1.3.1/etcher-1.3.1-linux-x86_64.zip
  

  ## Can I put this elsewhere, since this will ALWAYS be the case? 
  ## Commented out line below just in case 
  #packageName=${packageURL/*\//}
   
   # Downloads file 
   wget $packageURL

   #unpacks file into Download folder  
   unzip packageName -d ~/Downloads

   echo -e "Etcher's AppImage is now located in your Downloads folder"
   echo -e "Please navigate to that folder and click the icon to run it"
   echo -e "or navigate to it in a terminal and type \"./Etcher-linux-x64.AppImage\" "
}


function deadbeefInstall
{

  programName="DeadBeef Media Player"
  programHomepage=http://deadbeef.sourceforge.net/
  DEBURL=http://sourceforge.net/projects/deadbeef/files/debian/deadbeef-static_0.7.2-2_amd64.deb/download


  # NOTE TO SELF: DEADBEEF IS NOW IN ALOT OF default repos
  echo "Installing DeadBeef Media Player"

    # Note to self: Leap and Tumbleweed has this repos
    


    if [ "$distroBase" == 'ubuntu' ]; then

      packageURL=$DEBURL


    elif [ "$distroBase" == 'fedora' ]; then
      ## Add UnitedRPM repo
      ### Prompt user that a repo must be installed and ask them for a response, so they can say "no"
      # No RPM needed

      # This the correct code? ... 
      return

    elif ["$distroBase" == 'solus']; then
      sudo eopkg install deadbeef

    else
       # The catch-all step 
       echo "FILLER TEXT FOR NOW ... "
    fi

    ## Moved install line outside of the loop and removed arch check since its in the pacman repos
    installApp deadbeef
}

function equalizerInstall
{
    ## Function for pulse-audio equalizer
    echo -e "Filler"
}

##################################################################################
## Google Chrome Related 

function addGoogleChromeKey
{
  ## Assign Chrome Key URL to a variable 
  chromegpgpkey=https://dl.google.com/linux/linux_signing_key.pub


  clear
  ## Adding Google Chrome's Key
  echo -e "Getting key information needed for Google Chrome"
  
  ## If statement to add key based on what distro is running
  if [ "$distroBase" == 'ubuntu' ]; then
      
      ## Adding Google Chrome's Key
      wget -q -O - $chromegpgpkey | sudo apt-key add -

  ## Same Steps for adding key on OpenSuse OR Fedora 
  elif [ "$distroBase" == 'opensuse' ] || [ "$distroBase" == 'fedora' ]; then

      ## Adding Google Chrome's Key
      wget $chromegpgpkey
      sudo rpm --import linux_signing_key.pub

  elif [ "$distroBase" == 'arch' ]; then
           echo "FILLER TEXT FOR NOW ... Google Chrome is located in the AUR "

  else
    echo -e "The distro you are on either can not be detected or is not supported by my scripts, here "

  fi


}

function chromeInstall
{

  programName="Google Chrome"  
  ## Things are so custom here, dont worry about "packageName"

  # Call function to handle the Google Chrome key
  addGoogleChromeKey  

  
  # I like the older var name better, but I changed it to be consistent, in my functions
  RPMURL=https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm

  clear  
  echo -e "Adding Google Chrome (Stable)"
        

    if [ "$distroBase" == 'ubuntu' ]; then
       
        ## Adding Source
        ## I'd get the DEB and remove this code, though I cant find an official link to the DEB file 

        sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'

        ## Shouldn't this be a call to a different function, I made? 
        # Update Repo, after the source was added for Chrome
        sudo apt update
        
        ## Installing Google Chrome's current Stable version 
        sudo apt-get install google-chrome-stable
        
    elif [ "$distroBase" == 'opensuse' ]; then

        wget $RPMURL
        sudo rpm -i google-chrome-stable_current_x86_64.rpm

    elif [ "$distroBase" == 'fedora' ]; then

        wget $RPMURL
        sudo dnf --localinstall google-chrome-stable_current_x86_64.rpm

    elif [ "$distroBase" == 'arch' ]; then

         echo "FILLER TEXT FOR NOW ... Google Chrome is located in the AUR "
    else
       echo "FILLER TEXT FOR NOW ... "
    fi

    clear
}
## End of Google Chrome Section 
###################################################################


function filebotInstall
{
  programName="Filebot"
  programHomepage=https://sourceforge.net/projects/filebot/
  DEBURL=https://sourceforge.net/projects/filebot/files/filebot/FileBot_4.7.9/filebot_4.7.9_amd64.deb/download
  
   if [ "$distroBase" == 'ubuntu' ]; then
        echo -e "Add the way to install the DEB"

    elif [ "$distroBase" == 'arch' ]; then
        echo -e "Filler ... AUR code needed, here i think "
    else
       echo "FILLER TEXT FOR NOW ... "
    fi


}


## How can I (for future tarballs too) "template-afy" 
function tinyMediaManagerInstall
{
  ## Note to self: Java has to be installed 

  programName="Tiny Media Manager"
  tarballURL=https://release.tinymediamanager.org/dist/tmm_2.9.8_6644bb9_linux.tar.gz

  mkdir tmm
  cd tmm


  url=https://release.tinymediamanager.org/dist/tmm_2.9.8_6644bb9_linux.tar.gz

  ## I should pick between curl or wget and stick to it 
  curl $url -o $tmmName
  echo "Tiny Media Manager file downloaded"
  userPrompt

  clear
  echo  -e "Extracting Tiny Media Manager archive"
  mkdir tinyMediaManager
  tar -xvzf $tmmName -C tinyMediaManager
  clear 
  echo -e "File Extracted"
  userPrompt

  echo -e "Moving Tiny Media Directory to The home directory's Download folder"
  mv tinyMediaManager/ ~/Downloads
  userPrompt

  # Cleanup 
  clear
  echo "Cleanup Un-needed folder"
  cd ..
  rm -rf tmm/
  userPrompt

}


## Did I ever have this for Vivaldi elsewhere? 
function vivaldiInstall
{
  programName="Vivaldi Web Browser"

  ## For now leave 32bit stuff commented out ... I may come back to this later 

  ## 32bit files 
  #32bitRPM=https://downloads.vivaldi.com/stable/vivaldi-stable-1.14.1077.50-1.i386.rpm
  #32bitDEB=https://downloads.vivaldi.com/stable/vivaldi-stable_1.14.1077.50-1_i386.deb


  #64bitRPM=https://downloads.vivaldi.com/stable/vivaldi-stable-1.14.1077.50-1.x86_64.rpm
  #64bitDEB=https://downloads.vivaldi.com/stable/vivaldi-stable_1.14.1077.50-1_amd64.deb


}
