###########################################################
## This is a test output function only 
function osReleaseinfoOutput()
{
  echo -e 
  echo -e "name: \t$name"
  echo -e "idLike: \t$idLike"
  echo -e "id: \t$id"
  echo -e "versionid: \t$versionID"
  echo -e "version: \t$version"
  echo -e "ubuntuName: \t$ubuntuName"
  echo 
  userPrompt
}

###########################################################

function osreleaseInfo()
{
  

  # This new way of doing thing with awk is sort of a work in progress, and a learning curve for me. 

  osRelease="/etc/os-release"
  removeExtras='sed s/\"//g;s/^.*=//g '
  
  name=$(awk '/^NAME=/' $osRelease | $removeExtras )
  idLike=$(awk '/^ID_LIKE=/' $osRelease | $removeExtras)
  id=$(awk '/^ID=/' $osRelease | $removeExtras)
  versionid=$(awk '/^VERSION_ID=/ ' $osRelease | $removeExtras)
  version=$(awk '/VERSION=/' $osRelease | $removeExtras)
  ubuntuName=$(awk '/^UBUNTU_CODENAME=/ ' $osRelease | $removeExtras)

  ## Test only 
  #osReleaseinfoOutput

  # Function call to get info about Desktop (DE) being ran
  ## Location: f_DEInfo.cfg file 
  getDesktopInfo

}


function osreleaseInfoOriginal()
{
  # First sed = removes double quotes, if present
  # Second sed = removes everything before the = sign, from the start (left) of the line
  cleanInfo="sed s/\"//g;s/^.*=//g"

  ################################################
  name=$(cat /etc/os-release | grep ^NAME= | $cleanInfo)

  idlike=$(cat /etc/os-release | grep ^ID_LIKE= | $cleanInfo)

  id=$(cat /etc/os-release | grep ^ID= | $cleanInfo)

  versionid=$(cat /etc/os-release | grep VERSION_ID= | $cleanInfo)

  version=$(cat /etc/os-release | grep ^VERSION= | $cleanInfo)

  # Consider this to the Ubuntu specific check function
  ubuntuName=$(cat /etc/os-release | grep ^UBUNTU_CODENAME= | $cleanInfo)

  # Function call to get info about Desktop (DE) being ran
  getDesktopInfo

}

################################################################

function checkSupportStatus()
{
  # If a supported distro is detected but its NOT a rolling replease
  if [ "$supported" == 'yes' ] && [ "$rollingRelease" == 'no' ]; then
    # Gets EOL info from a config
    echo -e "The version of Linux you are currently on, ${bold}IS still ${normal}supported"

    echo -e "The End of your distro/version's support is: ${bold}\t $EOL ${normal}"
  # If a supported Rolling Release is detected
  elif [ "$supported" == 'yes' ] && [ "$rollingRelease" == 'yes' ]; then
      echo -e "The version of Linux you are currently on, ${bold}IS still ${normal}supported"
      # Goal: not to display anything
      return
  elif [ "$supported" == 'no' ]; then
    echo -e "The version of Linux you are currently on, is no longer supported."
  fi


  # with the second elif above this wouldn't make sense expect for the fact that THIS BELOW is just a test 
  if [ "$rollingRelease" == 'yes' ]; then
    echo -e "You are on a ${bold} Rolling Release ${normal}"
  fi

}

################################################################

function lsbreleaseCheck()
{
  lsbreleaseCut='cut -d = -f 2'
  #################################

  lsbCut="-d : -f 2"

  lsbDescription=$(lsb_release -d | $lsbCut)
  lsbRelease=$(lsb_release -r | $lsbCut)
  lsbCodename=$(lsb_release -c | $lsbCut)
  lsbDistribID=$(lsb_release -i | $lsbCut)

}

############################################

function gtkVersionDetection()
{
  ## Fill this out as I go 

  # REALLY not happy with this var name ... but i will leave it for now 
  

  sortGTKVersion='grep Version | cut -d : -f 2 | sed s/\s//g '


  if [ "$distroBase" == 'arch' ]; then 
    gtkVersion=$(pacman -Qi gtk3 | awk ' /^Version/ { print $3 }')

  elif [ "$distroBase" == 'ubuntu' ]; then
    # I am testing this on 18.04 nightly ... not sure if this works on all ubuntu flavors/versions
    ## What happens on XFCE/Xubuntu? .. isn't that still on Gtk2 only? 
    gtkVersion=$(dpkg -s libgtk-3-0 | grep Version | cut -d ' ' -f2)

  # 100% test/guess atm 
  elif [ "$distroBase" == 'fedora' ]; then

    # What else do i need 
    gtkVersion=$(dnf list installed | grep gtk3)

  elif [ "$distroBase" == 'opensuse' ]; then
    gtkVersion=$(zypper info gtk3-data | grep Version | cut -d : -f 2 | sed 's/\s//g')

  elif [ "$distroBase" == "solus" ]; then
    gtkVersion=$(eopkg info libgtk-3 | awk ' /version/ {print $5}')


  fi 
}