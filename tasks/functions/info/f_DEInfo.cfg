## This will be here for now, but its a good idea to move this elsewhere so it can be used elsewhere in the scripts

function getPlasmaInfoTestCode()
{
  
  # WHY do I seemingly need this here? 
  ## Gets info about distro
  ## This is located in the f_distoCheck.cfg file
  completeDistroCheck
  
  #############################
  # Test 
  #echo -e "distroName:$distroName"
  #userPrompt
  ##############################

  return 
}


function getPlasmaInfo()
{
  
  getPlasmaInfoTestCode distroName
  
  # If Plasma 5 is detected, running
    if [ "$distroName" == 'ubuntu' ]; then

      ### plasma-desktop = KDE Plasma Version

      
      installedVerInfoUbuntu plasma-desktop
      # since extra processing is needed for "plasma-desktop", here
      plasmaDEVersion=$($installedPkgVer | sed 's/^.*4://g')

      ### plasma-framework = KDE Framework Version
      # since no extra processing is needed for "plasma-desktop", here
      plasmaFrameworkVersion=$($installedPkgVer)

    elif [ "$distroBase" == 'opensuse' ]; then

      #openSuse plasma-framework, and plasma5-desktop are the package names

      return 
    fi




  #### This appears to work in OpenSuse Plasma 5 and the Ubuntu base so this next command may be more DE specific than distro specific
  #qtversion=$(qtdiag | grep ^Qt | cut -d ' ' -f 2)



}

function displayPlasmaInfo()
{
  getPlasmaInfo

  clear
  echo -e "Plasma 5 info"
  echo
  echo -e "KDE Plasma Version: $plasmaDEVersion"

  echo
  echo -e "KDE Framework Version: $plasmaFrameworkVersion"
  echo
  echo -e "QT Version: $qtversion "
  echo
  userPrompt

}


###################################
function getDesktopInfo()
{

  ## Check to see if 'inxi' is installed first


  ## This is name only .. no version is displayed.  This IS ALSO THE VARIABLE to be used when needing to know the DE in if/elif statement
  desktopName=$(inxi -Sx | grep Desktop | sed 's/^.*Desktop://g;s/Distro.*$//g' | cut -d ' ' -f 2)

  # New Idea
  desktopNameWVersion=$(inxi -S | grep Desktop | sed 's/\Distro.*$//g;s/^*.\s//g;s/^.*Desktop://g')
}

#################################################################

## April 1, 2018 new way 

function checkDEIfNull
{

  # if TRUE, this returns 1 ... I think 
  # if [ $1 &>/dev/null ]; then
  if [ $1 >/dev/null 2>&1 ]; then

    desktopversion=${1}
  else
    return 
  fi 
}



function specificDEDetection()
{
  ## at least for now ... use 'desktop' and 'desktop-version' as vars 

  
  # when function-a-fying .... forget desktop var for now ... just focus on what I can simply, by using a template 

  # I need to set this so if the function returns "true" (aka the DE is found), it stops doing further checks 



  #Gnome
  checkDEIfNull "gnome-session"
  checkDEIfNull "gnome-shell-properties --version"

  #checkDEIfNull "lxsession"
  checkDEIfNull "mate-session --version"
  checkDEIfNull "plasmashell --version"
  checkDEIfNull "tde-config --version"
  checkDEIfNull "unity --version"

  printf %b "desktopversion:$desktopversion\n\n"

  userPrompt

}

function foobarfunction
{
  # just a placeholder for stuff I do not want to remove from the code, yet 

  # Gnome
  if [ gnome-session $isNotNull ]; then
     desktop=gnome
     desktopversion="gnome-session"
  elif [ gnome-shell-properties --version $isNotNull ]; then
      desktop=gnome
  fi 

  if [ lxsession $isNotNull]; then
    desktop=lxqt
  fi

  if [ mate-session --version $isNotNull ]; then
    desktop=mate
    desktopversion=$(mate-session --version)
  fi 

  if [ plasmashell --version $isNotNull ]; then
    desktop=plasma5
    desktopversion=$(plasmashell --version)
  fi

  if [ tde-config --version $isNotNull ]; then
    desktop=trinity
    desktopversion=$(tde-config --version) 
  fi

  if [ unity --version $isNotNull ]; then
    desktop=unity
    desktopversion=$(unity --version) 
  fi 


}