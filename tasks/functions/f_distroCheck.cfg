## The purprose of the "support" functions is to A) Check if the distro is X (so say zypper doesn't try to run in Ubuntu... ) AND the support flag (variable..) is set to yes ... so if the distro is END OF LIFE, the function will not run 

specificChecks= . "$basedir"/tasks/functions/f_specificDistroChecks.cfg
$specificChecks

##############################################


function osreleaseInfo
{
  
  # The grep looks for that line in question inside of the /etc/os-release file 
  # The first sed removes the Var AND the equal sign AND the first double quote
  # The second sed strips the double quote from the end

  
  ## Remove any quotes that may appear in the results = the sed command 
  ## Removes everything before the equals sign = the cut command 
  cleanupReleaseInfo="cut -d = -f 2 | sed s/\"//g "

  osrelease="cat /etc/os-release"

 
  name=`$osrelease | grep ^NAME= | $cleanupReleaseInfo`
  idlike=`$osrelease  | grep ^ID_LIKE= | $cleanupReleaseInfo`
  id=`$osrelease  | grep ^ID= | $cleanupReleaseInfo`
  versionid=`$osrelease | grep VERSION_ID= | $cleanupReleaseInfo`
  version=`$osrelease | grep ^VERSION= | $cleanupReleaseInfo`
  
  # Consider this to the Ubuntu specific check function
  ubuntuName=`$osrelease| grep ^UBUNTU_CODENAME= | $cleanupReleaseInfo`

  # Function call to get info about Desktop (DE) being ran 
  getDesktopInfo

}


################################################################

function checkSupportStatus
{
  
  ## This is for any distro
  if [ "$supported" == 'yes' ]; then
    universalEOLCheck

    echo -e "The version of Linux you are currently on, ${bold}IS still ${normal}supported"
    
    ## Where is this getting the info from again? ... I know /tasks/functions/support/distroEOL.cfg contains the data of when the EOL is but ... where do I make the comparision 

    echo -e "The End of your distro/version's support is: ${bold}\t $EOL ${normal}"
  else
    echo -e "The version of Linux you are currently on, is no longer supported."
  fi 


  if [ "$rollingrelease" == 'yes' ]; then
    ## This is too much stuff to always display all the time but leave it for now .. .

    echo -e "You seem to be on a ${bold} Rolling Release${normal}"
    echo -e "PLEASE NOTE: that if you HAVEN'T updated in awhile, things can break with a bulk update, sometimes"
    echo -e "At the present time, I can only possibly detect the date if you update via these scripts."
    echo -e "If you constantly update, then there is no problem... just want to say this if you are on a rolling release and haven't updated in say two years... Things can possibly break with that many updates being done"
  fi 

}


################################################################


function lsb_release
{
  lsbDescription=`lsb_release | grep Description`

  lsbRelease=`lsb_release | grep Releases`

  lsbCodename=`lsb_release | grep Codename`

  lsbDistribID=`lsb_release | grep Distributor ID`

}


################################################
# Gets main info 

function displayInfoTest
{
  
  clear
  echo "Tests below - This will NOT be staying ... I NEED TO test what is in the variables"
  #echo -e "idlike:\t\t $idlike"
  #echo -e "id:\t\t $id" 
  #echo -e "versionid:\t $versionid"
  #echo -e "version:\t $version"
  #echo -e "name:\t\t $name"
  #echo -e "ubuntuName:\t $ubuntuName"

  userPrompt
}



##################################################
function completeDistroCheck
{
  
  # Get info 
  osreleaseInfo


  ## Issue I see is how do i make sure (say it detects arch) the other checks are NOT ran since there is no point then.   Maybe have an if-then check here to see "If distroBase null" .. if so, go on with the next check, IF distroBase is NOT null then exit and go on to the next step as the distrobase is known at that point 

  archCheck
  fedoraCheck
  openSuseCheck 
  solusCheck 
  ubuntuCheck 

  checkSupportStatus

}