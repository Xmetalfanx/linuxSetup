## The purprose of the "support" functions is to A) Check if the distro is X (so say zypper doesn't try to run in Ubuntu... ) AND the support flag (variable..) is set to yes ... so if the distro is END OF LIFE, the function will not run 

################################################
# Gets main info 

function osreleaseInfo
{
  
  # The grep looks for that line in question inside of the /etc/os-release file 
  # The first sed removes the Var AND the equal sign AND the first double quote
  # The second sed strips the double quote from the end

  osrelease="cat /etc/os-release"

  # Remove any quotes that may appear in the results
  removeQuote="sed s/\"//g "

  name=($($osrelease | grep ^NAME= | sed 's/NAME=//g' | $removeQuote))
  idlike=($($osrelease | grep ^ID_LIKE= | sed 's/ID_LIKE=//g' | $removeQuote))
  id=($($osrelease | grep ^ID= | sed 's/ID=//g' | $removeQuote ))
  versionid=($($osrelease | grep ^VERSION_ID= | sed 's/VERSION_ID=\"//g'  | $removeQuote))
  version=($($osrelease| grep ^VERSION= | sed 's/VERSION=//g'  | $removeQuote))
  ubuntuName=($($osrelease| grep ^UBUNTU_CODENAME=  | $removeQuote))


  #echo "Tests below - This will NOT be staying ... I NEED TO test what is in the variables"
  #echo -e "$idlike"
  #echo -e "$id" 
  #echo -e "$versionid"
  #echo -e "$version"
  #echo -e "$name"

  #userPrompt

}

################################################################

function checkSupportStatus
{
  ## Does not seem like i am following K I S S 
  if [ "${fedoraSupported}" == 'yes' ] || [ "${opensuseSupported}" == 'yes' ] || [ "${archSupported}" == 'yes' ] || [ "${ubuntuSupported}" == 'yes' ]; then 
    supported='yes'
  else
    supported='no'
  fi



  ## This is for any distro
  if [ "${supported}" == 'yes' ]; then
  {
    echo -e "The version of Linux you are currently on, IS still supported"
  }
  else
  {
    echo -e "The version of Linux you are currently on, is no longer supported"
  }
  fi 

}


function checkUbuntuLTS
{
  
  # if the detected versions is 14.04 or 16.04 ... either of the current LTS versions
    if [ "${ubuntuLTS}" == 'yes' ]; then
    {
      echo -e "You are Currently on a Long Term Support Version of Ubuntu "
    }
    fi
  
}



#########################################################################################
## Specific Distro Checking 
# Arch based 
function archCheck 
{
  if [ "${id}" == 'arch' ]; then 
    distroBase="arch"
  fi
}

########################################################################################
#Fedora Based 
function fedoraCheck
{

  # Fedora check 
  if [ -f /etc/fedora-release || "${id}" == 'fedora' ]; then
    distroBase="fedora"
  else 
    return    
  fi

  if [ "${versionid}" == '26' || "${versionid}" == '27' || "${version}" == 'rawhide' ]; then
    fedoraSupported=yes
  else 
    fedoraSupported=no
    echo "Your version of Fedora is not currently supported"
    return 
  fi 
}


###############################################################################
# OpenSUSE Related 
function openSuseCheck
{
   
  ### name for TW is - NAME="openSUSE Tumbleweed" 
  ## This hopefully strips the "OpenSUSE " part out of things to leave "Leap 42.2" or "Tumbleweed"

  
  # I need to strip "openSUSE" out of the name when i read it in 
  ### if name= Tumbleweed, Leap 422 (?), Leap423 THAN supported=yes/true
  ## Should have some variable for near EOL versions that tell the user when their support will run out 


  ## This is NOT filled out yet, so to speak 
  if [ "${opensuseName}" == 'Leap' || "${opensuseName}" == 'Tumbleweed' ]; then
    openSUSEsupported=yes
  else 
    openSUSEsupported=no
  fi 
}

##################################################################

function solusCheck 
{
  if [[ -f /etc/solus-release || "$id" == 'solus' ]]; then 
    distroBase="solus"
    
    ## REMOVE THIS COMMENT, LATER 
    #This works when in Solus, so issues are happening before this step 

  else 
    return
  fi



}

#####################################################################
function ubuntuCheck
{

  # This will expand, as needed later to include more distros that are Ubuntu based, later 
  if [ "${id}" == 'linuxmint' || "${id}"" == 'ubuntu' ]; then
    distroBase="ubuntu"
  fi

  ################################################################

  if [ "$distrobase" == 'ubuntu']; then 
      # if the detected versions is 14.04 or 16.04 ... either of the current LTS versions
      if [ "${UBUNTU_CODENAME}" == 'trusty' || "${UBUNTU_CODENAME}" == 'xenial' ]; then
        ubuntuSupported=yes
        ubuntuLTS=yes

        echo -e "You are currently on a SUPPORTED version of a Long-term support release"

      # If 17.04 or 17.10, is detected.
      elif [ "${UBUNTU_CODENAME}" == 'zesty' || "${UBUNTU_CODENAME}" == 'artiful' ] ; then
        ubuntuSupported=yes
        ubuntuLTS=no
      else
        ubuntuSupported=no
        ubuntuLTS=no
        echo -e "You are NOT currently on a supported version of Ubuntu's base"

      fi

  fi

}

###############################################################

function completeDistroCheck
{
  
  # Get info 
  osreleaseInfo

  

  ## Issue I see is how do i make sure (say it detects arch) the other checks are NOT ran since there is no point then.   Maybe have an if-then check here to see "If distroBase null" .. if so, go on with the next check, IF distroBase is NOT null then exit and go on to the next step as the distrobase is known at that point 


  archCheck
  fedoraCheck
  openSuseCheck 
  solusCheck 
  ubuntuCheck 

  userPrompt

  ## BUGFIX - Issues happen AFTER this step 

}


########################################################
function mainDisplayDistroInfo 
{
  clear
  echo -e "The base of your distro, appears to be: $distroBase "
  
  echo -e "Your version, appears to be: $versionid" 

  # For Space
  echo 
  echo 
}


################################################################
## Not really sure what this fuction does but i am keeping it - just in case, for now 
function stripName
{

	strippedName="${prettyname#"PRETTY_NAME="}"

  # remove quotations AND periods

  ## Commenting out, for debugging 
  # finalStrippedName=`echo "$strippedName" | sed 's/\"//g;s/\.//g' `

  echo "$finalStrippedName"

  userPrompt

}


## Test from a post on Github
### lsb_release -ds | sed 's/^\"//g;s/\"$//g'


