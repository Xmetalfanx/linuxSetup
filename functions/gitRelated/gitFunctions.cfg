#################################################################################
# Oct 2022: is any of this needed? so many functions SEEM overcomplicated


## Git cleanup function
function gitCleanDir() {

	# TODO: add a check here to see i am actually in the dir, i think i am
		# cd out of git (cloned) directory
		cd ..

	# remove directory
	rm -rf "${gitRepoName}"

}


# update; archGitInstall (below in this file) calls this
# is this function needed?  i need the repoName and githubURL (so to speak, not a var name)
function gitClone() {

	#Clone repo
	### NOTE TO SELF: REMEMBER TO CLONE THIS TO MAYBE THE "DOWNLOADS" DIR
    fancy_message action "Cloning ${gitRepoName} git repo"
    git clone ${gitURL}

}

function git_compile_and_install() {
	clear
	# stop here telling the user what is going to happen
	fancy_message action  "About to compile and install ${gitRepoName}"
	userPrompt

	makepkg -si


	# i should do a check so this only displays IF THE LAST action was successful ...
		# check for last commands's exit code maybe?
		# exanple - if [ "success" ] && "do the line below" || echo some error message here
	fancy_message info "$gitRepoName installed now "
}

# consider changing the name ... "git_cleanup" perhaps
function gitArchCleanup() {

	fancy_message action "\nRunning a makepkg cleanup"

	makepkg --clean

}

# Jan 2023: I think maybe the NAME needs refactoring
# git function for arch
# Nov 2022: mainly used with yay or trizen i see
function archGitInstall() {
	clear

	gitClone

	fancy_message action "Entering ${gitRepoName} cloned directory"
	cd ${gitRepoName}

	git_compile_and_install

	##############################################################################

	## after reading arch wiki https://wiki.archlinux.org/index.php/makepkg#Usage,
	#I am not sure if (below) is needed ... it may be good to have both

	# this runs makepkg with a --clean flag
	gitArchCleanup

	# idea: this cd's out and deletes the extracted dir
	# gitCleanDir


  	## FYI ...now the pwd SHOULD still be the /home/<username>/Downloads  or ~/Downloads folder

}


###################################################################################
# Start of 2025 code ... i am not sure if the above code is needed anymore, or 
# if this could all be refactored to what is maybe below.... ACTUALLY i still need 
# some code for stuff like makepkg type stuff 

# ${1} is the repo owner 
# ${2} is the repo name
# ${3} is the download type (zip, tar.gz, etc) ... not sure if this is needed 
	# for now or can be refactored down, later 

function github_download_assign_vars() {

	repo_owner=${1}
	repo_name=${2}
	download_filter=${3}

    intial_link="https://api.github.com/repos/${repo_owner}/${repo_name}"
    latest_link="${intial_link}/releases/latest"
    tag_link="${intial_link}/releases/tag"

}


function github_download_get_download_link() {

	# i think this was chatgpt generated 
    # download_link=$(curl -sL "https://api.github.com/repos/${repo_owner}/${repo_name}/releases/latest" \
    # | grep '"browser_download_url":' \
    # | grep '\.{${download_type}}"' \
    # | cut -d '"' -f 4)    
	
	
	# Intial attempt to get the download link, using Github "releases" API
    download_link=$(curl -sL "$latest_link" \
  	| awk -v ext="$download_filter" -F '"' '/"browser_download_url"/ && $0 ~ ext {print $4}')

    # Second attempt: if no releases, try to get the latest tag and use that to form a download link
	# I found some repos do not use the "releases" feature of github, which cause the need for this second attempt
    if [ -z "$download_link" ]; then
        tag=$(curl -sL "$tags_link" | jq -r '.[0].name')
        download_link="https://github.com/${repo_owner}/${repo_name}/archive/refs/tags/${tag}.${download_filter}"
    fi

    # Additional check: if download_link is still empty, show error and exit
    if [ -z "$download_link" ]; then
        fancy_message error "ERROR: Unable to determine a valid download link for ${repo_owner}/${repo_name} with filter '${download_filter}'."
        echo -e "Please check the repository or your filter and try again."
        return 1
    fi
	return 0

}

function github_download_display_vars() {

	# echo's for debugging only and should be commented out 
    # echo -e "Repo Owner:\t ${repo_owner}\nRepo Name:\t${repo_name}"
    # echo -e "Intial Link:\t ${intial_link}"
    # echo -e "Latest Link:\t ${latest_link}"
    echo -e "Git Download Link:\t ${download_link}"
    userPrompt

	# for debugging only 
    # clear
    #echo -e "Download filter: ${download_filter}"

}
# this JUST downloads the file to the user's Downloads folder
function github_download() {

	# assigns the variables
	github_download_assign_vars "$1" "$2" "$3"
    

	# gets the actual download link
	github_download_get_download_link


	fancy_message action "Downloading ${repo_name} from GitHub"
	
	wget -c --show-progress -P ~/Downloads "${download_link}"
	
	
}