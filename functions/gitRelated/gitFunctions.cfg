#################################################################################
# Oct 2022: is any of this needed? so many functions SEEM overcomplicated


## Git cleanup function
function gitCleanDir() {

	# TODO: add a check here to see i am actually in the dir, i think i am
		# cd out of git (cloned) directory
		cd ..

	# remove directory
	rm -rf "${gitRepoName}"

}


# update; archGitInstall (below in this file) calls this
# is this function needed?  i need the repoName and githubURL (so to speak, not a var name)
function gitClone() {

	#Clone repo
	### NOTE TO SELF: REMEMBER TO CLONE THIS TO MAYBE THE "DOWNLOADS" DIR
    fancy_message action "Cloning ${gitRepoName} git repo"
    git clone ${gitURL}

}

function git_compile_and_install() {
	clear
	# stop here telling the user what is going to happen
	fancy_message action  "About to compile and install ${gitRepoName}"
	userPrompt

	makepkg -si


	# i should do a check so this only displays IF THE LAST action was successful ...
		# check for last commands's exit code maybe?
		# exanple - if [ "success" ] && "do the line below" || echo some error message here
	fancy_message info "$gitRepoName installed now "
}

# consider changing the name ... "git_cleanup" perhaps
function gitArchCleanup() {

	fancy_message action "\nRunning a makepkg cleanup"

	makepkg --clean

}

# Jan 2023: I think maybe the NAME needs refactoring
# git function for arch
# Nov 2022: mainly used with yay or trizen i see
function archGitInstall() {
	clear

	gitClone

	fancy_message action "Entering ${gitRepoName} cloned directory"
	cd ${gitRepoName}

	git_compile_and_install

	##############################################################################

	## after reading arch wiki https://wiki.archlinux.org/index.php/makepkg#Usage,
	#I am not sure if (below) is needed ... it may be good to have both

	# this runs makepkg with a --clean flag
	gitArchCleanup

	# idea: this cd's out and deletes the extracted dir
	# gitCleanDir


  	## FYI ...now the pwd SHOULD still be the /home/<username>/Downloads  or ~/Downloads folder

}


###################################################################################
# Start of 2025 code ... i am not sure if the above code is needed anymore, or 
# if this could all be refactored to what is maybe below.... ACTUALLY i still need 
# some code for stuff like makepkg type stuff 

# ${1} is the repo owner 
# ${2} is the repo name
# ${3} is the download type (zip, tar.gz, etc) ... not sure if this is needed 
	# for now or can be refactored down, later 

# this JUST downloads the file to the user's Downloads folder
function github_download() {

    repo_owner=${1}
    repo_name=${2}
    
    download_type=${3}

    download_url=$(curl -sL https://api.github.com/repos/${repo_owner}/${repo_name}/tags \
    | jq -r '.[0].zipball_url')

    # debugging ... not needed in production
	#echo -e "Download Link:\t ${download_url}" -O "test.${download_type}"

	fancy_message action "Downloading ${repo_name} from GitHub to the user's Downloads folder"
	
    wget -P "/home/$USER/Downloads/" -O "${repo_name}.${download_type}" ${download_url} 

}