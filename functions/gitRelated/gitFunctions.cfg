# idea: function to sort out specific names
# here we know the list of possible links is more than one
function gitDownloadSort() {

	# put this elsewhere, more global?

	case $distroBase in

		debian) distroBranch=${debianBranch} ;;
		fedora) distroBranch=${fedoraBranch} ;;
		opensuse)

			# if statement to check for leapBranch (var) existing? being non-zero?
				# leapBranch example "15.3" or "15.4"
					# is the decimal going to be a problem?
			# idea anyway: "if leapBranch is NOT empty", assign distroBranch
			[ -n "${leapBranch}" ] && distroBranch=${leapBranch}

			;;

		ubuntu) distroBranch=${ubuntuBranch} ;;

	esac

	# condensed form of what i had below, otherwise it looks like one big string
	programURNewlines=$(echo -e ${possibleDownloadLinks}  | tr " " "\n")

	case $distroBase in

		debian|fedora|opensuse|ubuntu) programURL=$(echo -e ${programURNewlines} | grep "${distroBranch}" ) ;;
	esac

	programURL=$(echo -e ${possibleDownloadLinks} )

}

################################################################
# What is needed to be known here
	# programName
	# repoName
	# fileFormat to download
	# nameFormat (in software function so no need to assign that here)

# gitDownload goal: to get the proper file for the running distro (if possible) and download it
	# other functions would handle the installing (i think)
	# cleanup maybe after other functions pass things back here (perhaps)

# not able to test with Comcast out, i am using my foo.sh file that worked and guessing at what may be the fix
function gitDownload() {

	releasePage="https://github.com/${repoName}/releases/latest"

	# change to githubAPIURL?
	github_API_URL="https://api.github.com/repos/${repoName}/releases/latest"

	#echo -e "${github_API_URL}"

	# grep ${fileformat}$ : to match the file format desired at the end of the line
		# idea: online its say ' .... $fileformat",       SO is that needed inside the brackets here if this doesn't work?
	# cant i (if REs are not used for my current knowledge of how to use them in awk) put the grep line here in with the awk and make a combo awk condition?
	possibleDownloadLinks=$(curl -s ${github_API_URL} | awk ' /browser_download_url/ { print $2 }' | grep -E "${fileFormat}" | sed 's/\"//g' )

	#debugging echo
	#echo -e "possibleDownloadLinks:\t ${possibleDownloadLinks}"

	possibleLinkLength=$(echo -e "${possibleDownloadLinks}" | awk '{ print NR}' )

	# if the list of possible links is more than one, pass to the sorting function
	[[ ${possibleLinkLength} < 1 ]] && programURL=${possibleDownloadLinks} || gitDownloadSort

	####################################
	# debugging
	#echo -e "programURL:\t${programURL}"
	#userPrompt
	#exit
	########################################


	# Goal: is to just obtain the URL to download, here

	metaExternalDownload ${programTitle} ${programURL}


	# Update: I THINK that handle function MAY BE missing RPM handling but i am not sure 100% ... double check that

	userPrompt

}



#################################################################################
# Oct 2022: is any of this needed? so many functions SEEM overcomplicated


## Git cleanup function
function gitCleanDir() {

	# TODO: add a check here to see i am actually in the dir, i think i am
		# cd out of git (cloned) directory
		cd ..

	# remove directory
	rm -rf "${gitRepoName}"

}


# update; archGitInstall (below in this file) calls this
# is this function needed?  i need the repoName and githubURL (so to speak, not a var name)
function gitClone() {

	#Clone repo
	### NOTE TO SELF: REMEMBER TO CLONE THIS TO MAYBE THE "DOWNLOADS" DIR
    fancy_message action "Cloning ${gitRepoName} git repo"
    git clone ${gitURL}

}

function gitArchCompileAndInstall() {
	clear
	# stop here telling the user what is going to happen
	fancy_message action  "About to compile and install ${gitRepoName}"
	userPrompt

	makepkg -si


	# i should do a check so this only displays IF THE LAST action was successful ...
		# check for last commands's exit code maybe?
		# exanple - if [ "success" ] && "do the line below" || echo some error message here
	fancy_message info "$gitRepoName installed now "
}

function gitArchCleanup() {

	fancy_message action "\nRunning a makepkg cleanup"

	#makepkg Cleanup
	makepkg --clean

}

# Jan 2023: I think maybe the NAME needs refactoring
# git function for arch
# Nov 2022: mainly used with yay or trizen i see
function archGitInstall() {
	clear

	gitClone

	fancy_message action "Entering ${gitRepoName} cloned directory"
	cd ${gitRepoName}

	gitArchCompileAndInstall

	##############################################################################

	## after reading arch wiki https://wiki.archlinux.org/index.php/makepkg#Usage,
	#I am not sure if (below) is needed ... it may be good to have both

	# this runs makepkg with a --clean flag
	gitArchCleanup

	# idea: this cd's out and deletes the extracted dir
	# gitCleanDir


  	## FYI ...now the pwd SHOULD still be the /home/<username>/Downloads  or ~/Downloads folder

}