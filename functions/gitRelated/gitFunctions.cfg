# What is needed to be known here
	# programName
	# repoName
	# fileFormat to download
	# nameFormat (in software function so no need to assign that here)

# not able to test with Comcast out, i am using my foo.sh file that worked and guessing at what may be the fix
function gitDownload() {

	releasePage="https://github.com/${repoName}/releases/latest"
	github_API_URL="https://api.github.com/repos/${repoName}/releases/latest"

	# grep ${fileformat}$ : to match the file format desired at the end of the line
		# idea: online its say ' .... $fileformat",       SO is that needed inside the brackets here if this doesn't work?
	possibleDownloadLinks=$(curl -s ${github_API_URL} | grep "${fileFormat}"$ | grep "${nameFormat}" )

	#debugging echo
	echo -e "possibleDownloadLinks:\n${possibleDownloadLinks}"

	#can i/how do i ... .check for the number of lines in possibleDownloadLinks?
		# if one then "downloadLink=${possibleDownloadLinks}"
		# if more than one than more testing is needed
			# i say base that test on $fileFormat perhaps

	# "If possibleDownloadLinks is more than one line"  (outer "if statement" ??)
		# (? inner if statement) - check for fileFormat here and maybe check os-release or lsb info here for version info (say "leap 15" or "focal")


	# the goal is to just download the file
	# pass to "handleDownload" from here?  do i need to pass to "stripInfo" first? (the final downloadLink)
}



#################################################################################
# Oct 2022: is any of this needed? so many functions SEEM overcomplicated


## function purpose to git clone, a git repo... nothing else
# August 2021: this seeems SORT OF un-needed perhaps ... ,.,.,

## Git cleanup function
function gitCleanDir() {
	#cleanup

	# cd out of git (cloned) directory
	cd ..

	# remove directory
	rm -rf ${gitRepoName}

}


# I do not see anything that calls this ... is this a dup of what gitDownload function does that i have been working on?
	## if so, this is no longer needed
# gitMeta seems like a bad name now ... i probably should change that
function gitMeta() {

	#Clone repo
	### NOTE TO SELF: REMEMBER TO CLONE THIS TO MAYBE THE "DOWNLOADS" DIR
    fancy_message action "Cloning ${gitRepoName} git repo"
    git clone ${gitURL}

	# i need to cd into the dir ?

}

# git function for arch
function archGitInstall() {
	clear

	gitMeta

	fancy_message action "Entering ${gitRepoName} cloned directory"
	cd ${gitRepoName}

	clear
	# stop here telling the user what is going to happen
	fancy_message action  "About to compile and install ${gitRepoName}"
	userPrompt

	makepkg -si


	fancy_message info "$gitRepoName installed now "
	fancy_message action "\nRunning a makepkg cleanup"

	#makepkg Cleanup
	makepkg --clean

	## after reading arch wiki https://wiki.archlinux.org/index.php/makepkg#Usage,
	#I am not sure if (below) is needed ... it may be good to have both

	# gitCleanDir


  	## FYI ...now the pwd SHOULD still be the /home/<username>/Downloads  or ~/Downloads folder

}