## Load config files

. ${functionsDir}/universal/pmanagement/includePackageManager.cfg
## some includes in other locations MAY be redundant now ..


# May 2022: I just split a few function out that were a bit larger when this file started getting "too long"
. ${functionsDir}/f_detection.cfg
. ${functionsDir}/f_xmetalTasks.cfg

##############################################################

function checkLastCommandStatus() {

	# if sucessful (OR is false )
	# should i use error or warn
	[ $? == "0" ] && fancy_message info "${1}" || fancy_message error "${2}"
}


function quitScript() {
  clear
  echo "Goodbye"
  exit
}

function invalidSection() {
  fancy_message error "invalid selection "
  sleep 2s
}

function userPrompt() {
  read -r -p "Press [Enter] to continue "
}

# takes one input ... it should be able to be a var ... and it's a path
function checkDirExits() {

	# jan 2023: should i keep the else or simplify this to one line?
	[ ! -d "${1}" ] && fancy_message action "${1} path doesn't exist. creating ${1}" && mkdir "${1}"

}

###########################################################################
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
## Menu Related 
=======
## Menu Related
>>>>>>> 36429e7a (fixes/cleanup for AURHelper code)

>>>>>>> 2fd153f4 (code tidying)
# this is for what sort of menus will be used - it checks if dialog is installed
function checkDialog() {

	# if dialog is not installed (unlike what i pass to the "commadcheck function") I DO NOT want it to auto-install
	# for a user

	# that function mentioned above does the same thing as this command so to speak but "if not installed", it installs it
=======
## idea: put this further up in the file above intialTasks so i can call it from there
# this is for what sort of menus will be used
# check if dialog is installed
# i am putting this here because unlike the commandcheck function if it's not installed, I DONT want to auto-install it
# the user may not want it
function checkDialog() {

>>>>>>> c21d07a1 (dialog form of main menu working and looping)
=======
# this is for what sort of menus will be used - it checks if dialog is installed
function checkDialog() {


	# if dialog is not installed (unlike what i pass to the "commadcheck function") I DO NOT want it to auto-install
	# for a user

	# that function mentioned above does the same thing as this command so to speak but "if not installed", it installs it
>>>>>>> eacc9abe (code cleanup)
	$(command -v dialog)

	dialogCheckResult=$?

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======


>>>>>>> c21d07a1 (dialog form of main menu working and looping)
=======
>>>>>>> 11543977 (menu work and code refactoring)
	if [ $dialogCheckResult == 0 ];then
=======
	if [ "${dialogCheckResult}" == 0 ];then
>>>>>>> 4d6f98b1 (Brackets updating for variables)
		menuType="dialog"
	elif [ "${dialogCheckResult}" == 1 ];then
		menuType="echo"
	else
		fancy_message error "detecting dialog command status"

		# exit?  or should this be a return ?
		exit
	fi

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
}

<<<<<<< HEAD
=======
	[ $menuType="dialog" ] && mainMenuDialog fi

	[ $menuType="echo" ] && mainMenuEcho fi

=======
	selectMenuType
>>>>>>> 11543977 (menu work and code refactoring)

=======
>>>>>>> 975ee957 (menu work and cleanup)
}
>>>>>>> c21d07a1 (dialog form of main menu working and looping)


###############################################################################


##############################################

function supportStatusDetection() {
  # EOL = actual date of the EOL
  # supported="yes" or supported="no"

  case $supported in

	yes) return ;;

	no)
		clear
		echo -e "Your distro/distro version of Linux is no longer supported"
		echo

		# idea: perhaps have another function that gives a link to the detected distro's homepage
		echo -e "Scripts Exited"
		userPrompt

		# does this exit the entire script
		exit
		;;

	*) echo -e "Your Distro's support status can not be detected" ;;

  esac

}

##############################################
function packageManDetection() {

	echo -e "About to run Package Manager detection"
	if [ $(command -v pacman) ]; then

		pmanager="pacman"

		install=$admin$pmanager" -S "
		refresh=$admin$pmanager" -$y"
		update=$admin$pmanager" -Syu"

	elif
		[ $(command -v dnf) ]
	then
		pmanager="dnf"

		install=$admin$pmanager" install"
		refresh=$admin$pmanager" check-update"
		update=$admin$pmanager" upgrade"

	#openSuse
	elif [ $(command -v zypper) ]; then
		pmanager="zypper"

		install=$admin$pmanager" install"
		refresh=$admin$pmanager" refresh"

		# update info missing due to up vs dup depending on what branch you are on

	# Solus
	elif [ $(command -v eopkg) ]; then
		pmanager="eopkg"

		install=$admin$pmanager" install"
		refresh=$admin$pmanager" "
		update=$admin$pmanager" up"

	elif [ $(command -v apt) ]; then

		pmanager="apt"

		install=$admin$pmanager" install"
		refresh=$admin$pmanager" update"

		update=$admin$pmanager" upgrade"

	elif [ $(command -v apt-get) ]; then

		pmanager="apt-get"

		install=$admin$pmanager" install"
		refresh=$admin$pmanager" update"
		update=$admin$pmanager" upgrade"

		# KDE Neon updates needed here too?

		# Send to function to get more info about say Debian vs Ubuntu and what Ubuntu spin it could be
	fi

}

##########################################################################################
function intialTasks() {

	# Gets info about distro
	# This is located in the f_generalInfo.cfg file
	printf "Getting Info about distro..\n"

	intialChecks

<<<<<<< HEAD
<<<<<<< HEAD


	# this will determine the sort of menus the scripts use
  	checkDialog
=======
	# Displays some info about the distro used
	## I think this is a test thing of output only ... for now
	## reformatting it and still displaying it may be a good idea
>>>>>>> 11543977 (menu work and code refactoring)

=======
>>>>>>> eacc9abe (code cleanup)
}

##################################################################3

# Similar to a "run all tasks" script, this will be the function that runs all the tasks that would be in the ForME scripts (maybe removed at some point from that folder )

## When this is called ... all the general checks and specific checks are DONE ... no need to redo checks

function xmetalTasks() {

	clear
	echo -e "Xmetal Task's selected"
	echo -e
	echo -e "Are you sure you want to run these tasks back to back?... if you interrupt them when they are running, there MAY be problems, down the road"

	read -p "Your Choice? (Y/N)" xmetalTasksChoice

	case $xmetalTasksChoice in

	[yY])

		# optimize mirrors/repo function for faster downloads
		# Location: /functions/universal/pmanagement/f_pmanagement.cfg

		clear
		echo -e "(If applicable) Optimizing Repos/Mirrors"
		optimizeRepo
		echo -e "Mirror/Repo Optimizing Done"
		userPrompt
		clear

		##################################################################

		# Universal Updater
		echo -e "Updating Packages"
		universalUpdate
		echo -e "Packages Updated"
		userPrompt
		clear

		#################################################################
		# Third party repo function
		## THIS DOES add (if Fedora) RPMFusion [both repos], (if openSuse) the general Packman repo

		echo -e "(If applicable) Adding Extra Repos"
		metaUniversalExtraRepos
		userPrompt
		clear

		####################################################################
		# Codec installation
		# location: /functions/universal/software/f_multimediaSoftware.cfg

		# I decided to put this here as some distros need the third party repo added first but i wanted to do a full update BEFORE anything third party was added ... before THAT
		echo -e "Installing Codecs"
		universalCodecInstall
		userPrompt

		#######################################################################
		# Add Common software, function

		#Installs software located in most distro bases
		# This function has the seperate Firefox and Bleachbit function calls in it
		#massSoftwareInstall

		#installs vscode
		#install XNViewMP
		# tiny Media Manager install
		# etcher install
		#installMakeMKV

		clear
		echo -e "Installing commonly used Apps"
		echo -e
		echo -e "* There are some third party apps downloaded here"

		universalSoftwareInstaller

		userPrompt

		##############################################################################
		# Install OMF - fish shell, Oh-My-Fish for the fish shell, and some OMF addons
		# location: /function/universal/software/f_cli_related.cfg
		clear
		echo -e "Installing fish shell and Oh-My-Fish Addition"

		metaInstallFishShell

		echo -e "Fish shell Added"
		userPrompt

		##############################################################

		clear
		echo "Installing some common theming"
		metaThemeInstall
		echo -e "Theming Added"
		userPrompt

		# Vivaldi/ Google Chrome?

		echo -e "Xmetal's Batch scripts are DONE"
		userPrompt
		clear

		;;

	[nN]) return ;;

	*) echo -e "Invalid Selection" ;;

  esac

}

<<<<<<< HEAD
<<<<<<< HEAD

<<<<<<< HEAD
function checkMenuType() {
	# if menutype is NOT set (what checkDialog checks for anyway)
	if [ ! -v $menuType ]; then
		checkDialog
	fi

}


function checkMenuType() {
	# if menutype is NOT set (what checkDialog checks for anyway)
	if [ ! -v $menuType ]; then
		checkDialog
	fi

}


<<<<<<< HEAD
# this feels like for dialog menus only
# can i add support for echo menus in this function?
function menuLoop() {

<<<<<<< HEAD
<<<<<<< HEAD
	# menuLoop zero = repeat ; menuLoop=1 "exit menu"


	# "if menu repeat is on" AND $menuType is NOT set
	if [ $menuLoop=0 ] && [ ! -v $menuType ]; then

		# check menuType
		checkMenuType

	else
		return
	fi

}



=======
>>>>>>> 674dedc6 (menu work)
=======
>>>>>>> 2fd153f4 (code tidying)
## NO CLUE if this is the best place to put this
function detectMenuVariant() {

<<<<<<< HEAD
	## best place to call this?
	#checkDialog

	# menuName passed ... this adds onto it
	# if [ "$menuType" == "dialog" ]; then
	# 	menuName=$menuName"Dialog"
	# elif [ "$menuType" == "echo" ]; then
	# 	menuName=$menuName"Echo"
	# fi

	menuType="echo"

<<<<<<< HEAD
}

=======
=======

# this feels like for dialog menus only
# can i add support for echo menus in this function?
>>>>>>> ac32f355 (working dual menus)
function menuLoop() {

	if [ $? -ne 0 ] || [  ]; then
  	  exit;
=======
	if [ $menuLoop=0 ]; then
<<<<<<< HEAD
		mainMenuEcho
>>>>>>> 2e73127b (Echo Loop fix for main menu)
=======
		checkDialog
>>>>>>> c21d07a1 (dialog form of main menu working and looping)
=======
	# menuLoop zero = repeat ; menuLoop=1 "exit menu"


	# "if menu repeat is on" AND $menuType is NOT set
	if [ $menuLoop=0 ] && [ ! -v $menuType ]; then

		# check menuType
		checkMenuType
<<<<<<< HEAD
	
>>>>>>> 975ee957 (menu work and cleanup)
=======

>>>>>>> ff955b73 (menu work)
	else
		return
	fi

}
<<<<<<< HEAD
>>>>>>> 92e2edc0 (Menu Work)
=======

<<<<<<< HEAD
>>>>>>> c21d07a1 (dialog form of main menu working and looping)
=======


=======
>>>>>>> b574982e (most all menus working)
## NO CLUE if this is the best place to put this
function detectMenuVariant() {

<<<<<<< HEAD
	# ?? remove "Checkdialog" function

<<<<<<< HEAD
	# menuName passed ... this adds onto it
	# if [ "$menuType" == "dialog" ]; then
	# 	menuName=$menuName"Dialog"
	# elif [ "$menuType" == "echo" ]; then
	# 	menuName=$menuName"Echo"
	# fi

	menuType="echo"

	# idea: calls the menu
	$menuName

	# to clear var
	menuName=""
=======
>>>>>>> 8756e7bb (menu work)
}

>>>>>>> 975ee957 (menu work and cleanup)
=======

=======
>>>>>>> 8eb61a10 (most all dual menus working)
	if [ $(command -v dialog) ]; then
		menuName=$baseMenuName"Dialog"
		menuType="dialog"
	else 
		menuName=$baseMenuName"Echo"
		menuType="echo"
	fi
<<<<<<< HEAD
}
>>>>>>> b574982e (most all menus working)
=======
=======
	# if [ $(command -v dialog) ]; then
	# 	menuName=$baseMenuName"Dialog"
	# 	menuType="dialog"
	# else
	# 	menuName=$baseMenuName"Echo"
	# 	menuType="echo"
	# fi

	menuName=${baseMenuName}"Echo"
	menuType="echo"
>>>>>>> 5ac13ee4 (Disabled Check for Dialog, only leaving the echo menus)

}
<<<<<<< HEAD
>>>>>>> 8eb61a10 (most all dual menus working)
=======

## End Menu Related
###############################################################################


##########################################################################################
function intialTasks() {

	# Gets info about distro
	# This is located in the f_generalInfo.cfg file
	fancy_message action "Getting Info about distro"

	intialChecks

}
>>>>>>> 2fd153f4 (code tidying)
