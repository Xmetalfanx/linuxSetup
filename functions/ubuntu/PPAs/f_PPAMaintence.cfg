function ppaBranchCheck()
{
    echo
    echo -e "Checking if your Ubuntu base is supported by selected PPA "

    # if $lsbCodename INCLUDE what is in $supportedBases
    if [[ $supportedBases =~ $lsbCodename ]]; then
        echo "PPA works on the Ubuntu base you are on "
        PPAsupported="yes"

    # check 1 = "if lsbCodename is blank" ... I think anyway
    # check 2 = "if lsbCodename is not blank but is 'n/a' "
    elif  [ -z $lsbCodename ] || \
          [ $lsbCodename = "n/a" ]; then
        echo -e "It appears you are not on Ubuntu"

    else
        echo "PPA not made for the Ubuntu Base you are on"
        PPAsupported="no"
    fi

}
########################################################################

## What is this for ... seems i have a few function that seem to have the same goal
function ppaPackageInstallCheck()
{
  if [ $ppaPackageInstall = 'yes' ]; then

    $install $packageNames

  elif [ $ppaPackageInstall = 'no' ]; then
    return
  #  really ... this else should never be reached
  else
    echo -e "error detecting ppaPackageInstall variable status"
  fi

}

# This will check if the user wants to install the packages typically associated with the PPA (listed in each PPA function)
function ppaPackageInstallDefault()
{
    clear
    echo -e "Would you like to install the packages associated with PPAs, by Default ?"
    echo
    echo -e "note: this DOES NOT mean ALL the packages in said-PPA, rather the most popular or most associated with said PPA "
    echo
	  echo -e "Not all PPAs in these scripts have this... look for the PPA functions and the packages that would be installed are "packageName" in those scripts

    read -p  "Your Choice? (Y/N):" installPPADefaultSelection

    case $installPPADefaultSelection in

    [yY]|yes) ppaPackageInstall=yes
      echo -e "Common/Popular packages associated with PPAs ${bold}will${completeReset}now be installed by default"

      ;;

    [nN]|no) ppaPackageInstall=no
      echo -e "Common/Popular packages associated with PPAs will ${bold}NOT${completeReset} be installed by default"

      ;;

    # Catch all for everything else
    *) echo -e "Invalid selection "
        return ;;

    esac

    printf $ppaPackageInstall > $settingsDir/ubuntuPPA.txt

    echo
    echo "To change this setting, just run this menu option again "
    echo
    userPrompt
    clear

}

## If i call this in every ppa function to ask, this would get VERY annoying to the user i think 

# Asks if the user wants to install the software typically associated with the PPA in question
function installPPAPackages()
{
	clear

	echo -e "The ppaPackageInstall variable is set to $ppaPackageInstall which controls if packages (if any are listed in the ppaFunction for a ppa) are installed by default"
	echo
	read -p "Would you like to change this option? (Y/N)" changePPAInstallOption


  	case $changePPAInstallOption in

		[yY]|yes) ppaPackageInstallDefault ;;

		# should NOT exit the scripts as a whole
		[nN]|no) return ;;

		*) echo -e "Invalid selection " ;;

  	esac

}


# Meta function for adding PPAs
function addPPA()
{

    # call to function in /functions/ubuntu/PPAs/f_branchCheck.cfg
    # check if PPA is supported by the current version of Ubuntu running
    ppaBranchCheck

    case $PPASupported in

		yes)
		echo -e "Adding $PPAName PPA"
		$aptAddRepo $ppaSource
		;;

		# This SHOULD NOT exit the scripts completely, just back to the main menus
		*) exit ;;

    esac
    ## ends the case if the PPA is supported


    #Check if user wants to install the software typically associated with the PPA

    installPPAPackages

	# Refreshes the repo
	$refresh


	# possibly install packages based on var
	# (my) Default = not installing software but i will have the user decide that

	# Issue i see = I do want to set "no" as a default but i need a way to store the answer (in case the user changes it )
	# in a file and read that file in on startup ... only changing the default back to no if the file doesn't exist or something...
	# i do not want to overwrite the user's choice
	ppaPackageInstallCheck

}