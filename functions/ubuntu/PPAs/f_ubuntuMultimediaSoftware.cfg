## IDEA: remember to keep the adding the PPA and installing the app code seperate as I may just want to add a PPA and let the user add what packages they want FROM said-PPA on their own 

#####################################

function installAudioRecorderPPA()
{

	PPAName="Audio Recorder"
	PPASource="ppa:audio-recorder/ppa"
	PPARef="https://launchpad.net/~audio-recorder/+archive/ubuntu/ppa"
	packageNames="audio-recorder"
	supportedBase="xenial bionic cosmic disco"

	addPPAFunction $PPAName $PPASource

}


######################################################################
## PPAs, that are not needed but offer officially (for each app/dev) ways to install newer versions, than are in default repos 


function installMPVPPA()
{
	# Source: https://launchpad.net/~mc3man/+archive/ubuntu/mpv-tests

	# This PPA is not "needed" but it has a new version by a version or two then what is in the default repos
	# MOST important is that it's offically listed on the MPV site on how to install MPV so the dev knows about this specific PPA 

	PPAName="MPV"
	PPASource=ppa:mc3man/mpv-tests
	PPARef=""

	packageNames=mpv

	ppaRepoAddition $PPAName $PPASource $packageNames
	
	$install $packageNames

}

function installSMPlayerPPA()
{
	PPAName="SMPlayer" 
	PPASource="ppa:rvm/smplayer"
	
	packageNames="smplayer smplayer-themes smplayer-skins"
	
	ppaRepoAddition $PPAName $PPASource

	$install $packageNames

}

## note to self: make a univesal makeMKV installer function
## This function would get called "if on an Ubuntu base"
function makeMKVPPA
{
	PPAName=MakeMKV
	packageNames="makemkv-bin makemkv-oss"
	PPASource=ppa:heyarje/makemkv-beta
	PPARef=""

	ppaRepoAddition $PPAName $PPASource 
	
	$install $packageNames

}

function aNoisePPA
{

    PPAName="ANoise, White Noise App"
    ppaRef=""
    ppaSource="ppa:costales/anoise"
    supportedBases="trusty xenial bionic cosmic disco"
    packageNames="anoise"

    ppaRepoAddition $PPAName $PPASource
	
	$install $packageNames

}
