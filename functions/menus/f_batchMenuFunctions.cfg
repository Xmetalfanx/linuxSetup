
# echos out the content of the menu
	# the name of the array is what gets passed

function setupMenu() {

  for element in "${menuArrayName[@]}"
    do
		# check the length of the element
			# if it's 2 chars or under it has to be a key .. if over it's a menu item (text)
		if [ "${#element}" -lt 3 ]; then
            menuKey=$element
			# make the message Sub-Menu, bold 
            echo -en "$menuKey\t"
		else
			menuText=$element
            search="[Sub-Menu]"
            #echo -e "${menuText}"
            if [[ "${menuText}" == *"${search}"* ]]; then
               # bold + color + what i want to add color to = reset 
			    echo -e "${bold}${fglightblue}${search}${completeReset} ${menuText#\[Sub-Menu\] }"
            else
                echo -e "${menuText}"
            fi
		fi

    done
}

#################################################

function menuHeader() {
	BORDER1="----------------------------------------------------"
    BORDER2="####################################################"

    clear
    #echo -e "${BORDER1}\n[+] ${MENU_TITLE}\n${BORDER1}\n\v"
    echo -e "${completeReset}${BORDER1}\n[-] ${menuTitle}\n${BORDER1}"


}


#idea for now: this is the Meta function
function createEchoMenu() {

	clear

	menuHeader

	setupMenu "$menuArrayName"

	echo
	read -r -p "Your choice: " currentMenuSelection

	$currentMenuCaseStatementName

	$menuName
}

function createDialogMenu() {
	# BACKTITLE and MENU are both set in f_variables.cfg

	# i think this displays the menu
	currentMenuSelection=$(dialog --title "$menuTitle" \
							--backtitle "$BACKTITLE" \
							--menu "$MENU" \
							$WIDTH $HEIGHT $CHOICEHEIGHT \
							"${menuArrayName[@]}"  \
							3>&2 2>&1 1>&3)

	# gets users selection
	$currentMenuCaseStatementName


	$menuName
}