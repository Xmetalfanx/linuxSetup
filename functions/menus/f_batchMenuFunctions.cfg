<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 8756e7bb (menu work)
=======

=======
# note to self: since i have a var with "menuLoop" as the name, rename this function 
>>>>>>> b574982e (most all menus working)
function menuLoop() {

	# menuLoop zero = repeat ; menuLoop=1 "exit menu"

	if [ "$menuLoop" = "0" ]; then
		# loop menu 
		$menuName

	fi

}

=======
# note to self: since i have a var with "menuLoop" as the name, rename this function
function menuLoop() { $menuName }
>>>>>>> d561c376 (Echo Menu slimming)
=======
>>>>>>> b0ee99de (menu code refactoring)

<<<<<<< HEAD
>>>>>>> 674dedc6 (menu work)
function assignMenuName() {
	case $menuType in
    	"dialog") menuName=$baseMenuName"Dialog" ;;
    	"echo") menuName=$baseMenuName"Echo" ;;
		*) menuName="unknown menuName" ;;
	esac
}
=======
# echos out the content of the menu
	# the name of the array is what gets passed
<<<<<<< HEAD
>>>>>>> b574982e (most all menus working)

=======
>>>>>>> d561c376 (Echo Menu slimming)
function setupMenu() {

	for element in "${menuArrayName[@]}"
    do

		# check the length of the element
			# if it's 2 chars or under it has to be a key .. if over it's a menu item (text)
		if [ "${#element}" -lt 3 ]; then
			menuKey=$element
			echo -en " $menuKey:\t"
		else
			menuText=$element
			echo -en "$menuText\n"
		fi

    done
}

#################################################

function menuHeader() {
	echo -e " $menuBorder"
	echo -e " $menuTitle"
	echo -e " $menuBorder\v"
}


<<<<<<< HEAD
#idea for now: this is the Meta function
function createEchoMenu() {

	clear

	menuHeader

	setupMenu "$menuArrayName"

	echo
	read -r -p "Your choice: " currentMenuSelection

	$currentMenuCaseStatementName

	$menuName
}
<<<<<<< HEAD
=======
function checkLengthOfElement() {
=======
# the name of the array is what gets passed
>>>>>>> 0f3c7c47 (working on menu redo)


function setupMenu() {

	currentArrayName="$1"
	declare -n currentArray=${currentArrayName}

	for element in "${currentArray[@]}"
    do

		# get the length of that element
		elementLength=${#element}

		# check the length of the element
		if [ $elementLength -lt 2 ]; then
			menuKey=$element
			echo -en " $menuKey:\t"
		else
			menuText=$element
			echo -en "$menuText\n"
		fi

    done
}
<<<<<<< HEAD
>>>>>>> 11543977 (menu work and code refactoring)
=======


function menuHeader() {

	clear
	echo -e " $menuBorder"
	echo -e " $menuTitle"
	echo -e " $menuBorder\v"
}
<<<<<<< HEAD
>>>>>>> 28e67e53 (move to function for menu header display)
=======






=======
>>>>>>> ff955b73 (menu work)
#idea for now: this is the Meta function
function echoMenuLoop() {

	menuHeader

	# intiallize menu loop
	menuLoop=0

	if [ $menuLoop = 0 ]; then
		setupMenu "$menuArrayName"

		echo
		read -p "Your choice: " $currentMenuSelectionVar

		# calls the case statement
		$currentMenuCaseStatementName
	else
		return
	fi

	menuLoop $echoMenuLoop

}
<<<<<<< HEAD
>>>>>>> 0f3c7c47 (working on menu redo)
=======
>>>>>>> 8756e7bb (menu work)
=======

function createDialogMenu() {
	# BACKTITLE and MENU are both set in f_variables.cfg

	# i think this displays the menu
	currentMenuSelection=$(dialog --title "$menuTitle" \
							--backtitle "$BACKTITLE" \
							--menu "$MENU" \
							$WIDTH $HEIGHT $CHOICEHEIGHT \
							"${menuArrayName[@]}"  \
							3>&2 2>&1 1>&3)

	# gets users selection
	$currentMenuCaseStatementName
<<<<<<< HEAD
<<<<<<< HEAD
	menuLoop
}
>>>>>>> b574982e (most all menus working)
=======
=======


>>>>>>> 9f3a24c8 (commenting out looop code for dialog menu)
	$menuName
}
>>>>>>> d561c376 (Echo Menu slimming)
