
function determineDE_Fallbacks1() {

	[ -n "$KDE_FULL_SESSION" ] && DEName="KDE"
	[ -n "$TDE_FULL_SESSION" ] && DEName="Trinity"
	[ -n "$GNOME_DESKTOP_SESSION_ID" ] && DEName="GNOME"
	[ -n "$MATE_DESKTOP_SESSION_ID" ] && DEName="MATE"
	[[ -n $(budgie-desktop --version) ]] && DEName="Budgie"

	# if dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus \
	# 	org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager >/dev/null 2>&1 ; then
	# 	DEName="GNOME"
	# elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep -q -i ' = \"xfce4\"$'; then
	# 	DEName="Xfce"
	# elif xprop -root 2> /dev/null | grep -q -i '^xfce_desktop_window'; then
	# 	DEName="Xfce"
	# elif echo "$DESKTOP" | grep -q -i '^Enlightenment'; then
	# 	DEName="Enlightenment"
	# fi
}

function determineDE_Fallbacks2() {

	# fallback to checking $DESKTOP_SESSION
	local _DESKTOP_SESSION=
	if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
		if [[ ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -gt 1 ]] || [[ ${BASH_VERSINFO[0]} -gt 4 ]]; then
			_DESKTOP_SESSION=${DESKTOP_SESSION,,}
		else
			_DESKTOP_SESSION="$(tr '[:upper:]' '[:lower:]' <<< "${DESKTOP_SESSION}")"
		fi
	else
		_DESKTOP_SESSION="$(tr '[:upper:]' '[:lower:]' <<< "${DESKTOP_SESSION}")"
	fi

	case "${_DESKTOP_SESSION}" in
		'gnome')DE="GNOME"	;;
		'deepin') DE="Deepin" ;;
		'lumina') DE="Lumina" ;;
		'lxde') DE="LXDE" ;;
		'mate') DE="MATE" ;;
		'xfce'*) DE="Xfce" ;;
		'budgie-desktop') DE="Budgie" ;;
		'cinnamon') DE="Cinnamon" ;;
		'trinity') DE="Trinity"	;;
	esac
}

function determineDEVersion() {

	# Cinnamon
	[ "${DEName}" == "Cinnamon" ] && DEVersion=$(cinnamon --version | awk '{print $2}' )

	if [[ ${DEName} == "GNOME" ]]; then
		if type -p gnome-control-center>/dev/null 2>&1; then
			DEVersion=$(gnome-control-center --version 2> /dev/null)
		elif type -p gnome-session-properties >/dev/null 2>&1; then
			DEVersion=$(gnome-session-properties --version 2> /dev/null)
		elif type -p gnome-session >/dev/null 2>&1; then
			DEVersion=$(gnome-session --version 2> /dev/null)
		fi
	elif [[ ${DEName} == "LXQt" ]]; then
		if type -p lxqt-about >/dev/null 2>&1; then
			DEVersion=$(lxqt-about --version | awk '/^liblxqt/ {print $2}')
		fi
	elif [[ ${DEName} == "MATE" ]]; then
		if type -p mate-session >/dev/null 2>&1; then
			DEVersion=$(mate-session --version)
		fi
	elif [[ ${DEName} == "Unity" ]]; then
		if type -p unity >/dev/null 2>&1; then
			DEVersion=$(unity --version)
		fi
	elif [[ ${DEName} == "Deepin" ]]; then
		if [[ -f /etc/deepin-version ]]; then
			DEVersion="$(awk -F '=' '/Version/ {print $2}' /etc/deepin-version)"
		fi
	elif [[ ${DEName} == "Trinity" ]]; then
		if type -p tde-config >/dev/null 2>&1; then
			DEVersion="$(tde-config --version | awk -F ' ' '/TDE:/ {print $2}')"
		fi
	elif [[ ${DEName} == "KDE" ]]; then
		DEVersion=$(plasmashell --version | awk ' { print $2 } ') && DENameWVersion="${DEName} ${DEVersion}"
	elif [[ ${DEName} == "Xfce" ]]; then
		DEVersion=$(xfce4-about --version 2> /dev/null | awk '/xfce4-about/ { print $2}')
	fi

	# KDE related note to self
	# this may not work if it is "KDE4" OR "KDE5"
	# do a regex "if it CONTAINS 'KDE' "

}

# part of this code IS FROM screenfetch
function determineDE() {

	# the return may not be a good idea ... there are fallbacks later that will get skipped
	#[ ! -v "XDG_CURRENT_DESKTOP" ] &&  && return

	if [ -v "XDG_CURRENT_DESKTOP" ]; then

		DEName="Not Present"
		fancy_message action "Determining Desktop"

		# Screenfetch comment:
		# Let's use xdg-open code for GNOME/Enlightment/KDE/LXDE/MATE/Xfce detection
		# http://bazaar.launchpad.net/~vcs-imports/xdg-utils/master/view/head:/scripts/xdg-utils-common.in#L251

		# note to self: ,, means lowercase
		case "${XDG_CURRENT_DESKTOP,,}" in
			'enlightenment') DEName="Enlightenment" ;;
			'gnome') DEName="GNOME" ;;
			'Budgie:Gnome') DEName="Budgie" ;;
			'kde') DEName="KDE" ;;
			'lxde') DEName="LXDE" ;;
			'mate') DEName="MATE" ;;
			'xfce') DEName="Xfce" ;;
			'x-cinnamon') DEName="Cinnamon" ;;
			'unity') DEName="Unity" ;;
			'lxqt') DEName="LXQt" ;;
		esac

	else
		# fallbacks if the above checks don't work
		[[ -z "${DEName}" || "${DEName}" = "Not Present" ]] && determineDE_Fallbacks1
		[[ -z "${DEName}" || "${DEName}" = "Not Present" ]] && determineDE_Fallbacks2

	fi

	determineDEVersion


}

function getDesktopInfo() {
	#clear

	fancy_message action "Checking if inxi is installed"
	commandCheck "inxi"

	determineDE

	# test/idea .. this may not make sense NOR is this the "best spot"
	[ ! -v "${DENameWVersion}" ] && DENameWVersion="$DEName $DEVersion"

}
