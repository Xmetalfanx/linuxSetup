################################################################
# For getting General info ... functions in other files for that should be moved here

function cpuTypeDetection() {

	cpuArchTest=$(uname -a)

	# check for 32 or 64 bit processor
	if [[ "${cpuArchTest}" == *"x86_64"* ]]; then
		cpuArchType="64"
	elif [[ "${cpuArchTest}" == *"i386"* ]]; then
		cpuArchType="32"
	else
		echo -e "error detecting CPU type"
	fi

}


function lsbReleaseInfo() {

	# Seems like a "Full name"
	lsbDescription=$(lsb_release -sd )

	# Release number ... not sure if this varies from distro to distro
	lsbRelease=$(lsb_release -sr)

	# Number spelled out on Fedora
	# Codename on Ubuntu
	lsbCodename=$(lsb_release -sc)

	# more Exact name? ... this could be handy
	lsbDistribID=$(lsb_release -si)

}


# Gets info from os-release file in the /etc directory
function osreleaseInfo() {

	OSRELEASE_NAME=$(awk -F= '/^NAME=/ { print $2 }' /etc/os-release | $removeDQuotes )
	OSRELEASE_IDLIKE=$(awk -F= '/^ID_LIKE=/ { print $2 }' /etc/os-release | $removeDQuotes)
	OSRELEASE_ID=$(awk -F= '/^ID=/ { print $2 }' /etc/os-release | $removeDQuotes )
	OSRELEASE_VERSIONID=$(awk -F= '/^VERSION_ID=/ { print $2 }' /etc/os-release | $removeDQuotes )
	OSRELEASE_VERSION=$(awk -F= '/^VERSION=/ { print $2 }' /etc/os-release | $removeDQuotes )

	OSRELEASE_VERSION_CODENAME=$(awk -F= '/^VERSION_CODENAME=/ { print $2 }' /etc/os-release)
	OSRELEASE_UBUNTU_CODENAME=$(awk -F= '/^UBUNTU_CODENAME=/ { print $2 }' /etc/os-release)
	UBUNTU_CODENAME=${OSRELEASE_UBUNTU_CODENAME}

	OSRELEASE_DEBIAN_CODENAME=$(awk -F= '/^DEBIAN_CODENAME=/ { print $2 }' /etc/os-release)
	DEBIAN_CODENAME=${OSRELEASE_DEBIAN_CODENAME}

}

#####################################################################

# yeah ... the funct. name could be better ..
function specificChecks() {
	# For this to be logical ... .I need to know the distro at this point

	## This is the code from Screenfetch and it's in /functions/info/f_desktopDetection.cfg
	fancy_message action "Detecting the current Desktop being used:"
	getDesktopInfoInxi

	# determine if 32 or 64bit
	fancy_message action "Determining CPU Type"
	cpuTypeDetection

	# Detect GTK version
	#fancy_message action "Detecting GTK Version"
	# gtkVersionDetection
}

function scriptDependencyChecks() {
	# Check for lsb_release and wget (not in arch by default)
		# not sure why but I have packageManDetection in lsbRelease

	#userPrompt
	lsbReleaseCheck
  	#userPrompt
	wgetAndCurlCheck
	#userPrompt

}

function obtainDistroInformation() {
	# Get info from lsb_release
	fancy_message info "Getting info based on lsb-release"
	lsbReleaseInfo

	# Gets info from /etc/os-release
	fancy_message info "Getting info from /etc/os-release file"
	osreleaseInfo

}

function determineDistro() {
	if  [ "${pmanager}" = "pacman" ] || \
		[ "${lsbDistribID}" = "Arch" ] || \
		[ "${OSRELEASE_ID}" = 'arch' ] || \
		[ "${OSRELEASE_ID}" = 'anarchy' ]; then

        ## This is ok for Manjaro since the BASE is arch ... it's not saying the DISTRO is arch, here
        distroBase="arch"
        rollingRelease="yes"
        supported="yes"

        manjaroCheck

    #Debian
    elif  	[ "${OSRELEASE_ID}" = "debian" ] || \
			[ "${OSRELEASE_ID}" = "sparky" ] || \
			[ "${OSRELEASE_IDLIKE}" = "debian" ] || \
          	[ "${OSRELEASE_NAME}" =  "Debian GNU/Linux"  ] || \
          	[ "${lsbDistribID}" = "Sparky" ] || \
		        [ "${lsbDistribID}" = "debian" ]; then

            distroBase="debian"

            debianBranchCheck

    # Fedora
    ## on the third check, doublecheck (no pun) I have the correct file listed
    ## id may be a changed var ... it's the ID from OS release
    elif  [ "${pmanager}" = "dnf" ] ||  \
          [ "${lsbDistribID}" = "Fedora" ] || \
          [ -f /etc/fedora-release ] || \
          [ "${OSRELEASE_ID}" = "fedora" ]; then

            distroBase="fedora"


            fedoraCheck

    #openSuse
    elif  [ "${pmanager}" = "zypper" ] || \
          [ "${lsbDistribID}" = "openSUSE" ] ||  \
          [ "${OSRELEASE_ID}LIKE" = "opensuse suse" ]; then

            distroBase="opensuse"

            ## Function in /functions/checks/f_openSuseCheck.cfg
            openSuseCheck

    # Solus
    elif  [ "${pmanager}" = "eopkg" ] || \
          [ "${lsbDistribID}" = "Solus" ] || \
          [ "${OSRELEASE_ID}" = "solus" ] || \
          [ "${OSRELEASE_NAME}" = "Solus" ] || \
          [ -f /etc/solus-release ]; then

            distroBase="solus"
            rollingrelease="yes"
            supported="yes"

    # Ubuntu
    elif  [ "${lsbDistribID}" = "Ubuntu" ] ||  \
          [ "${OSRELEASE_ID}" = "ubuntu" ] ||  \
          [ "${OSRELEASE_ID}" = "neon" ] ||  \
          [ "${OSRELEASE_ID}" = "linuxmint" ] ||  \
          [ "${OSRELEASE_IDLIKE}" = "ubuntu" ]; then

            distroBase="ubuntu"

            ubuntuBaseCheck

            # Check if variable is empty and if so, set it's default
            # This var controls if
            if [ -z ${ppaPackageInstall} ]; then
                ppaPackageInstall=no
            else

			  return

            fi

    else
         	# This should mean the variable does exist (maybe user set it) and do not touch it
			fancy_message warning "Distro Base can not be detected"
			userPrompt
    fi

}

function intialChecks
{
	# Get Dependencies needed by scripts
	scriptDependencyChecks

	# get distro info from lsb and os-release file data
	obtainDistroInformation

	fancy_message action "Distro Info now obtained"

	# uses various lsb, /etc/os-release, and (known at this point) package manager info to determine what the distro is
	determineDistro

	## Desktop check
	fancy_message action "Specific Info Checks Started ... "
	specificChecks

	fancy_message info "Detected Distro Base: ${distroBase}"

	distroBranchOutput

	## Support status detection
	supportStatusDetection

	# Gtk theme check
	gtkThemeInfo

}