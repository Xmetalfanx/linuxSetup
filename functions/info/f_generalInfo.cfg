################################################################
# For getting General info ... functions in other files for that should be moved here 

function lsbReleaseInfo()
{ 
  
  # Seems like a "Full name"
  lsbDescription=$(lsb_release -sd )
  
  # Release number ... not sure if this varies from distro to distro 
  lsbRelease=$(lsb_release -sr)
  
  # Number spelled out on Fedora
  # Codename on Ubuntu 
  lsbCodename=$(lsb_release -sc)
  
  # more Exact name? ... this could be handy 
  lsbDistribID=$(lsb_release -si)

}

# Gets info from os-release file in the /etc directory 
function osreleaseInfo()
{

  ################################################
  OSRELEASE_NAME=$(grep "^NAME=" /etc/os-release | cut -d '=' -f 2 | sed 's/\"//g' )
  OSRELEASE_IDLIKE=$(grep "^ID_LIKE=" /etc/os-release | cut -d '=' -f 2 | sed 's/\"//g' )
  OSRELEASE_ID=$(grep "^ID=" /etc/os-release | cut -d '=' -f 2 | sed 's/\"//g' )
  OSRELEASE_VERSIONID=$(grep "^VERSION_ID=" /etc/os-release | cut -d '=' -f 2 | sed 's/\"//g')
  OSRELEASE_VERSION=$(grep "^VERSION=" /etc/os-release | cut -d '=' -f 2 | sed 's/\"//g' )

  # Consider this to the Ubuntu specific check function
  OSRELEASE_UBUNTU_CODENAME=$(grep "^UBUNTU_CODENAME="  /etc/os-release | cut -d '=' -f 2 | sed 's/\"//g' )

}

#####################################################################

# yeah ... the funct. name could be better ..
function specificChecks()
{
  ## This is the code from Screenfetch and it's in /functions/info/f_desktopDetection.cfg
  echo -e "Detecting the current Desktop being used:"
  DECheck

  # Detect GTK version
  echo -e "Detecting GTK Version"
  gtkVersionDetection
}

function lsbReleaseCheck()
{
  # idea: if i put this here, I will have to call it anyway so ... I can remove the call elsewhere ... i have to (wherever I called it before) remember to put a note to point to here and why i am doing this 
  packageManDetection
  
  echo -e "Checking for lsb-release, as it's not installed by default in all distros"
  
  # Check for /usr/bin/lsb_release
  if [ -f /usr/bin/lsb_release ]
      # Installed - no tasks needed
      return 

  else 
    # If not installed
      
        # note to self: here the package manager is known, but NOT the distro 

        case pmanager

        dnf) $install redhat-lsb-core ;;

        zypper) $install lsb-release ;; 


        esac 

  fi 

 

}


function intialChecks 
{
  # Check for lsb_release
  lsbReleaseCheck
  

  # Get info from lsb_release
  echo "Getting info based on lsb-release"
  lsbReleaseInfo

  # Gets info from /etc/os-release
  echo "Getting info from /etc/os-release file "
  osreleaseInfo

  # Detect package Manager Info 
  # Leave this for now ... there is no need for this here as I have already run this in lsbReleaseCheck (if not installed, it needs to know how to install it)... running this here again would be redundant 
  # packageManDetection

  # Test only
  echo -e "PackageManager: $pmanager"
  echo -e "install: $install"

  userPrompt

  # $id is wrong ... IT's related to osrelease_ID now 
  if  [ pmanager="pacman" ] || \
      [ lsbDistribID = "Arch" ] || \
      [ "$id" == 'arch' ] || \
      [ '$id' == 'anarchy' ]; then
      
        ## This is ok for Manjaro since the BASE is arch ... it's not saying the DISTRO is arch, here
        distroBase="arch"
        rollingRelease="yes"

    # Fedora
    ## on the third check, doublecheck (no pun) I have the correct file listed 
    ## id may be a changed var ... it's the ID from OS release 
    elif  [ pmanager="dnf" ] ||  \
          [ lsbDistribID = "Fedora" ] || \
          [ -f /etc/fedora-release ] || \
          [ OSRELEASES_ID = "fedora" ]; then
      
            distroBase="fedora"

    #openSuse
    elif  [ pmanager="zypper" ] || \
          [ lsbDistribID = "Opensuse" ] ||  \
          [ OSRELEASE_IDLIKE = "opensuse suse" ]; then
            
            distroBase="opensuse"

            # Check for branch
            ## Function in /functions/checks/f_openSuseCheck.cfg  

            ## update will be in openSuse Check 
            opensuseCheck


    # Solus
    elif  [ pmanager="eopkg" ] || \
          [ lsbDistribID = "Solus" ] || \
          [ OSRELEASES_ID = "solus" ] || \
          [ OSRELEASE_NAME = "Solus" ] || \
          [ -f /etc/solus-release ]; then

            distroBase="solus"
            rollingrelease="yes"

    # Ubuntu 
    elif  [ lsbDistribID = "Ubuntu" ] ||  \
          [ OSRELEASE_ID = "ubuntu" ] ||  \
          [ pmanager="apt" ] || \
          [ pmanager="apt-get" ]; then 
            
            distroBase="ubuntu"

            # Check if variable is empty and if so, set it's default
            # This var controls if 
            if [ -z $ppaPackageInstall ]; then
                ppaPackageInstall=no 

                echo -e $ppaPackageInstall

            else 
                # code to read in from config file goes here
                return
            fi 

      # Send to function to get more info about say Debian vs Ubuntu and what Ubuntu spin it could be 
    fi 

    ## Support check function call should be somewhere near here 

  ## Desktop check 
  echo 
  echo -e "Specific Info Checks Started ... "
  specificChecks

}