########################################################################################
# Mint-Y Theming

function mintYThemingMetaInstall_legacy() {
  # Idea: for the distros that do not have Mint-Y in their repos, eventually getting it via the Mint Github page and installing it that way, may be the way to go w

  clear
  fancy_message action "Installing Mint-Y Theming - Icons and Themes ... if possible "

  case $distroBase in

    arch)
      # ?? should these be in double quotes? can i pass them in one line?
      aurAppInstall mint-y-icons

      aurAppInstall mint-themes
		  ;;

    fedora) $install mint-themes mint-themes-gtk3 mint-x-icons mint-y-icons mint-y-theme ;;

    opensuse) $install mint-themes gtk2-metatheme-mint gtk3-metatheme-mint ;;

    solus)
        # I would add a git repo downloader here but ... for the theme anyway ... i dont think mint-Y is coded for budgie... however there are other DE options that this maybe worth doing this for (say Solus Mate)
        fancy_message info "Mint-Y Themes are not in Solus's repo"
        ;;

    opensuse)
    # GTK themes (Mint-x? Mint-Y?)
    # it is in Leap 15.0 and TW repos
    $install mint-themes metatheme-mint-common gtk3-metatheme-mint gtk2-metatheme-mint ;;

    ubuntu)
      fancy_message info "Mint Themes for Ubuntu based distros, is not coded yet "
      return ;;

    *) fancy_message warn "distroBase not detected" ;;

  esac

}

# End of Mint theme installs
#################################################################################

# this seems like it should be more global ... come back to this later
function setupThemeLocale() {
  # do i need to clean this var ?
  destinationDir=""

   # check themeType and make dirs if they do not exist already
  [ "${themeType}" == "icons" ] && [ ! -d "${iconHome}" ] && mkdir "${iconHome}"

  [ "${themeType}" == "themes" ] && [ ! -d "${themeHome}" ] && mkdir "${themeHome}"

  ## here due to the fact that if the Home dir's do exist, this var wouldn't get assigned the way i had it before
  # the iconHome and themeHome vars are not being detected
  [ "${themeType}" == "icons" ] && destinationDir="${iconHome}"
  [ "${themeType}" == "themes" ] && destinationDir="${themeHome}"

  userPrompt
}

# not sure if this will become more global but for now it's for compiling the Mint themes
function compileTheme() {
	fancy_message action "Compiling Theme"
	python3 generate-themes.py
	userPrompt
}


# should be called when compiling a theme 
function checkThemeDependencies() {
	clear

	fancy_message info "To build this theme you need to be able to run python3."
	fancy_message action "Checking for Python3"
	
	# if Python3 is not there (for now) return
		# this means that if dependencies are there is the only case for the theme compiling 
	[ ! $(command -v python3) ] && clear && fancy_message info "Skipping since Python3 support is not detected." && fancy_message info "I do not feel comfortable adding code to install python3 support at this point, so please consult your distro's support on how to do so" && userPrompt && return

	# check for sassc 
	fancy_message action "Checking for sassc package"
	[ ! $(command -v sassc) ] && fancy_message action "Installing sassc support" && $install "sassc"

	# if things get to here then python3 and sassc should be supported and things should compile fine 
	compileTheme
}


## call this to install git theming
function gitExtractMintTheming() {
	gitRepo="${repoSource}/${repoName}"
	gitURL="https://github.com/${gitRepo}.git"

	# inside of git cloned dir
	# where to move stuff from
	if [ "${themeType}" == "icons" ]; then
		gitThemingDestLocation="usr/share/icons"
	elif [ "${themeType}" == "themes" ]; then
		# this has to be generated after the git clone.
		# i think this should be ok as a string even if the
		# location doesn't exist yet, because the var will be used below
		gitThemingDestLocation="usr/share/themes"
	else
		fancy_message warn "ERROR: gitThemingDestLocation can not be set"
	fi

	clear
	fancy_message action "Installing ${themeName}"

	# March 2023: i feel this function name could/should be more descriptive
	# this function sets the destination locations (.icon and .themes in a user's home folder) up if they are not there.
	# this function ALSO sets up some associated variables 
	setupThemeLocale

	gitDownloadedDir="${downloadDir}/${repoName}"

	## if the dir named for the themeName doesn't exist in /home/${USER}/Downloads, git clone it
	[ ! -d "${gitDownloadedDir}" ] && fancy_message action "Cloning ${themeName} Git Repository" && git clone "${gitURL}" "${gitDownloadedDir}" && userPrompt

	# in ~/Downloads/${repoName}/where mint stores the theme/icon in the git "folder"
	downloadedGitThemeLocale="${gitDownloadedDir}/${gitThemingDestLocation}/"

	if [ "${themeType}" == "themes" ]; then
		fancy_message action "Generating Themes"
		cd "${gitDownloadedDir}" && userPrompt

		# note to self: the compile step is called from this next function, instead of in here since it should only be done in certain usecases 
		checkThemeDependencies

	fi

	# move TIC (Theme/Icon/Cursors) to user's theme folder
	[ -d "${downloadedGitThemeLocale}" ] && fancy_message action "Copying ${downloadedGitThemeLocale} files to ${destinationDir} folder" && cp -vr ${downloadedGitThemeLocale}/* ${destinationDir} && userPrompt

	# should i reset the pwd?

	# Cleanup
	clear
	fancy_message action "Cleaning up Downloads directory by removing ${gitDownloadedDir}"
	rm -rf "${gitDownloadedDir}"
	userPrompt

}


#################################################################################
# Official Mint Themes

function mintThemeCurrentGit() {
# https://github.com/linuxmint/mint-themes.git
	themeName="Mint Themes"
	themeType="themes"
	repoName="mint-themes"
	repoSource="linuxmint"

	gitExtractMintTheming
}

function legacyMintThemeLegacyGit() {
	# https://github.com/linuxmint/mint-themes-legacy
	themeName="Mint Legacy Themes"
	themeType="themes"
	repoName="mint-themes-legacy"
	repoSource="linuxmint"

	gitExtractMintTheming
}

function MintyIconsGit() {
	themeName="Mint-Y Icons"
	themeType="icons"
	repoName="mint-y-icons"
	repoSource="linuxmint"

	gitExtractMintTheming
}

# End of official Mint themes
#################################################################################

# source: https://github.com/SebastJava/mint-yz-theme
function mintYZThemeGit() {
	themeName="Mint YZ Themes"
	themeType="themes"
	repoName="mint-yz-theme"
	repoSource="SebastJava"


	gitExtractMintTheming
}
