
# this seems like it should be more global ... come back to this later
function setupThemeLocalDestination() {
  # do i need to clean this var ?
  destinationDir=""

	fancy_message action "Detecting Icon/Theme Information"

	# themeHome and iconHome are .themes and .icons in a user's home folder, respectively
	case ${themeType} in

		icons)
			[ ! -d "${iconHome}" ] && mkdir "${iconHome}"
			destinationDir="${iconHome}"
			;;
		themes)
			[ ! -d "${themeHome}" ] && mkdir "${themeHome}"
			destinationDir="${themeHome}"
			;;
	esac
  userPrompt
}

function gitThemeSetVars() {
	gitRepo="${repoSource}/${repoName}"
	gitURL="https://github.com/${gitRepo}.git"

	gitRepoDownloadedDir="${downloadDir}/${repoName}"

	# in ~/Downloads/${repoName}/where the assets are stored, in the git "folder"
	# idea: instead of making another similar var ... use assetLocation in compiled theme functions where ${assetLocation} is where the theme gets compiled TO
		# issue?: can i call that before the theme is compiled? (if not.. move this line below to the compileTheme function, maybe .. AFTER it's compiled? )
	downloadedGitThemeAssetLocation="${gitRepoDownloadedDir}/${assetLocation}"

}


# not sure if this will become more global
function compileTheme() {
	# if i refactor this and call this from a diffrent pwd, the generate-themes.py file has issues, since it uses realitive paths .. that is why i change pwd(s), here 
	
	# PWD, here : the git repo dir (~/Download/<themeName> basically)

	# change pwd
	cd ${gitRepoDownloadedDir}

	fancy_message action "Compiling Theme"

	[ -f "${gitRepoDownloadedDir}/generate-themes.py" ] && python3 generate-themes.py

	userPrompt

	# exit theme dir
	cd ..

	# This may vary from theme to theme (good to know if i make this a global function) but mint-theme, compiles to (in git cloned location) /usr/share/themes/ <various sub folders>
}



# clones repo into the user's Download folder (a subfolder in it of course)
function gitThemeGitCloneRepo() {

	## if the dir named for the themeName doesn't exist in /home/${USER}/Downloads, git clone it
	[ ! -d "${gitRepoDownloadedDir}" ] && fancy_message action "Cloning ${themeName} Git Repository" && git clone "${gitURL}" "${gitRepoDownloadedDir}" && userPrompt
}

############################################################################################################
# for compiling a theme

# should be called when compiling a theme
function checkThemeDependencies() {
	clear

	fancy_message info "To build this theme you need to be able to run python3."
	fancy_message action "Checking for Python3"

	# if Python3 is not there (for now) return
		# this means that if dependencies are there is the only case for the theme compiling
	[ ! $(command -v python3) ] && clear && fancy_message info "Skipping since Python3 support is not detected." && fancy_message info "I do not feel comfortable adding code to install python3 support at this point, so please consult your distro's support on how to do so" && userPrompt && return

	# check for sassc
	fancy_message action "Checking for sassc package"
	[ ! $(command -v sassc) ] && fancy_message action "Installing sassc support" && $install "sassc"

	fancy_message action "Checking for pysassc package"
	[ ! $(command -v pysassc) ] && fancy_message action "Installing pysassc support" && $install "pysassc"

}

function gitThemeGenerateTheme() {
	if [ "${themeType}" == "themes" ]; then
		fancy_message action "Generating Themes"

		# note to self: the compile step is called from this next function, instead of in here since it should only be done in certain usecases
		checkThemeDependencies

		# if things get to here then python3 and sassc should be supported and things should compile fine
		compileTheme

	fi
}

# End of compiling theme functions
############################################################################################


# ??? - should there be a single function to:
	# a: move the "extract" themes/icons that dont need compiling
	# b: the compiled themes ... btw WHEN compiled ... (dest code for Mint themes anyway is in the cloned dir + user/share/themes/<subdirs for themes>)
		# ?? os.system("mkdir -p usr/share/themes") so usr/share/themes ?? (from mint theme py code ^ )
function gitThemeMoveFinalTheme() {

	# idea only: put a check for the "installType" here?
	case $installType in

		compile|extract)
			[ -d "${downloadedGitThemeAssetLocation}" ] && fancy_message action "Copying ${downloadedGitThemeAssetLocation} files to ${destinationDir} folder" && cp -vr ${downloadedGitThemeAssetLocation}/* ${destinationDir} && userPrompt ;;
	esac

}

# This will remove the git cloned dir (doesn't matter what installType it has) to cleanup the user's Download dir
function gitThemeCleanup() {
	# Cleanup
	clear
	fancy_message action "Cleaning up Downloads directory by removing ${gitRepoDownloadedDir}"
	rm -rf "${gitRepoDownloadedDir}"
	userPrompt
}

###################################################################

## call this to install git theming
## the "meta" function
function installGitTheming() {

	clear
	fancy_message action "Installing ${themeName}"

	gitThemeSetVars

	# this function sets the destination locations (.icon and .themes in a user's home folder) up if they are not there.
	# this function ALSO sets up some associated variables
	setupThemeLocalDestination

	gitThemeGitCloneRepo

	# for themes with say .PY Python files to compile
	[ "${installType}" == "compile" ] && gitThemeGenerateTheme &&

	# note to self: gitThemeCloneAssetLocation is the folder inside of the git clone'd repo that has the assets (TYPICALLY in subfolders IN THAT gitThemeCloneAssetLocation folder)
	[ "${installType}" == "extract" ] && gitThemeCloneAssetLocation="${downloadedGitThemeLocale}/${assetLocation}"

	gitThemeMoveFinalTheme && gitThemeCleanup

}