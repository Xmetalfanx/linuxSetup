
# this seems like it should be more global ... come back to this later
function setupThemeLocale() {
  # do i need to clean this var ?
  destinationDir=""

	fancy_message action "Detecting Icon/Theme Information"

	# themeHome and iconHome are .themes and .icons in a user's home folder, respectively
	case ${themeType} in

		icons)
			[ ! -d "${iconHome}" ] && mkdir "${iconHome}"
			destinationDir="${iconHome}"
			;;
		themes)
			[ ! -d "${themeHome}" ] && mkdir "${themeHome}"
			destinationDir="${themeHome}"
			;;
	esac
  userPrompt
}


# not sure if this will become more global but for now it's for compiling the Mint themes
function compileTheme() {
	fancy_message action "Compiling Theme"
	python3 generate-themes.py
	userPrompt
}


# should be called when compiling a theme
function checkThemeDependencies() {
	clear

	fancy_message info "To build this theme you need to be able to run python3."
	fancy_message action "Checking for Python3"

	# if Python3 is not there (for now) return
		# this means that if dependencies are there is the only case for the theme compiling
	[ ! $(command -v python3) ] && clear && fancy_message info "Skipping since Python3 support is not detected." && fancy_message info "I do not feel comfortable adding code to install python3 support at this point, so please consult your distro's support on how to do so" && userPrompt && return

	# check for sassc
	fancy_message action "Checking for sassc package"
	[ ! $(command -v sassc) ] && fancy_message action "Installing sassc support" && $install "sassc"

	# if things get to here then python3 and sassc should be supported and things should compile fine
	compileTheme
}

function gitThemeSetVars() {
	gitRepo="${repoSource}/${repoName}"
	gitURL="https://github.com/${gitRepo}.git"

	# inside of git cloned dir
	# where to move stuff from
	if [ "${themeType}" == "icons" ]; then
		gitThemingDestLocation="usr/share/icons"
	elif [ "${themeType}" == "themes" ]; then
		# this has to be generated after the git clone.
		# i think this should be ok as a string even if the
		# location doesn't exist yet, because the var will be used below
		gitThemingDestLocation="usr/share/themes"
	else
		fancy_message warn "ERROR: gitThemingDestLocation can not be set"
	fi

}

function gitThemeGitCloneRepo() {
	gitDownloadedDir="${downloadDir}/${repoName}"

	## if the dir named for the themeName doesn't exist in /home/${USER}/Downloads, git clone it
	[ ! -d "${gitDownloadedDir}" ] && fancy_message action "Cloning ${themeName} Git Repository" && git clone "${gitURL}" "${gitDownloadedDir}" && userPrompt
}

function gitThemeGenerateTheme() {
	if [ "${themeType}" == "themes" ]; then
		fancy_message action "Generating Themes"
		cd "${gitDownloadedDir}" && userPrompt

		# note to self: the compile step is called from this next function, instead of in here since it should only be done in certain usecases
		checkThemeDependencies

	fi
}

function gitThemeMoveFinalTheme() {
	# move TIC (Theme/Icon/Cursors) to user's theme folder
	[ -d "${downloadedGitThemeLocale}" ] && fancy_message action "Copying ${downloadedGitThemeLocale} files to ${destinationDir} folder" && cp -vr ${downloadedGitThemeLocale}/* ${destinationDir} && userPrompt

}

function gitThemeCleanup() {
	# Cleanup
	clear
	fancy_message action "Cleaning up Downloads directory by removing ${gitDownloadedDir}"
	rm -rf "${gitDownloadedDir}"
	userPrompt
}

# August 2023: new way for some things ... is this simplier? will this handle the variants?
function gitThemeExtractFromSrc() {

}


## call this to install git theming
## the "meta" function
function gitExtractMintTheming() {
	gitThemeSetVars

	clear
	fancy_message action "Installing ${themeName}"

	# March 2023: i feel this function name could/should be more descriptive
	# this function sets the destination locations (.icon and .themes in a user's home folder) up if they are not there.
	# this function ALSO sets up some associated variables
	setupThemeLocale

	gitThemeGitCloneRepo

	# in ~/Downloads/${repoName}/where mint stores the theme/icon in the git "folder"
	downloadedGitThemeLocale="${gitDownloadedDir}/${gitThemingDestLocation}/"

	gitThemeGenerateTheme

	gitThemeMoveFinalTheme

	# should i reset the pwd?

	gitThemeCleanup
}
