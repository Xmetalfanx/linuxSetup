# decided not to use grubconfig in case i use that var name for /boot/grub/grub.cfg
defaultGrubPath=/etc/default
defaultGrubConfig=${defaultGrubPath}/grub
defaultGrubConfigBackup=${defaultGrubPath}/grub.backup
defaultGrubOriginalBackup=${defaultGrubPath}/grub.original.backup

################################################################################
# Backing up and Restoring functions


# Makes a backup of the existing backup file in case it exists ... whether my scripts created it or not
# DO NOT call this directly
function backupOriginalGrubBackup() {
    
    [ -f ${defaultGrubConfigBackup} ] && fancy_message "Backing up existing backup file to ${defaultGrubOriginalBackup}" && sudo mv ${defaultGrubConfigBackup} ${defaultGrubOriginalBackup} && fancy_message info "Backup made of existing /etc/default/grub.bakup file" && userPrompt
}

# Main backup function
function backupDefaultGrubConfig() {

    # Backs up any original backup file ... maybe overkill but just in case it's there and BECAUSE this deals with the boot loader... I want to back it up
    backupOriginalGrubBackup

    # should i put a check for an existing backup file?
    fancy_message action "Backing up default grub config file" && sudo cp ${defaultGrubConfig} ${defaultGrubConfigBackup} && fancy_message info "Default grub config file backed up" || fancy_message warn "Issue occured backing up default grub config file"

	## pass or fail there should be a pause... no need to have two, above
	userPrompt
}

function restoreDefaultGrubConfig() {

    [ -f "${defaultGrubConfigBackup}" ] && fancy_message action "Restoring default grub config file" && userPrompt && cp ${defaultGrubConfigBackup} ${defaultGrubConfig} && fancy_message info "Default Grub config file is now restored" || fancy_message warn "Default Grub config backup file was not found; therefore, can not be restored"

}



# End of Backup and Restore functions
##########################################################################

function detectOSProberStatus() {
    unset osProberStatus

    fancy_message action "Detecting status of OS_PROBER"
    # idea: if it starts with GRUB_DISABLE_OS_PROBER (shouldn't match "#GRUB_DISABLE_OS_PROBER") and contains the word true 
    grep -E "^GRUB_DISABLE_OS_PROBER\|TRUE" ${defaultGrubConfig}

    # 0 = disabled 
    osProberResult=$?

    if [ "${osProberResult}" -eq "0" ]; then 
        fancy_message info "os-prober is disabled"
        osProberStatus="disabled"
    else  
        fancy_message info "os-prober is enabled" 
        osProberStatus="enabled"
    fi 
    
    userPrompt
}

# this would be the function to call
function enableosProber() {
    # since this should only work if "GRUB_DISABLE_OS_PROBER=true"
    # sed '/xmetal/c\THIS WAS A XMETAL LINE' test.txt;

    detectOSProberStatus
    [ ${osProberStatus} == "disabled" ] && fancy_message action "Enabling os-prober to detect other OSs" && backupDefaultGrubConfig && sed 'GRUB_DISABLE_OS_PROBER=true/c\GRUB_DISABLE_OSPROBER=false' ${defaultGrubConfig} && "os-prober successfully enabled" || fancy_message warn "not able to enable, os-prober"
}
