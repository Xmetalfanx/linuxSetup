# decided not to use grubconfig in case i use that var name for /boot/grub/grub.cfg
defaultGrubPath=/etc/default
defaultGrubConfig=${defaultGrubPath}/grub
defaultGrubConfigBackup=${defaultGrubPath}/grub.backup
defaultGrubOriginalBackup=${defaultGrubPath}/grub.original.backup

################################################################################
# Backing up and Restoring functions


# Makes a backup of the existing backup file in case it exists ... whether my scripts created it or not
# DO NOT call this directly
function backupOriginalGrubBackup() {
    
    [ -f ${defaultGrubConfigBackup} ] && fancy_message "Backing up existing backup file to ${defaultGrubOriginalBackup}" && sudo mv ${defaultGrubConfigBackup} ${defaultGrubOriginalBackup} && fancy_message info "Backup made of existing /etc/default/grub.bakup file" && userPrompt
}

# Main backup function
function backupDefaultGrubConfig() {

    # Backs up any original backup file ... maybe overkill but just in case it's there and BECAUSE this deals with the boot loader... I want to back it up
    backupOriginalGrubBackup

    [ -f ${defaultGrubConfig} ] && fancy_message action "Backing up default grub config file" && sudo cp ${defaultGrubConfig} ${defaultGrubConfigBackup} && fancy_message info "Default grub config file backed up" || fancy_message warn "Issue occured backing up default grub config file"

	## pass or fail there should be a pause... no need to have two, above
	userPrompt
}

# Main Restore function 
function restoreDefaultGrubConfig() {

    fancy_message action "Restoring default grub config file" && userPrompt

    [ -f "${defaultGrubConfigBackup}" ] && echo -e "Restoring ${defaultGrubConfigBackup} ${defaultGrubConfig}" &&  sudo cp ${defaultGrubConfigBackup} ${defaultGrubConfig} && fancy_message info "Default Grub config file is now restored" || fancy_message warn "Default Grub config backup file was not found; therefore, can not be restored"

    userPrompt

}

# End of Backup and Restore functions
##########################################################################
function displayGrubFileContent() {
    # debugging 
    grubfileContent=$(grep "GRUB_DISABLE_OS_PROBER" /etc/default/grub)

    echo -e "Default Grub file content:\t ${grubfileContent}"
    echo -e "\n Remember if a line with False OR there is no output then os_prober IS enabled"
    echo -e "If this is empty that may mean there is NO GRUB_DISABLE_OS_PROBER line of any sort in the default grub file"
    userPrompt
    # end debugging 

}

function displayOSProberStatus() {
    if [[ ${osproberLine} == GRUB_DISABLE_OS_PROBER* ]] && [[ ${osproberLine} == *"true"* ]]; then 
        fancy_message info "os-prober is disabled"
        osProberStatus="disabled"
    else  
        fancy_message info "os-prober is enabled" 
        osProberStatus="enabled"

    fi 

    #displayGrubFileContent
}

function detectOSProberStatus() {
    unset osProberStatus

    fancy_message action "Detecting status of OS_PROBER"
    
    # idea: if it starts with GRUB_DISABLE_OS_PROBER (shouldn't match "#GRUB_DISABLE_OS_PROBER") and contains the word true 
    osproberLine=$(grep -E "^GRUB_DISABLE_OS_PROBER" ${defaultGrubConfig} )

    # debugging
    # echo -e "osproberLine:\t${osproberLine}" && userPrompt
    # end debugging

    displayOSProberStatus
    
    userPrompt
}

# this would be the function to call
function enableosProber() {
    # since this should only work if "GRUB_DISABLE_OS_PROBER=true"
    # sed '/xmetal/c\THIS WAS A XMETAL LINE' test.txt;

    detectOSProberStatus
    
    # if disabled
        # 1. Backup Grub config file in /etc/defaults
    [ ${osProberStatus} == "disabled" ] && fancy_message action "Enabling os-prober to detect other OSs" && backupDefaultGrubConfig && sudo sed -i '/GRUB_DISABLE_OS_PROBER/s/^/#/' ${defaultGrubConfig} && fancy_message info "os-prober successfully enabled" || fancy_message warn "not able to enable, os-prober"

    userPrompt
}
