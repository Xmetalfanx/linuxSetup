# logs the info on the last upgrade to a file
function logUpgradeInfo()
{

  # the idea of this is to keep track (in my scripts anyway) of the last time the system was updated.   I do have a few ideas for why that may be needed that I am throwing around in my head.

  upgradeDate=$(date +%D%t:%r)

  echo -e "Last Upgraded:\t $distroBase $version \t$upgradeDate" >> updateInfo.txt

}
#############################################################



# Check if repo is installed/enabled
function repoCheck()
{
  case $distroBase in

  fedora)

      # if this is null, repo is not installed
      if [ $(dnf repolist | grep "fusion") ]; then
        # RPMFusion is installed
        return
      else
        # echo for a test only
        echo -e "RPMFusion needs to be installed"
      fi

    ;;

  opensuse)
    return ;;

  esac

  # Idea: "if thirdparty repo is there, do not install it" ... "if it's NOT THERE, install it"

  case $distroBase in

    fedora)

      ## IF $thirdPartyRepo is detected, it is installed
      dnf repolist | grep "$thirdPartyRepo" ;;

  esac

}


############################################

## This will be the meta function for arch based stuff
## Mirrors/Repos/whatever
function optimizeRepo()
{

    case $distroBase in

      fedora)
        ## Fedora  ... no need for extra checks, since the distroBase should be known here
        echo -e "Optimizing Fedora, by adding fastest mirror check to the dnf.conf file "

        su -c 'echo "fastestmirror=true" >> /etc/dnf/dnf.conf'
        echo -e "Done"
        userPrompt
        ;;

      arch)

        # backup original mirrorlist but doesn't touch the original backup if it already exists
        echo -e "Backup Mirrorlist "
        backupMirrorlist

          if  [ "$OSRELEASE_NAME" = "Manjaro Linux" ] || \
              [ "$OSRELEASE_ID" = "Manjaro Linux" ] || \
              [ "$LSBDESCRIPTON" = "ManjaroLinux" ]; then

              # Manjaro
              optimizeManjaroMirror

          else
              # Arch
              optimizeArchMirrors

          fi
          ;;

      debian)

          netselectBackup="$sourceListDir/sources.list.netselectBackup"

          clear
          echo -e "Installing netselect-apt"
          # apt-get needed? or would apt be ok?

          installApp netselect-apt

          # Backup sources.list
          echo -e "Backing up sources.list to $netselectBackup"
          sudo cp $sourceListDir/sources.list $netselectBackup
          userPrompt

          $admin netselect-apt

          ;;

      *) echo "No Optimizations performed"
          return ;;

    esac

}



###################################################################################
## PPA Related


# Asks if the user wants to install the software typically associated with the PPA in question
function installPPAPackages()
{
  echo
  echo -e "Would you like to install the packages typically associated with this PPA?"
  echo -e "Packages include: \t $packageNames"
  echo
  read -p   "Your Choice?(Y/N):" installPPASelection

  case $installPPASelection in

  [yY]|yes)
      # echo = for debugging for now
      echo -e "This would install $packageNames on your system"

      # $install $packageNames

      ;;

  # should NOT exit the scripts as a whole
  [nN]|no)
    # echo only for debugging
    echo "You have chosen NOT to install $packageNames"

  return ;;

  esac


}


function addPPA()
{

    # call to function in /functions/ubuntu/PPAs/f_branchCheck.cfg
    # check if PPA is supported by the current version of Ubuntu running
    ppaBranchCheck


    case $PPASupported in

      yes)
        # echo -e "Adding $1 PPA"
        $aptAddRepo $ppaSource ;;

    esac
    ## ends the case if the PPA is supported

    #Check if user wants to install the software typically associated with the PPA
    ## Idea: i should make a var so if say the user wants to say NO or YES here it remembers and stops asking
    installPPAPackages

  # Refreshes the repo
  $refresh


}
## End of PPA Related  Functions
################################################################################3


## Universal function to add sources
## This IS the meta function
function universalAddRepo()
{
  # $1 - Repo Name
  # $2 - Repo URL/Source

  case $distroBase in

    fedora) sudo dnf config-manager --add-repo $2 ;;
    opensuse)
          ## ANOTHER function had  "addrepo -f -n $1 $2"... what is -n ?
          sudo zypper addrepo -f $2
          ;;

    solus)
        sudo eopkg add-repo $2 ;;

    # Wait ... what?
    ubuntu) addPPA ;;

  esac
}


###############################################################
###############################################################

# Not sure where this idea is going ...

## Install FUNCTION that may be able to echo the name of the package to the user and allows me to check for the EOL too

## wasn't @ for "any number of arguements?"


## This would be for apps in the repo (or say when rpm fusion or packman are added) NOT third party stuff
function installApp()
{

   # Checks the support status and then exits the scripts if the user is on an EOL distro
  # if the support status is UNKNOWN ... the scripts will not exit
  supportStatusDetection

  ## Output is just a test, i may phrase this better later
  echo -e "Installing $@"
  $install $@

  return
}