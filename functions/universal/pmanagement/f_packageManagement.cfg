. $pmanagedir/f_pManagement_repo.cfg

# logs the info on the last upgrade to a file
function logUpgradeInfo() {

	# the idea of this is to keep track (in my scripts anyway) of the last time the system was updated.   I do have a few ideas for why that may be needed that I am throwing around in my head.

	upgradeDate=$(date +%D%t:%r)

	echo -e "Last Upgraded:\t ${distroBase} ${version} \t${upgradeDate}" >> updateInfo.txt

}
#############################################################
# Install app from list passed in as an arguement

# Apps in the list should be in the repos .... maybe if i have to (not here, but elsewhere) have to do a third party repo check

function installAppList() {
	# I did this to make it more clear, later in the function
	listName=${1}

	declare -a totalApps

	## $1 = the name of the app list Filename  (goes after the "< done" )

	while IFS='\n' read -r currentApp; do
		totalApps+=("${currentApp}")
		userPrompt
	done < "${appListDir}/${listName}"



	echo -e "About to install: ${totalApps[@]}"
	$install ${totalApps[@]}
}

####################################################################################################

## Install FUNCTION that may be able to echo the name of the package to the user and allows me to check for the EOL too


## This would be for apps in the repo (or say when rpm fusion or packman are added) NOT third party stuff
function installApp() {

	# problem .... this is going to do things one pacakge at a time
	for individualPackage in $@
	{
		# pass to detect function
		detectPackageStatus "${individualPackage}"

		case "${alreadyInstalled}" in

			no)
				echo -e "${individualPackage} is not installed\nAbout to install: ${individualPackage}"
				userPrompt

				# installs package/app only if it's not already installed
				# using installApp (function) here would just create a loop
				${install} ${individualPackage}
				;;

			yes) echo -e "${individualPackage} is installed" ;;

			*)  echo -e "Error detecting package status" ;;

		esac

	}

  ####################################################
  # Old code below in case i have to go back
  #echo -e "Installing Package(s): $@"
	#$install $@

	#return

  ###################################################

}


# for snaps and flatpaks to check if a package is already installed
# the output i have here is only for testing ... i should set a var so
# that any existing packages are not reinstalled if detected

function universalPackageInstallCheck() {
	# snap or flatpak
	uFormatType=${1}
	programName=${2}

	checkUpackageType

	# -z = "is zero?"
	# -n = "is non-zero?"
	# -v =
	if [ -n "$universalFormatExists" ]; then
		echo -e "${uFormatType} ${universalFormatExists} is installed"
	else
		echo -e "${uFormatType} ${universalFormatExists} is NOT installed"
	fi

	echo "#################################################"

}

##############################################################################

#source: https://www.linuxuprising.com/2021/01/apt-key-is-deprecated-how-to-add.html

function addGPGKey() {
    # what vars get passed?
        ## the url to the key (typically set already in other functions .. aka already done)
        # the programName var (just for echo'ing maybe )

	gpgkeyname=$(basename "${gpgkey}")


    echo -e "Getting gpg key for ${programName}"
    wget -q -nc -O- ${gpgkey} | gpg --dearmor | sudo tee ${userKeyringLocation}/${gpgkeyname}

    #idea - to clear the key var
    gpgKey=""
	gpgkeyname=""

}
