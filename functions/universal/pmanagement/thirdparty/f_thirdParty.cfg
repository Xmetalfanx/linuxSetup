###################################################################################
## Gdebi related 

function checkGdebi() {
    clear
    echo -e "Checking for Gdebi for the install"

    # checks and installs if it not already installed
    installApp "gdebi"

}

# may 9, 2022: only used atm for two wine related deps .... is that a reason to keep this function?
function gdebiInstall()
{
    # checks for gdebi and installs it if needed
    checkGdebi

    clear

    ## use $1 for now (vs something more descriptive )
    packageName=$(basename $1)

    # Change PWD
    cd ~/Downloads


	  wget $1


    userPrompt
    echo -e "Installing $packageName"

    sudo gdebi $packageName

    userPrompt

    # idea to clear the var
    packageName=/dev/null

}
## End Gdebi related 
###################################################################################

# WHAT IS THE POINT of this being a seperate function? 
function moveAppImageToProgramsFolder() {
	echo -e "Moving $programTitle AppImage to ~/Programs/ folder"
	
	mv $fileNameWEXT $programDir/$programName

	echo -e "Copying Icon file over for menu"
	cp $xmetalScriptsRoot/menu/$iconFile $programDir/$programName

}


############################################################### 
# Test Output Functions 


# This entire function is for testing only
function stripFileInfoTestOutput() {
	clear
	# Display Test for the full URL
	echo -e "\n\nFull URL is:\t $packageURL"
	# Display Test for Total file Extension
	echo -e "fileNameWEXT is:\t $fileNameWEXT"
	echo
	###############################################

	## Display Test for final output
	echo -e "fileNameFullNoDots: $fileNameFullNoDots"

	echo -e "extonly:\t $extonly"
	echo
	echo -e "archiveName by itself: \t $archiveName"
	###########################################

	userPrompt
}


function fileExtOutput() {
	#####################################
	clear
	echo -e "completeExt3: $completeExt3"
	echo -e "completeExt6: $completeExt6"

	# only for appImage
	echo -e "completeExt8 : $completeExt8"

	userPrompt
	######################################

}

# End of Test Output functions 
###############################################################################


# The reason this function is so complicated is so it handles DEBs, RPMs AND various "Tarballs" all with not only different extentions but different lengths of said-extension
function stripFileInfo() {
	#fileNameWEXT=${packageURL##*/}
	fileNameWEXT=$(basename $packageURL)

	#fileNameWEXT with .'s stripped out
	fileNameFullNoDots=$(echo $fileNameWEXT | tr -d \.)

	## These numbers are not right for my stripped test .. the number counts the .'s
	completeExt3=${fileNameFullNoDots:(-3)}
	completeExt5=${fileNameFullNoDots:(-5)}
	completeExt6=${fileNameFullNoDots:(-6)}
	completeExt8=${fileNameFullNoDots:(-8)}

	#fileExtOutput

	if  [ "$completeExt5" = "targz" ] || \
		[ "$completeExt5" = "tarxz" ]; then

		extonly=$completeExt5

	elif [ "$completeExt6" = "tarbz2" ]; then
		extonly=$completeExt6

	elif [ "$completeExt8" = "AppImage" ]; then
		extonly=$completeExt8

	elif  [ "$completeExt3" = "deb" ] || \
			[ "$completeExt3" = "rpm" ] || \
			[ "$completeExt3" = "zip" ] || \
			[ "$completeExt3" = "tgz" ]; then

		extonly=$completeExt3

	else
		echo -e "error detecting file extension of file to download"

	fi

		# fileName by itself, NO extention
	## "the longest match until there is a period".... so this will match untiL THE FINAL period it finds
	archiveName=${fileNameFullNoDots%$extonly}


}

function downloadFile() {
    downloadedFile="$downloadDir/$fileNameWEXT" 
    
    # IF the file ALREADY exists, nothing should be done ... or at least that is the idea
    if [ -f "$downloadedFile" ]; then

      # Do nothing, since file is already downloaded
      echo -e "File $fileNameWEXT, already downloaded"
      userPrompt  

    else

        case $extonly in

          git)
              #idea: remove this and pass this to a git function instead
              git clone $packageURL
              ;;
  
          targz|tgz|tarbz2|deb|rpm|zip|AppImage)
  
              echo -e "Downloading $programTitle"
              wget -P $downloadDir $packageURL
  
              echo -e "$fileNameWEXT downloaded "
  
              ;;
        esac
    fi
}

function cleanupDownloadedFile() {
    echo -e "Cleaning up Downloaded File"
    rm $downloadedFile
}


function handleDownloaded() {
    #clear

    extractedDownloadDir="$downloadDir/$programName"
    #handleDownloadedOutputTest
    echo -e "\nExtracting/Installing $fileNameWEXT"


      case $extonly in 

        tar|tarbz2|targz|tarxz|tgz) 

          echo -e "Checking for $extractedDownloadDir directory"
          if [ ! -d "$extractedDownloadDir" ]; then 
            echo "Making Directory $extractedDownloadDir" && mkdir $extractedDownloadDir
          else 
            echo "Directory $extractedDownloadDir already exists"
          fi 
      esac 



      case $extonly in

        deb)
          checkGdebi
          sudo gdebi $downloadedFile
          ;;

        rpm) $install $downloadedFile ;;

        tarbz2) tar -jxvf $downloadedFile  -C "$extractedDownloadDir" ;;
        targz|tgz)  tar -zxvf $downloadedFile -C "$extractedDownloadDir" ;;
        tar) tar -xvf $downloadedFile -C "$extractedDownloadDir" ;;
        tarxz) tar -xf $downloadedFile -C "$extractedDownloadDir" ;;

        zip) unzip $downloadedFile -d $programName ;;

        AppImage)

          # Lets user decide if they want to set it as executable
          appImageExecutable $downloadedFile ;;

        *)
            echo -e "Problem extracting/installing $downloadedFile "
            userPrompt ;;

      esac
    
    
    userPrompt
    
  
    #cleanupDownloadedFile
}


##################################################################

## Meta Function
function metaExternalDownload()
{

    # Get info from the URL
    stripFileInfo $packageURL

    #stripFileInfoTestOutput

    ## Download file to ~/Downloads
    downloadFile $programName $packageURL

   ## Handle downloaded file
      ## Extract if an archive
      ## install if DEB or RPM

    handleDownloaded $extonly $fileNameWEXT

}

# from deb-apt ( https://github.com/wimpysworld/deb-get )
# credit for this goes to them 
# this should help me gett some URLs like on sourceforge, I beleive 
function unroll_url() {
    curl -w "%{url_effective}\n" -I -L -s -S "${1}" -o /dev/null
}