###################################################################################
## Gdebi related

function gdebiInstall() {
    # checks for gdebi and installs it if needed
    clear
    fancy_message action "Checking for Gdebi for the install"

    # checks and installs if it not already installed
    installApp "gdebi"
    userPrompt

    # # does this need to be here?
    # packageName=$(basename "${programURL}")
	  wget -P ${downloadDir} ${programURL}
    userPrompt

    fancy_message action "Installing ${programTitle}"
    sudo gdebi ${downloadedProgramFile}

    userPrompt

    # idea to clear the var
    packageName=/dev/null

}
## End Gdebi related
###################################################################################

# WHAT IS THE POINT of this being a seperate function?
function moveAppImageToProgramsFolder() {
	fancy_message action "Moving $programTitle AppImage to ~/Programs/ folder"

	mv $fileNameWEXT $programDir/$programName

	fancy_message action "Copying Icon file over for menu"
	cp $xmetalScriptsRoot/menu/$iconFile $programDir/$programName

}


###############################################################
# Test Output Functions

# This entire function is for testing only
function stripFileInfoTestOutput() {
	clear
	# Display Test for the full URL
	echo -e "\n\nFull URL is:\t $programURL"
	# Display Test for Total file Extension
	echo -e "fileNameWEXT is:\t $fileNameWEXT"
	echo
	###############################################

	## Display Test for final output
	echo -e "fileNameFullNoDots: $fileNameFullNoDots"

	echo -e "extonly:\t $extonly"
	###########################################

	userPrompt
}

function fileExtOutput() {
	#####################################
	clear
	echo -e "completeExt3: $completeExt3"
	echo -e "completeExt6: $completeExt6"

	# only for appImage
	echo -e "completeExt8 : $completeExt8"

	userPrompt
	######################################

}

# End of Test Output functions
###############################################################################


# The reason this function is so complicated is so it handles DEBs, RPMs AND various "Tarballs" all with not only different extentions but different lengths of said-extension
function stripFileInfo() {
	fileNameWEXT=$(basename ${programURL} )

	#fileNameWEXT with .'s stripped out
	fileNameFullNoDots=$(echo $fileNameWEXT | tr -d \.)

	## These numbers are not right for my stripped test .. the number counts the .'s
	completeExt3=${fileNameFullNoDots:(-3)}
	completeExt5=${fileNameFullNoDots:(-5)}
	completeExt6=${fileNameFullNoDots:(-6)}
	completeExt8=${fileNameFullNoDots:(-8)}

	#fileExtOutput

	if  [ "$completeExt5" = "targz" ] || \
		[ "$completeExt5" = "tarxz" ]; then

		extonly=$completeExt5

	elif [ "$completeExt6" = "tarbz2" ]; then
		extonly=$completeExt6

	elif [ "$completeExt8" = "AppImage" ]; then
		extonly=$completeExt8

	elif  [ "$completeExt3" = "deb" ] || \
			[ "$completeExt3" = "rpm" ] || \
			[ "$completeExt3" = "zip" ] || \
			[ "$completeExt3" = "tgz" ]; then

		extonly=$completeExt3

	else
		fancy_message error "Detecting file extension of file to download"
	fi
}

function downloadFile() {
    # note to self: RPM's wouldn't make it here
    downloadedProgramFile="$downloadDir/$fileNameWEXT"

    echo -e "$downloadedProgramFile"

    # IF the file ALREADY exists, nothing should be done ...
    # meaning dont download the file again
    if [ -f "${downloadedProgramFile}" ]; then
		fancy_message info "File ${downloadedProgramFile}, already downloaded"
		userPrompt
    else
        case $extonly in
        	git)
            	#idea: remove this and pass this to a git function instead
				git clone ${programURL}
				;;

          rpm|targz|tgz|tarbz2|zip|AppImage)
              userPrompt
              fancy_message action "Downloading ${programTitle}"
              wget -P ${downloadDir} ${programURL}

              fancy_message info "${fileNameWEXT} downloaded "

              ;;

        esac
    fi
}

function cleanupDownloadedFile() {
    fancy_message action "Cleaning up Downloaded File"
    rm ${$downloadedFile}
}

function handleDownloaded() {
  extractedDownloadDir="$downloadDir/$programName"

  fancy_message action "\nExtracting/Installing $fileNameWEXT"

  # check for extracted download dir

  case $extonly in
    tar|tarbz2|targz|tarxz|tgz)

      fancy_message action "Checking for $extractedDownloadDir directory"
      if [ ! -d "$extractedDownloadDir" ]; then
        fancy_message info "Making Directory $extractedDownloadDir" && mkdir $extractedDownloadDir
      else
        fancy_message info "Directory $extractedDownloadDir already exists"
      fi
  esac

  case $extonly in
    deb)
      # i need to pass a URL to gdebiInstall
      gdebiInstall "${programURL}"
      ;;
    rpm) $install "${downloadedProgramFile}"
      ;;
    tarbz2) tar -jxvf ${$downloadedFile}  -C "$extractedDownloadDir" ;;
    targz|tgz)  tar -zxvf ${$downloadedFile} -C "$extractedDownloadDir" ;;
    tar) tar -xvf ${$downloadedFile} -C "$extractedDownloadDir" ;;
    tarxz) tar -xf ${$downloadedFile} -C "$extractedDownloadDir" ;;
    zip) unzip ${$downloadedFile} -d "$programName" ;;

    AppImage)

      # Lets user decide if they want to set it as executable
      appImageExecutable ${$downloadedFile} ;;

    *)
        fancy_message info "Problem extracting/installing ${$downloadedFile} "
        userPrompt ;;

  esac

  userPrompt

  #cleanupDownloadedFile

}


##################################################################
# Meta Function
# takes $programTitle $programURL (in that order) as arguments

## if this works i can remove RPM  in the downloadFile and handleDownload
# functions mentioned in the "else" here
function metaExternalDownload() {
	programBasename=$(basename "${programURL}")

  # Get info from the URL
  stripFileInfo ${programURL}

  #stripFileInfoTestOutput

  ## Download file to ~/Downloads
  downloadFile ${programName} ${programURL}

  ## Handle downloaded file
    ## Extract if an archive
  handleDownloaded $extonly $fileNameWEXT

}

# from deb-apt ( https://github.com/wimpysworld/deb-get )
# credit for this goes to them
# this should help me gett some URLs like on sourceforge, I beleive
function unpackURL() {

  # -w: Make curl display information on stdout after a completed transfer.
  # -I: Fetch the headers only
  # -L: (HTTP) If the server reports that the requested page has moved to a different location
    # (indicated with a Location: header and a 3XX response code), this option will make curl redo the
    # request on the new place.
  # -s: Silent or quiet mode. Don't show progress meter or error messages.  Makes Curl mute
  # -S: When used with -s, --silent, it makes curl show an error message if it fails.

  #clear
  #echo -e "debugging\n\nUnpacking URL "
  curl -w "%{url_effective}\n" -I -L -s "${1}" -o /dev/null
}