
## This entire function is for testing only 
function stripFileInfoTestOutput
{
 
  clear
  # Display Test for the full URL
  echo -e "\n\nFull URL is:\t $packageURL"
  ###########################################


  # Display Test for Total file Extension
  echo -e "\nTotal Filename is:\t $filenameWEXT"
  ###############################################


  ## Display Test for final output
  echo -e "Final Extension for test loop:\t $extonly"

  echo -e "Filename by itself: \t $file"
  ###########################################
}
###########################################################
###########################################################


## Gets info from URL to be used later 
function stripFileInfo()
{
  
  # $1 is a URL 

  # Filename with extension 
  ## Idea: "match longest match to anything up to the / (which / ?.... )" 
  fileNameWEXT=${packageURL##*/}

  # Filename by itself, NO extention 
  ## "the longest match until there is a period".... so this will match untiL THE FINAL period it finds 
  fileName=${fileNameWEXT%%.*}

  completeExt4=${fileNameWEXT:(-4)}
  completeExt7=${fileNameWEXT:(-7)}

  # I forgot if the period should be there or not 
  if [ "$completeExt7" = ".tar.gz" ] || [ "$$completeExt7" = ".tar.bz2" ] || [ "$completeExt7" = ".tar.xz" ]; then 
    
      extonly=$completeExt7

  # Todo: fill this out later
  elif [ "$completeExt4" = ".deb" ] || [ "$completeExt4" = ".rpm" ] || [ "$completeExt4" = ".zip" ] || [ "$completeExt4" = ".tgz" ]; then
      extonly=$completeExt4
  
  else
    echo "error detecting file extension of file to download"


  fi

  ## Leave this here for now for future testing ... remove/comment out, later 
  #echo -e "extonly: " $extonly

  ######################################
  # Call to test output function 
  # This will be removed later 
  # stripFileInfoTestOutput
  ########################################
  
}

###############################################################################

## This is should be what is called from program functions 
function downloadFile()
{
    # $1 is the Program Name
    # $2 is the source link/URL 
   

    # This has to have the stripFileInfo function run first
    ## NOW the $packageName should be known 
    clear
    echo -e "Downloading $1 package"
    echo 

    echo -e "extonly var: $extonly"

    case $extonly in 

    .git) 
        #idea: remove this and pass this to a git function instead 
        git clone $2
        ;; 

     .tar.gz|.tgz|.tar.bz2|.deb|.rpm|.zip)

          wget $2 -P ~/Downloads
      
        # echo $filenameWEXT " downloaded "

        ;; 
    esac 
    

}

###############################################################################################

function handleDownloaded()
{
    # $1 = extonly 
    # $2 = filenameEXT
    
    echo -e "Extracting/Installing $fileNameWEXT"
    

    # change the pwd (present working directory)
    cd ~/Downloads

    mkdir $filename


    # ** idea/note to self: stop using $2 use the actual var names for better code clarity 

    if [ "$extonly" = '.deb' ]; then
        sudo dpkg -i $fileNameWEXT 
        
    elif [ "$extonly" = '.rpm' ]; then
        $install $fileNameWEXT

    # I SHOULD have it make a temp location before extracting so the extracted downloads are organized in one place and not say ... in the root dir of these scripts 
    elif [ "$extonly" = '.tar.gz' ] || [ "$extonly" = '.tgz' ]; then
        tar -C $filename -zxvf $fileNameWEXT

    elif [ "$extonly" = '.tar' ]; then
        tar -C $filename -xvf $fileNameWEXT

    elif [ "$extonly" = '.tar.xz' ]; then

        ## This echo is a "note to self" i think
        tar -C $fileName -xf $fileNameWEXT

    ## Double Check the ext on this one
    elif [ "$extonly" = '.tar.bz2' ]; then
        tar -C $fileName -xJf $fileNameWEXT

    elif [ "$extonly" = '.zip' ]; then

        # unzips to the user's Downloads folder
        # idea: unzip $1 to LOCATION $1
        unzip $fileNameWEXT -d $fileName

    else
      echo -e "Problem extracting/installing" $1
      userPrompt

    fi
  
}

##################################################################
#################################################################

## Meta Function 
function externalDownload()
{
    # $1 = Program Name (progName)
    # $2 = URL (programURL)

    # Get info from the URL 
    stripFileInfo $programName $packageURL

    ## Download file to ~/Downloads
    downloadFile $programName $packageURL


    ## Handle downloaded file
      ## Extract if an archive 
      ## install if DEB or RPM 
    
    handleDownloaded $extonly $fileNameWEXT

}


#################################################################
# Start of Universal third party repo section


## RPM Fusion for Fedora 
## Packman for OpenSuse 

function packmanSuseRepo
{
	echo -e "Installing Packman Repo "

	repoName="Pacman Repository"

	echo "Adding Packman Repo for added Software"


  case $openSUSEVersion in 

  ## note to self: for consistency i should change packmanURL to repoURL .. that way the universal function can be slimmed down 
  leap423) 
    packmanURL=http://ftp.gwdg.de/pub/linux/packman/suse/openSUSE_Leap_42.3/ ;; 

  leap15) 
    packmanURL=http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.0/ ;; 

  Tumbleweed) 
    packmanURL=http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Tumbleweed/


  esac 


	## OUTSIDE OF case Statement(s?)
	universalAddRepo $repoName $packmanURL

}

## End Pacman Repo Function 
##############################################################


## Function that handles adding RPMFusion or Pacman Repos based on if a user is on Fedora or OpenSuse 
function universalThirdPartyAdditionalRepos
{
  ## If Fedora 

  case $distroBase in 

  fedora) 
    repoName="RPMFusion (Both) Repos"

    echo "Adding BOTH RPMFusion Free and Non-Free Repos"
    userPrompt

    rpmFusionURL="https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"


    echo -e "Setting up RPM Fusion repos"
    universalAddRepo $repoName $rpmFusionURL

    ;;

  ## If OpenSuse ... ? how to handle Gecko Linux 
  opensuse) packmanSuseRepo ;; 

  

  esac 



  ## May be redundent ... 
  ## Refresh repos 

  $refresh
}