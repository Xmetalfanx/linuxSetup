# function to download DEB file ... this function can be reusable i think
function downloadFile() {
	# only downloads the DEB if not already downloaded
		# i can see an issue with broken downloads (say "foobar.deb" is downloaded but is 0 bytes... not sure how i can check that vs the known file sie )
    if [ ! -f ${downloadedFile} ]; then
		fancy_message action "Downloading ${programTitle} DEB file"
		wget -P ${downloadDir} ${programURL}

		#debugging prompt
		#userPrompt
	else
		echo "${programTitle} DEB already downloaded"
	fi
}

# June 2024: did i ever test this?
# installs DEB file via apt commnd
function aptInstallDEB () {
	fancy_message action "Installing ${programName} DEB"

	# idea: to surpress the notice about _apt, the DEB and sandboxing, but it sends it to a file
	$install ${downloadedFile} 2>> apt.txt

	checkLastCommandStatus "${programName} installed successfully" "Error occured when installing ${programName}"
}

# function to check if deb-get is installed and if so installs select packages that way (sometimes easier since some things are not in default repos )
function deb_get_install() {
	# where is this var set ?
		# this is checked when Ubuntu is detected (?? Debian supported)
	if [ ${debgetInstalled} == "yes" ]; then
		fancy_message action "installing ${programName}, with deb-get"
		deb-get install ${programName}
	else
 		fancy_message info "deb-get not detected as installed, installing via other methods"
		gdebiInstall $1
	fi

	userPrompt
}


########################################################################
## Gdebi related

function gdebi_check() {
  	# checks for gdebi and installs it if needed
    clear
    fancy_message action "Checking for Gdebi for the install"
    installApp "gdebi"
	sleep 1
}


# this should get a URL passed to it
# Nov 2024: after the gdebi check .. what is the point? .. shouldn't my "universal" thirdparty function handle all that at once?
function gdebiInstall() {
	# 1 - Checks for gdebi
	gdebi_check

	metaExternalDownload
}

## End Gdebi related
###################################################################################


###############################################################
# Test Output Functions
function stripFileInfoTestOutput() {
	clear
	# Display Test for the full URL
	echo -e "\n\nFull URL is:\t $programURL"
	# Display Test for Total file Extension
	echo -e "fileNameWEXT is:\t $fileNameWEXT"
	echo
	###############################################

	userPrompt
}


function fileExtOutput() {
	#####################################
	clear
	echo -e "completeExt3: $completeExt3"
	echo -e "completeExt6: $completeExt6"

	# only for appImage
	echo -e "completeExt8 : $completeExt8"

	userPrompt
	######################################

}

# End of Test Output functions
###############################################################################


# The reason this function is so complicated is so it handles DEBs, RPMs AND various "Tarballs" all with not only different extentions but different lengths of said-extension
function stripFileInfo() {

	programBasename=$(basename "${programURL}")

	# this say could be an AppImage or a tar.gz file (just examples)
	fileNameWEXT=$(basename ${programURL} )

	# July 2023: THIS SEEMS like exactly what Apt would need.
		# note to self: issue apt cant take URLs
		# note: remove one of the two vars below
	downloadedFile="${downloadDir}/${fileNameWEXT}"

	# issue: say tiny media manager and "tmm.3.4.4.5.tar.gz" ... matching the first period will not get the file ext
	fileEXT=${fileNameWEXT##*.}

	# i dont like this ... i want to check if "tar" IS there
	# May 2024: eh? ... is this detecting the fileEXT in the first part and if true, reassigning?
	[ "${fileEXT}" = "gz" ] && fileEXT="tar.gz"
	[ "${fileEXT}" = "xz" ] && fileEXT="tar.xz"
	[ "${fileEXT}" = "bz2" ] && fileEXT="tar.bz2"

	# for debugging
	#fileExtOutput
}

function downloadFile() {
	echo "Downloading File"

    # IF the file ALREADY exists, nothing should be done ...
    # meaning dont download the file again
    if [ -f "${downloadedFile}" ]; then
		fancy_message info "File ${downloadedFile}, already downloaded"
		userPrompt
    else
        case $fileEXT in
        	git)
            	# note to self: this here is for .git downloads only ...
				# do not confuse this with extensions below downloaded FROM github
				git clone ${programURL}
				;;

        	rpm|tar.gz|tgz|tar.bz2|zip|AppImage|deb)
            	fancy_message action "Downloading ${programTitle}"
            	wget -P ${downloadDir} ${programURL}
            	fancy_message info "${fileNameWEXT} downloaded" && sleep 1

	            ;;

        esac
    fi
}
################################################################
# Cleanup functions

function cleanupDownloadedFile() {
    fancy_message action "Cleaning up Downloaded File"

	# why the double $'s ? ... mistake or needed and i forgot why? 
    rm ${$downloadedFile}
}

function unsetVars() {
	unset programName programTitle programHomepage programURL packageName
}

# End of Cleanup functions
##################################################################

# Checks for the final location in /home/$USER/Programs
function handleDownloaded_CheckExtractedFolder() {

	# check for extracted download dir
	case ${fileEXT} in
		tar|tar.bz2|tar.gz|tar.xz|tgz)
			fancy_message action "Checking for ${finalProgramLocation} directory"

			[ ! -d "${finalProgramLocation}" ] && fancy_message info "Making Directory ${finalProgramLocation}" && mkdir -p ${finalProgramLocation} || fancy_message info "Directory ${finalProgramLocation} already exists" || userPrompt

	esac
}

# handles downloaded files after downloaded
function handleDownloaded() {

	echo "Handling Download"

	# idea for apps i need to extract to ~/Programs/$programName
	finalProgramLocation="${programDir}/${programName}"

	fancy_message action "\nExtracting/Installing $fileNameWEXT"

	# checks for extracted folder and creates it if it doesn't exist, for some file types
	handleDownloaded_CheckExtractedFolder

	# non-tar related files
	case ${fileEXT} in
		deb) aptInstallDEB
			# # i need to pass a URL to gdebiInstall
			# gdebiInstall "${programURL}"
			;;

		rpm) $install "${downloadedFile}" ;;
		zip)
			# shouldn't this be "$finalDownloadLocation" for the destination?
			unzip ${downloadedFile} -d "$programName" ;;
		AppImage)

			appimage_final_location="/home/$USER/Applications/"

			# Lets user decide if they want to set it as executable
			appImageExecutable ${downloadedFile}

			echo -e "Moving ${programTitle} AppImage to ${appimage_final_location}"
			cp ${downloadedFile} ${appimage_final_location}

			;;

	esac

	# "if fileEXT contains 'tar' should be here

	if [[ "${fileEXT}" == *"tar"* ]]; then
		clear
		echo -e "debugging: a tar related file detected"

		# check to see if finalProgramLocation exists (IT SHOULD at this point)
		[ -d "${finalProgramLocation}" ] && echo -e "${finalProgramLocation} location does exist"  || echo -e "${finalProgramLocation} does not exit"

		# tar related
		case ${fileEXT} in
			tar.bz2) tar -jxvf ${downloadedFile} -C "${finalProgramLocation}" ;;
			tar.gz|tgz) tar -zxvf ${downloadedFile} -C "${finalProgramLocation}" ;;
			tar) tar -xvf ${downloadedFile} -C "${finalProgramLocation}" ;;
			tar.xz) tar -xf ${downloadedFile} -C "${finalProgramLocation}" ;;
			*)
				fancy_message info "Problem extracting/installing ${programTitle} "
				userPrompt ;;

		esac

	fi

	#cleanupDownloadedFile

}


##################################################################
# Meta Function
# takes ${programTitle} ${programURL} (in that order) as arguments


# i think i SHOULDN'T pass debs directly to gdebiInstall but to here instead ... at the top of this function it
# should sort out DEB and RPM files
function metaExternalDownload() {

	# july 2023: note for new aptInstallDEB way - i also need the ABSOLUTE PATH

	# Get info from the URL
	stripFileInfo ${programURL}

	# output fuction to show what stripFileInfo found
		# used for debugging and should be commented out by default
	#stripFileInfoTestOutput

	## Download file to ~/Downloads
		# in theory, DEB files wouldn't get here
	downloadFile ${programName} ${programURL}

	## Handle downloaded file
		## Extract if an archive
			### march 2023: is extonly still needed? didn't i switch to "fileFormat" ?
	handleDownloaded ${extonly} ${fileNameWEXT}

	# March 2023 idea
	#unsetVars

	# cleanup code (removing archive file or say RPM or DEB) should be here

}

# from deb-apt ( https://github.com/wimpysworld/deb-get )
# credit for this goes to them
# this should help me get some URLs like on Sourceforge, I beleive
# this should take a URL as an arguement
function unpackURL() {

  # -w: Make curl display information on stdout after a completed transfer.
  # -I: Fetch the headers only
  # -L: (HTTP) If the server reports that the requested page has moved to a different location
    # (indicated with a Location: header and a 3XX response code), this option will make curl redo the
    # request on the new place.
  # -s: Silent or quiet mode. Don't show progress meter or error messages.  Makes Curl mute
  # -S: When used with -s, --silent, it makes curl show an error message if it fails.

  #clear
  #echo -e "debugging\n\nUnpacking URL "
  curl -w "%{url_effective}\n" -I -L -s "${1}" -o /dev/null
}
