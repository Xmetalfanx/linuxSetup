function stripFileInfoTestOutput
{
  #############################################
  ### Will be removed later 
  clear
  # Display Test for the full URL
  echo -e "\n\nFull URL is:\t $packageURL"
  ###########################################


  #############################################
  ### Will be removed later 
  # Display Test for Total file Extension
  echo -e "\nTotal Filename is:\t $filenameWEXT"
  ###############################################


  ## Display Test for final output
  echo -e "Final Extension for test loop:\t $extfinal"
  #############################################
  ### Will be removed later 
  echo -e "Filename by itself: \t $file"
  ###########################################

}


function stripFileInfo
{
  
  # $1 is a URL 
  # DO I REALLY need to assign this to another variable? 
  packageURL=$1

  # Filename with extension 
  filenameWEXT=${packageURL##*/}

  



  ####################################
  # Old way of doing it 

  # Filename by itself, NO extention 
  filename=${filenameWEXT%%.*}

  extonly=${filenameWEXT#*.}
  ######################################


  # Call to test output function 
  # This will be removed later 
  stripFileInfoTestOutput
  
}

###############################################################################

## This is should be what is called from program functions 
function downloadFile
{
    # $1 = Program Name (var)
    # $2 = URL (var)

    # Get info from the URL 
    stripFileInfo $2 

    # This has to have the stripFileInfo function run first
    ## NOW the $packageName should be known 

    echo -e "Downloading $1 package"
    if [ "$extfinal" == 'git' ]; then
        git clone $1

    else
        ## remember $2 is the url 
        wget -O $packageName $2
        echo "$1 downloaded"
        
    fi

    # Needed? ... I will leave it for now
    userPrompt
}

###############################################################################################

function extractDownload
{
  echo -e "About to Extract $programName's archive "

    ## What gets passed SHOULD BE the entire file name WITH ext info (?? what did i name that var?) , but due to other functions running before this .. extfinal should be KNOWN 

    # I SHOULD have it make a temp location before extracting so the extracted downloads are organized in one place and not say ... in the root dir of these scripts 

    if [ "$extfinal" == 'targz' ] || [ "$extfinal" == 'tgz' ]; then
         tar -zxvf $1

    elif [ "$extfinal" == 'tar' ]; then
         tar -xvf $1

    elif [ "$extfinal" == 'tarxz' ]; then
        echo "Get code for this tarxz archive type"

    ## Double Check the ext on this one
    elif [ "$extfinal" == 'tarbz' ]; then
       tar -xJf $1

    elif [ "$extfinal" == 'zip' ]; then
        # unzips to the user's Downloads folder s
        unzip $1  -d ~/Downloads

    fi
  

  echo -e "$programName archive extracted"
  
  userPrompt
  
  clear

}


## I have no idea if this is a duplicate function ... I may have this elsewhere 
function installThirdParty
{
    $1 = ProgramName
    $2 = packageName?... I need the full file name WITH the ext, I beleive 

    
    echo "Installing $1"

    if [ "$extfinal" == 'deb' ]; then
        sudo dpkg -i $2 
        echo -e "$1 has been successfully installed"
    elif [ "$extfinal" == 'rpm' ]; then
        sudo rpm -i $2
        echo -e "$1 has been successfully installed"
    else 
        echo -e "$1 not installed"
    fi 

}


#########################################################################
function thirdPartySoftwareInstall
{
  
    ## Installs downloaded DEB or RPM

    if [ "$packageType" == 'deb' ]; then
      ## Gdebi or dpkg ? ... gdebi is not always installed

      sudo dpkg -i $packageURL
    elif [ "$packageType" == 'rpm' ]; then
      sudo rpm -i $packageURL

    # if (various tar formats here, call new (not coded yet) tarExtract function )
    fi
}


## This is third party stuff NOT in a PPA/Copr repo ..etc etc 
## I will remove "template" from the name later 
function thirdPartySoftwareTemplate
{
    # $1 = program name
    # $2 = URL 


    # Pass to function to get info 

    #############################################################

    # here info IS KNOWN 


    ## Download package
    echo -e "Downloading $programName"
    wget $packageURL

    echo -e "$packageName has been downloaded"
    userPrompt
    
    # Third party function install call
    ## This function handles extractions of archives and/or installs based on file extention 
   

}


#############################################################################
## new idea 


## Takes three arguements ... 
### - $1 is the program Name, 
### - $2 (based on $3, but edited down elsewhere being the package name.  say "Filebot.deb"), and 
### - $3 is the full path to said-file mentioned with $2


#### Think of this as a sort of "template function "

function thirdpartyPackageInstall
{
  

}