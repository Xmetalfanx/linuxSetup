
## This entire function is for testing only 
function stripFileInfoTestOutput
{
 
  clear
  # Display Test for the full URL
  echo -e "\n\nFull URL is:\t $packageURL"
  ###########################################


  # Display Test for Total file Extension
  echo -e "\nTotal Filename is:\t $filenameWEXT"
  ###############################################


  ## Display Test for final output
  echo -e "Final Extension for test loop:\t $extonly"

  echo -e "Filename by itself: \t $file"
  ###########################################
}
###########################################################
###########################################################


## Gets info from URL to be used later 
function stripFileInfo
{
  
  # $1 is a URL 
  # DO I REALLY need to assign this to another variable? 
  packageURL=$1

  # Filename with extension 
  ## Idea: "match longest match to anything up to the / (which / ?.... )" 
  #filenameWEXT=${packageURL##*/}
  filenameWEXT=${packageURL##*/}


  ####################################
  # Old way of doing it 

  # Filename by itself, NO extention 
  filename=${filenameWEXT%%.*}

  extonly=${filenameWEXT##*.}
  ######################################


  # Call to test output function 
  # This will be removed later 
  # stripFileInfoTestOutput

  ## this needed? 
  #return $extonly
  
}

###############################################################################

## This is should be what is called from program functions 
function downloadFile()
{
    # $1 is the Program Name
    # $2 is the source link/URL 
   

    # This has to have the stripFileInfo function run first
    ## NOW the $packageName should be known 

    echo -e "Downloading $1 package"
    echo 
    if [ "$extonly" == 'git' ]; then
        
      #idea: remove this and pass this to a git function instead 
      git clone $2

    ## remember to say strip tar.gz down to targz/tgz and tar.bz2 to tarbz2 
    elif [ "$extonly" = 'targz' ] ||  [ "$extonly" = 'tgz' ] ||  [ "$extonly" = 'tarbz2' ] || [ "$extonly" = 'deb' ] || [ "$extonly" = 'rpm' ] || [ "$extonly" = "zip" ]; then

      wget $2 -P ~/Downloads
      
      #echo $filenameWEXT " downloaded "
      
    fi

    
}

###############################################################################################

function handleDownloaded()
{
    # $1 = extonly 
    # $2 = filenameEXT
    
    # change the pwd 
    cd ~/Downloads

    if [ "$extonly" = 'deb' ]; then
        sudo dpkg -i $2 
        
    elif [ "$extonly" = 'rpm' ]; then
        sudo rpm -i $2

    # I SHOULD have it make a temp location before extracting so the extracted downloads are organized in one place and not say ... in the root dir of these scripts 
    elif [ "$extonly" = 'targz' ] || [ "$extonly" = 'tgz' ]; then
        tar -zxvf $2

    elif [ "$extonly" = 'tar' ]; then
        tar -xvf $2

    elif [ "$extonly" = 'tarxz' ]; then

        ## This echo is a "note to self" i think
        echo "TODO/Note to self: Get code for this tarxz archive type"
        tar -xf $2

    ## Double Check the ext on this one
    elif [ "$extonly" = 'tarbz' ]; then
        tar -xJf $2

    elif [ "$extonly" = 'zip' ]; then
        # unzips to the user's Downloads folder
        unzip $2

    fi
  
}

##################################################################
#################################################################

## Meta Function 
function externalDownload
{
  # Get Info to be used later 
    # $1 = Program Name (var)
    # $2 = URL (var)

    # Get info from the URL 
    stripFileInfo $2

    ## Download file to ~/Downloads
    downloadFile $programName $packageURL

    ########################################################
    echo
    echo -e "extonly: $extonly"
    echo -e "filenameWEXT: $filenameWEXT"
    echo
    userPrompt
    ######################################################

    ## Handle downloaded file
      ## Extract if an archive 
      ## install if DEB or RPM 
    handleDownloaded $extonly $filenameWEXT

}


#################################################################
# Start of Universal third party repo section


function addPPAFunction()
{
	# $1 is the PPAName
	# $2 is the PPASource

	clear
	echo "Installing $1 PPA "

	sudo apt-add-repository $2

	# This is not found for some reason, when i do tests - this will be removed here anyway as I "template-afy" things
 	
 	$refresh

}


## RPM Fusion for Fedora 
## Packman for OpenSuse 

function packmanSuseRepo
{
	echo -e "Installing Packman Repo "

	repoName="Pacman Repository"

	echo "Adding Packman Repo for added Software"


		if [ "$openSUSEVersion" == 'leap423' ]; then
			## If Leap 42.3
			packmanURL=http://ftp.gwdg.de/pub/linux/packman/suse/openSUSE_Leap_42.3/

		elif [ "$openSUSEVersion" == 'leap15' ]; then
		
			packmanURL=http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.0/

		elif [ "$openSUSEVersion" == 'Tumbleweed' ]; then
			## If Tumbleweed
			packmanURL=http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Tumbleweed/

		else
			echo "Version can not be determined"
		fi
	
	## OUTSIDE OF IF Statement(s?)
	universalAddRepo $repoName $packmanURL

}

## End Pacman Repo Function 
##############################################################


## Function that handles adding RPMFusion or Pacman Repos based on if a user is on Fedora or OpenSuse 
function universalThirdPartyAdditionalRepos
{
  ## If Fedora 
  if [ "$distroBase" = "fedora" ]; then

      repoName="RPMFusion (Both) Repos"

      echo "Adding BOTH RPMFusion Free and Non-Free Repos"
      userPrompt

      rpmFusionURL="https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"


      echo -e "Setting up RPM Fusion repos"
      universalAddRepo $repoName $rpmFusionURL

  ## If OpenSuse ... ? how to handle Gecko Linux 
  elif [ "$distroBase" = "opensuse" ]; then
    packmanSuseRepo

  fi 

  ## May be redundent ... 
  ## Refresh repos 

  $refresh
}