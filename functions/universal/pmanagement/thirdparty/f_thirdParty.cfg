function gdebiInstall()
{
    # I need to know the URL (via variable) of the DEB
    ## use $1 for now (vs something more descriptive )

    packageName=$(basename $1)

    sudo gdebi $packageName

    userPrompt

    # idea to clear the var
    packageName=/dev/null

}

# Downloads and installs
function gdebiGetInstall()
{
  # I need to know the URL 

  # Change PWD
  cd ~/Downloads
  
  # Downloads file 
  wget $1

  ## Does the install 
  # The idea here is that I may not always want to call the wget step .. but this may change 
  gdebiInstall $1 


}

######################################################
function programsDestinationDetection()
{
    # Check if ~/Programs exists, and if not, create it
    if [ -d "$programDir" ]; then
        echo -e "$programDir already exists"
    else
        echo -e "$programDir does not already exist, creating directory to store third party apps"
        mkdir $programDir
        echo -e "Program directory create.  The location is in your user's Home folder as \"Programs\" "

    fi

    ################################################################################################
    # Subdirectory/SubFolder check 

    # If the subfolder does not exist, create it 
    if [ ! -d "$programDir/$progName" ]; then
            echo -e "$programDir/$progName does not exist"

            # Create the directory
            mkdir $programDir/$progName

    elif [ ! -z "$(ls -A $programDir/$progName)" ]; then
        echo -e "$programDir/$progName is not empty"

        ## can not remember my intent for what happened here 

    fi

}


function moveAppImageToProgramsFolder()
{
  echo -e "Moving $progTitle AppImage to ~/Programs/ folder"
##############################################

  mv $fileNameWEXT $programDir/$progName

  echo -e "Copying Icon file over for menu"
  cp $xmetalScriptsRoot/menu/$iconFile $programDir/$progName

}


# function to move third party app (tarballs, not really debs or rpm files) to a "Programs" folder
function moveToProgramsFolder()
{
    clear

    # Checks for the destination and if what is needed is there
      # if not .... set it up 
    programsDestinationDetection

    case $extonly in
      AppImage) moveAppImageToProgramsFolder ;;

      *)

        echo -e "Moving $progName/ to $programDir"
        cp -r $progName $programDir/

        echo -e "Copying Icon file over for menu"
        cp $xmetalScriptsRoot/menu/$iconFile $programDir/$progName

      ;;

    esac
}

##########################################################################################
#######################################################################################
## This entire function is for testing only
function stripFileInfoTestOutput
{

  clear
  # Display Test for the full URL
  echo -e "\n\nFull URL is:\t $packageURL"
  # Display Test for Total file Extension
  echo -e "fileNameWEXT is:\t $fileNameWEXT"
  echo
  ###############################################

  ## Display Test for final output
  echo -e "fileNameFullNoDots: $fileNameFullNoDots"

  echo -e "extonly:\t $extonly"
  echo
  echo -e "archiveName by itself: \t $archiveName"
  ###########################################

  userPrompt
}
###########################################################

function fileExtOutput()
{
  #####################################
  clear
  echo -e "completeExt3: $completeExt3"
  echo -e "completeExt6: $completeExt6"

  # only for appImage
  echo -e "completeExt8 : $completeExt8"

  userPrompt
  ######################################

}


# The reason this function is so complicated is so it handles DEBs, RPMs AND various "Tarballs" all with not only different extentions but different lengths of said-extension
function stripFileInfo()
{
    ########################################################################
    # Debugging code only
    #echo  -e "In stripFileInfo function "
    #echo "progName: $progName"
    #echo "packageURL: $packageURL"
    #userPrompt
    ########################################################################

  #fileNameWEXT=${packageURL##*/}
  fileNameWEXT=$(basename $packageURL)

  #fileNameWEXT with .'s stripped out
  fileNameFullNoDots=$(echo $fileNameWEXT | tr -d \.)

  ## These numbers are not right for my stripped test .. the number counts the .'s
  completeExt3=${fileNameFullNoDots:(-3)}
  completeExt5=${fileNameFullNoDots:(-5)}
  completeExt6=${fileNameFullNoDots:(-6)}
  completeExt8=${fileNameFullNoDots:(-8)}

  #fileExtOutput

  if  [ "$completeExt5" = "targz" ] || \
      [ "$completeExt5" = "tarxz" ]; then

      extonly=$completeExt5

  elif [ "$completeExt6" = "tarbz2" ]; then
      extonly=$completeExt6

  elif [ "$completeExt8" = "AppImage" ]; then
      extonly=$completeExt8

  elif  [ "$completeExt3" = "deb" ] || \
        [ "$completeExt3" = "rpm" ] || \
        [ "$completeExt3" = "zip" ] || \
        [ "$completeExt3" = "tgz" ]; then

      extonly=$completeExt3

  else
    echo -e "error detecting file extension of file to download"

  fi

    # fileName by itself, NO extention
  ## "the longest match until there is a period".... so this will match untiL THE FINAL period it finds
  archiveName=${fileNameFullNoDots%$extonly}


}

###############################################################################

## IF the file ALREADY exists, nothing should be done ... or at least that is the idea
function downloadFile()
{
    # change the pwd (present working directory)
    cd ~/Downloads


    ## Why are these commented out? ... debugging? 
    # Make Directory
    #mkdir $fileName

    # Enter Directory
    #cd $fileName

    if [ -f $fileNameWEXT ]; then

      # Do nothing, since file is already downloaded
      echo -e "File $fileNameWEXT, already downloaded"
      return

    else

        case $extonly in

        git)
            #idea: remove this and pass this to a git function instead
            git clone $packageURL
            ;;

        targz|tgz|tarbz2|deb|rpm|zip|AppImage)

            wget $packageURL

            echo $fileNameWEXT " downloaded "

            ;;
        esac

    fi

}

###############################################################################################

function handleDownloaded()
{
    clear

    #handleDownloadedOutputTest

    echo -e "Extracting/Installing $fileNameWEXT"

    case $extonly in

      deb) sudo dpkg -i $fileNameWEXT ;;

      rpm) $install $fileNameWEXT ;;

      tarbz2) tar -xvf $fileNameWEXT --one-top-level=$progName ;;

      targz|tgz)
        # I SHOULD have it make a temp location before extracting so the extracted downloads are organized in one place and not say ... in the root dir of these scripts
        tar -zxvf $fileNameWEXT --one-top-level=$progName

        # Commented out since this is not coded yet anyway
        # customMenuItemMenu

        ;;

      tar) tar -xvf $fileNameWEXT --one-top-level=$progName ;;

      tarxz)
          ## This echo is a "note to self" i think
          tar -xf $fileNameWEXT --one-top-level=$progName ;;

      zip)
        # unzips to the user's Downloads folder
        # idea: unzip $1 to LOCATION $1
        unzip $fileNameWEXT -d $fileName ;;

      AppImage)

        # Lets user decide if they want to set it as executable
        appImageExecutable $fileNameWEXT ;;

      *)
          echo -e "Problem extracting/installing $1 "
          userPrompt ;;

    esac

}


##################################################################


## Meta Function
function metaExternalDownload()
{

    # Detect if the current distro is supported or not
    supportStatusDetection

    # Get info from the URL
    stripFileInfo $packageURL

    #stripFileInfoTestOutput

    ## Download file to ~/Downloads
    downloadFile $progName $packageURL

    ## Handle downloaded file
      ## Extract if an archive
      ## install if DEB or RPM

    handleDownloaded $extonly $fileNameWEXT

}

