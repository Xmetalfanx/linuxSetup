function displayIconAndMenuFiles() {

	# just for debugging
	echo -e "\vlocalIconFile:\t${localIconFile}"
	echo -e "movedIconFile:\t${movedIconFile}"
	userPrompt

}

function assignIconAndMenuFiles() {

	finalDownloadLocation="${programDir}/${programName}"

	localIconFile="${xmetalScriptsRoot}/menuIcons/${iconFile}"

	movedIconFile="${finalDownloadLocation}/${iconFile}"

	#displayIconAndMenuFiles

}

# this probably could be named better
function setPathVars() {

	assignIconAndMenuFiles

	# due to say png vs svg ... the icon file ("iconFile") is set in each app's function before it gets here

	######################################################################

	# sets the programFile var IF the fileFormat is an AppImage
	[ "${fileFormat}" == "AppImage" ] && programFile=$(basename "${downloadedFile}" )

	# echo -e "inside setPathVars"
	# userPrompt

	# programDir = ~/Programs
	# these find the programFile or iconFile in the location $programDir that will be needed later

	echo -e "Finding program Location for fullProgramPath var"
	fullProgramPath=$(find ${finalDownloadLocation} -type f -name "${programFile}")

	# echo -e "Debugging echo\nfullProgramPath:\t${fullProgramPath}"
	# userPrompt

	# full lines to add to menu files
	execPath="Exec=${fullProgramPath}"
	iconPath="Icon=${movedIconFile}"

}

# only for debugging
function debuggingVars() {
    echo -e "\vexecPath:\t ${execPath}"
    echo -e "iconPath:\t ${iconPath}"

}

# End of Var related functions
#######################################################################################

# just for the ~/Programs folder
function programRootFolderDetection() {

	clear
	fancy_message action "Checking for ${programDir}"

	# Creates a folder ~/Program/ if it doesn't exist
	[ ! -d "${programDir}" ] && fancy_message action "${programDir} does not already exist, creating directory to store third party apps" && mkdir ${programDir} && checkLastCommandStatus "Program directory created.  The location is in your user's Home folder as \"Programs\" "  "error creating ${programDir}"

}


# Check if ~/Programs exists, and if not, create it
function programsDestinationDetection() {

	programRootFolderDetection

	# Subdirectory/SubFolder check

	[ ! -d "${finalDownloadLocation}" ] && fancy_message action "Creating ${finalDownloadLocation} directory" && mkdir "${finalDownloadLocation}" && fancy_message info "${finalDownloadLocation} directory created"
}

# copy icon files to ~/Programs/${programTitle}
function copyIconFiles() {

	fancy_message action "Copying Icon file to Program location"

	cp "${localIconFile}" "${movedIconFile}" && checkLastCommandStatus "Icon file copied sucessfully" "error copying Icon file" && userPrompt
	userPrompt

	sleep 1

}

################################################33

function moveAppImageToProgramsFolder() {

	fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
	# TODO: i need to assign the appiamge to this programFile app ...
	cp ${programFile} ${finalDownloadLocation}

	checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage"

	userPrompt

}


# Moves needed files to ~/Programs
function moveToProgramsFolder() {

	# Checks for the destination and if what is needed is there
    	# if it's not .... set it up

    programsDestinationDetection

	case ${fileFormat} in
    	AppImage)
			# i feel like this could be in a better spot
			programFile=${downloadedProgramFile}

        	fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
			# todo: asign the right file if needed to programFile
			cp ${programFile} ${finalDownloadLocation}

			checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage"

			;;

      *)
        # what gets to this step?
        #fancy_message action "Moving ${extractedDownloadDir} to ${programDir}"

        # extractedDownloadDir is the dir inside of ~/Downloads/... with the name of the app as the folder name

        cp -r ${extractedDownloadDir} ${programDir}

    	;;

    esac

}


#############################################################################################

# this is for apps that can run if you just extract them... a sort of meta function i guess
# I think tar archives OR AppImages should be ok to be passed here 
function setupExtractedApps() {

	# Set variables
	setPathVars

	# function to move third party app (tarballs, not really debs or rpm files) to a Programs folder
	moveToProgramsFolder

	#############################
	# debugging
	#debuggingVars

	##############################

	copyIconFiles && metaMenuFile

}

## End of functions for third party extraction to Programs folder
#######################################################################