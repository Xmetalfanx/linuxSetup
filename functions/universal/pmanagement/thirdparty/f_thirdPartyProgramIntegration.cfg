###################################################################################
## Var related functions 


function assignIconAndMenuFiles() {
  declare ${1}MenuFile=${1}"FileDir"/${programName}.desktop
  declare ${1}IconFile=${1}"FileDir"/${iconFile}

  # not sure if current is the right way i want to say that 
  currentIconFile="${1}IconFile"
  currentMenuFile="${1}MenuFile"

  # debugging
  echo -e "\ndeugging"
  echo -e "currentIconFile:\t${!currentIconFile}"
  echo -e "currentMenuFile:\t${!currentMenuFile}"

}

# this probably could be named better
function setPathVars() {
  
  finalDownloadLocation="${programDir}/${programName}"
  
  # the files in the extracted script dir structure (what gets moved )
  assignIconAndMenuFiles "local"

  assignIconAndMenuFiles "moved"
  

  # i ... dont think this is the best var name 
  # this is not going to work .... it would say with an AppImage but if a tarball it wouldn't be 
    # say tinyMediaManager.sh ... it'd be the name of the tarball itself
  localDownloadedApp="${downloadDir}/${fileNameWEXT}"

  # debugging
  echo -e "localMenuFile:\t ${localMenuFile}"
  echo -e "localIcon:\t ${localIconFile}"
  userPrompt
  
  # due to say png vs svg ... the icon file (iconFile) is set in each app's function before it gets here

  ######################################################################
  
  # programDir = ~/Programs
  # these find the programFile or iconFile in the location $programDir that will be needed later 
  # ?? Dec 2022: what is the name of the exec file (say a .sh or .AppImage)
    # set that in the individual app functions a good idea? 
  fullProgramPath=$(find ${programDir} -type f -name "${localDownloadedApp}")
  fullIconPath=$(find ${programDir} -type f -name "${iconFile}")

  # full lines to add to menu files 
  execPath="Exec=$fullProgramPath"
  iconPath="Icon=$fullIconPath"

  # ??? could i combine the vars above... say execPath="Exec=$(find ... " ??? 

  ######################################################################

}

# only for debugging
function debuggingVars() {
    echo -e "fullProgramPath:\t ${fullProgramPath}"
    echo -e "execPath:\t ${execPath}"
    echo -e "iconPath:\t ${iconPath}"
}

# End of Var related functions 
#######################################################################################

# Check if ~/Programs exists, and if not, create it
function programsDestinationDetection() {

  [ ! -d "${programDir}" ] && fancy_message action "${programDir} does not already exist, creating directory to store third party apps" && mkdir ${programDir} && fancy_message info "Program directory create.  The location is in your user's Home folder as \"Programs\" "
        

  ################################################################################################
  # Subdirectory/SubFolder check

  [ -d "${finalDownloadLocation}" ] && return 

  # Create the directory
  fancy_message action "Creating ${finalDownloadLocation} directory"
  mkdir "${finalDownloadLocation}"

}

# copy icon files to ~/Programs/${programTitle}
function copyIconFiles() {
  fancy_message action "Copying Icon file over for menu"
  
  # change finalDownloadLocation to movedIconFile ?? does that even make sense? 
  cp "${localIconFile}" "${finalDownloadLocation}"

  # consider making "check status of last command a function"
  checkLastCommandStatus "Icon file copied successfully" "error copying Icon file"
    
}

################################################33

function moveAppImageToProgramsFolder() {
	
	
	fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
	cp ${localDownloadedApp} ${finalDownloadLocation}
	
	checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage" 

	userPrompt

}


# Moves needed files to ~/Programs
function moveToProgramsFolder() {
    clear

    # Checks for the destination and if what is needed is there
      # if it's not .... set it up
    programsDestinationDetection

    case ${extonly} in
      AppImage) 
      
        fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
	      cp ${localDownloadedApp} ${finalDownloadLocation}
	
	      checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage" 

	      userPrompt ;;

      *)
        # what gets to this step? 
        #fancy_message action "Moving ${extractedDownloadDir} to ${programDir}"
        
        # extractedDownloadDir is the dir inside of ~/Downloads/... with the name of the app as the folder name 

        cp -r ${extractedDownloadDir} ${programDir}

      ;;

    esac

}


#############################################################################################

# this is for apps that can run if you just extract them... a sort of meta function i guess
function setupExtractedApps() {

  # Set variables
  setPathVars
  
  # function to move third party app (tarballs, not really debs or rpm files) to a Programs folder
  moveToProgramsFolder

  #############################
  # debugging 
  #debuggingVars
  #userPrompt
  ###############################
  
  # copy icon file over
  copyIconFiles

  # setup Menu item 
  metaMenuFile

}

## End of functions for third party extraction to Programs folder
#######################################################################