###################################################################################
## Start of functions for third party extraction to Programs folder


function setPathVars() {
  # idea: IN the script dir that is
  # is this needed here? ... f_variables a better location?
  localMenuFile="${localMenuFileDir}/${programName}.desktop"
  localIconFile="${localMenuFileDir}/${iconFile}"
  # due to say png vs svg ... the icon file's local location is set in each app's function before it gets here

}

# only for debugging
function debuggingVars() {
    echo -e "fullProgramPath:\t ${fullProgramPath}"
    echo -e "execPath:\t ${execPath}"
    echo -e "iconPath:\t ${iconPath}"
}

# this is copy pasted and the other function still exists for now
# location: f_customMenuItems.cfg in the root of /functions
function clearDesktopFileItems() {
  clear
  fancy_message action "Removing any possible leftover data in .desktop file for ${programName}"

  # sed -i means in place editing 

  # Removes any existing Icon= line
  sed -i "/Icon=/d" ${localMenuFile}

  # Removes any existing "Exec=" line
  sed -i "/Exec=/d" ${localMenuFile}

	fancy_message action "Menu file cleared of any leftover entries"
}

# this adds custom entries to the menu (.desktop) file
function populateMenuFile() {

	fancy_message action "Clearing out extra .Desktop entries, if they are there"
	clearDesktopFileItems

  #######################################################
  # Declare Variables

  # program and Icon related
  fullProgramPath=$(find ${programDir} -type f -name "${programFile}")
  fullIconPath=$(find ${programDir} -type f -name "${iconFile}")

  # full lines to add to files 
  execPath="Exec=$fullProgramPath"
  iconPath="Icon=$fullIconPath"

  ###########################################################
  
  # TODO: add check for existing exec= and icon= content
	clear
	fancy_message action "Adding Exec= line, to menu file"
	# where am i doing this?  shouldn't this be moved somewhere first?
	echo -e "${execPath}" >> "${localMenuFile}"

	fancy_message action "Adding IconFile= line, to menu file"
	echo -e "${iconPath}" >> "${localMenuFile}"

	# recheck
	checkMenuFile
}


# seperate function to check if the exec= and icon= lines exist
  # i admit i am not sure if this is a good idea
function checkMenuFile() {

  # do i need to do \.sh  (with the slash?)
  execLineCheck=$(awk '/^Exec/ && /.sh$/ {print}' "$localMenuFile")
  iconLineCheck=$(awk '/^Icon/ && /(.png|.svg)$/ {print}' "$localMenuFile")

  # it seems this is ran twice but is that ok if i remove the echo? 
  
	# both are needed
	if [ -z ${execLineCheck} ] || [ -z ${iconLineCheck} ]; then
		fancy_message info "Exec= line and/or Icon= lines, do not exist in file"

		fancy_message action "\nAttempting to add correct lines"
		populateMenuFile

  else 
    return 
	fi

}

# Check if ~/Programs exists, and if not, create it
function programsDestinationDetection() {
    if [ -d ${programDir} ]; then
        fancy_message info "${programDir} already exists"
    else
        fancy_message action "${programDir} does not already exist, creating directory to store third party apps"
        mkdir $programDir
        fancy_message info "Program directory create.  The location is in your user's Home folder as \"Programs\" "

    fi

    ################################################################################################
    # Subdirectory/SubFolder check

    # If the subfolder does not exist, create it
    if [ ! -d "${programDir}/${programName}" ]; then
      fancy_message info "${programDir}/${programName} does not exist"

      # Create the directory
      mkdir ${programDir}/${programName}

    elif [ ! -z "$(ls -A $programDir/$programName)" ]; then
        fancy_message info "${programDir}/${programName} is not empty"

        ## can not remember my intent for what happened here
    fi

}


function moveToProgramsFolder() {
    clear

    # Checks for the destination and if what is needed is there
      # if it's not .... set it up
    programsDestinationDetection

    case ${extonly} in
      AppImage) moveAppImageToProgramsFolder ;;

      *)

        fancy_message action "Moving ${extractedDownloadDir} to ${programDir}"
        cp -r "${extractedDownloadDir}" "${programDir}"

        # debugging pause
        userPrompt

        fancy_message action "Copying Icon file over for menu"
        cp "${localIconFile}" "${programDir}/${programName}"

      ;;

    esac
}


#############################################################################################

function metaInstallMenuFile() {

	checkMenuFile

	fancy_message action "Installing ${programName} Menu file"
	sudo desktop-file-install "${localMenuFile}"

	fancy_message action "Updating Desktop Database"

	sudo update-desktop-database

	userPrompt

}

# this is for apps that can run if you just extract them... a sort of meta function i guess
  # think of better function name later
function extractedApp() {

  # 1 - Set variables
  setPathVars

  # 2 - function to move third party app (tarballs, not really debs or rpm files) to a "Programs" folder
  moveToProgramsFolder

  debuggingVars

  # 3 - Populate Menu file with info from the new path from step 2
  populateMenuFile

  # 4 - Installs the Menu file
  metaInstallMenuFile

}

## End of functions for third party extraction to Programs folder
##############################################################################################
