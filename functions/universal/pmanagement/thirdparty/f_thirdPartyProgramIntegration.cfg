function assignIconAndMenuFiles() {

	localIconFile="${localMenuFileDir}/${iconFile}"
	localMenuFile="${localMenuFileDir}/${programName}.desktop"

	movedIconFile="${programDir}/${programName}/${iconFile}"
	movedMenuFile="${programDir}/${programName}/${programName}.desktop"

	# just for debugging
	# echo -e "\vlocalIconFile:\t${localIconFile}"
	# echo -e "localMenuFile:\t${localMenuFile}"
	# echo -e "movedIconFile:\t${movedIconFile}"
	# echo -e "movedMenuFile:\t${movedMenuFile}"
	# echo -e "programFile:\t${programFile}"

}

# this probably could be named better
function setPathVars() {

	# this var needed?
	finalDownloadLocation="${programDir}/${programName}"

	assignIconAndMenuFiles

	# due to say png vs svg ... the icon file ("iconFile") is set in each app's function before it gets here

	######################################################################

	# programDir = ~/Programs
	# these find the programFile or iconFile in the location $programDir that will be needed later

	fullProgramPath=$(find ${programDir} -type f -name "${programFile}")

	# full lines to add to menu files
	execPath="Exec=$fullProgramPath"
	iconPath="Icon=${movedIconFile}"

}

# only for debugging
function debuggingVars() {
    echo -e "\vexecPath:\t ${execPath}"
    echo -e "iconPath:\t ${iconPath}"

}

# End of Var related functions
#######################################################################################

# Check if ~/Programs exists, and if not, create it
function programsDestinationDetection() {

	[ ! -d "${programDir}" ] && fancy_message action "${programDir} does not already exist, creating directory to store third party apps" && mkdir ${programDir} && fancy_message info "Program directory create.  The location is in your user's Home folder as \"Programs\" "


	################################################################################################
	# Subdirectory/SubFolder check

	[ -d "${finalDownloadLocation}" ] && return

	# Create the directory
	fancy_message action "Creating ${finalDownloadLocation} directory"
	mkdir "${finalDownloadLocation}"

}

# copy icon files to ~/Programs/${programTitle}
function copyIconAndMenuFiles() {

	fancy_message action "Copying Icon file and Menu file to Program location"

	cp "${localIconFile}" "${movedIconFile}" && cp "${localMenuFile}" "${movedMenuFile}" && checkLastCommandStatus "Icon file copied successfully" "error copying Icon file"
	userPrompt

}

################################################33

function moveAppImageToProgramsFolder() {

	fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
	# TODO: i need to assign the appiamge to this programFile app ...
	cp ${programFile} ${finalDownloadLocation}

	checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage"

	userPrompt

}


# Moves needed files to ~/Programs
function moveToProgramsFolder() {
    # Checks for the destination and if what is needed is there
    	# if it's not .... set it up
    programsDestinationDetection

    case ${extonly} in
    	AppImage)

        	fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
			# todo: asign the right file if needed to programFile
			cp ${programFile} ${finalDownloadLocation}

			checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage"

			userPrompt ;;

      *)
        # what gets to this step?
        #fancy_message action "Moving ${extractedDownloadDir} to ${programDir}"

        # extractedDownloadDir is the dir inside of ~/Downloads/... with the name of the app as the folder name

        cp -r ${extractedDownloadDir} ${programDir}

    	;;

    esac

	# echo -e "at end of extract function"
	# userPrompt

}


#############################################################################################

# this is for apps that can run if you just extract them... a sort of meta function i guess
function setupExtractedApps() {

	# Set variables
	setPathVars

	# function to move third party app (tarballs, not really debs or rpm files) to a Programs folder
	moveToProgramsFolder

	#############################
	# debugging
	# debuggingVars
	##############################


	userPrompt
	clear

	copyIconAndMenuFiles

	# setup Menu item
	metaMenuFile

}

## End of functions for third party extraction to Programs folder
#######################################################################