
#########################################################################################
## Flatpak related code start 

function installFlatpak()
{
    # Check if flatpak is already installed, if not, install it (handled already)
    commandCheck flatpak

}

function installFlatHub()
{
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    # Include message about rebooting to complete 
} 

# stupid name, i know ... this just runs the two functions above in one call
function metaFlatpak()
{
    installFlatpak

    # since most FP's are there anyway ... 
    installFlatHub
}

# Meta function - to install actual Flatpak Apps... not flatpak itself 
function installFlatpakApp()
{
    # checks if Flatpak and/or Flathub are installed/enabled/whatever, FIRST 
    metaFlatpak

    flatpak install $flatpakrepo $flatpakInfo 
}


## Flatpak code end 
####################################################################################################

###################$$$$$$$$$$$$$$$$$$$$$$$##############################
# Snap Code

function opensuseLeapSnapInstall()
{

    # maybe echo this var here to see if its EVEN detecting right 

    case $OSRELEASE_VERSIONID in 

        42.3) snapdURL="https://download.opensuse.org/repositories/system:snappy/openSUSE_Leap_42.3/system:snappy.repo" ;; 

        15.0) snapdURL="https://download.opensuse.org/repositories/system:snappy/openSUSE_Leap_15.0/system:snappy.repo" ;; 

        15.1) snapdURL="https://download.opensuse.org/repositories/system:snappy/openSUSE_Leap_15.1/system:snappy.repo" ;; 

    esac 

}

function opensuseSnapInstall()
{

    case $openSUSEBranch in 

        tumbleweed) snapdURL="https://download.opensuse.org/repositories/system:snappy/openSUSE_Tumbleweed/system:snappy.repo" ;; 

        leap) opensuseLeapSnapInstall ;; 

    esac 

    universalAddRepo "Snappy" $snapdURL 
    $refresh
    $install snapd
}


# Seperate so i can call this alone later 
function snapCheck()
{
    # Check for snapd being installed 
    if [ "$(command -v snap)" ]; then 
        
        # not sure if keeping echo/wording 
        echo -e "Snap support is installed"

    else
        # Install Snapd 
        echo -e "Snap Support not detected, Installing  .. "

        case $distroBase in 

        arch) 
            # Resource: https://docs.snapcraft.io/installing-snap-on-arch-linux
            
            # install Build packages call here 

            # change pwd 
            cd ~/Downloads

            git clone https://aur.archlinux.org/snapd.git
            cd snapd
            makepkg -si

            # Cleanup
            cd ..
            rm -rf snapd 

            sudo systemctl enable --now snapd.socket

            # Enable Classic Snap support 
            sudo ln -s /var/lib/snapd/snap /snap

            sudo pacman -S squashfuse


            echo 
            echo -e "Snap support installed"
            echo
            echo -e "You may want to reboot here"
            echo 
            userPrompt
            clear

            ;;   
        
        fedora|solus|ubuntu) $install snapd ;;

        opensuse) opensuseSnapInstall ;;

        esac

    fi 


}

function installSnapApp()
{
    # What gets passed? 
        # snapType = $1
        # snapName = $2
    
    snapCheck
    # Here Snap support SHOULD be installed and working

    # Check snap type, located in each app function's list of variables 
    case $snapType in 

        normal) snap install $snapName ;; 

        classic) snap install --classic $snapName ;;

        beta) snap install --beta $snapName ;; 

        edge) snap install --edge $snapName;; 

    esac 

}


## no need to do variables since they are in f_variables.cfg already 
function snapConnRemoveMedia()
{
    echo -e "Connecting $snapName to removable-media"
    
    # the snap name passed has to be EXACT 
    snap connect $snapName:removable-media 

}

# End of Snap code 
####################################################################


function appImageExecutable()
{
    # Obviously an AppImage name has to be passed and it has to be exactly the same as the file name 
    echo
    echo -e "Do You want to set FOOBAR as executable"
    echo -e "If you selected 'no', you will have to do it manually to be able to run FOOBAR'S Flatpak"
    echo -e "You can do this in your file mananger, right clicking and going to properties or from the terminal"
    echo -e 
    read -p "Your Choice? (Y/N)" executableSelection 

    case $executableSelection in 

        [yY]|yes|YES) sudo chmod +x FOOBAR ;; 

        [nN]|no|NO) return ;; 

    esac  

}
