# just for debugging
function displayIconAndMenuFiles() {
	clear
	echo -e "execFile:\t${execFile}"
	echo -e "localIconFile:\t${localIconFile}"
	echo -e "movedIconFile:\t${movedIconFile}"
	userPrompt
}

function assignIconAndMenuFiles() {

	## ${iconFile} declared in (before things get here) the individual Software functions

	# location in my scripts folder
	localIconFile="${xmetalScriptsRoot}/menuIcons/${iconFile}"

	# the final location
	movedIconFile="${finalProgramLocation}/${iconFile}"

	#displayIconAndMenuFiles && userPrompt

}
# This function
	# 1 - Assigns the programMenuFile var
	# 2 - removes (there shouldn't be any) .Desktop file in the destination location
	# 3 - Creates the .Desktop file
function createThirdPartyMenuFile() {

	#programMenuFile="${programDir}/${programName}/${programName}.desktop"
	programMenuFile="${finalProgramLocation}/${programName}.desktop"

	# idea: removing any existing .desktop file of the same name
	fancy_message action "Removing existing menufile if it exists"
	[ -f "${programMenuFile}" ] && rm "${programMenuFile}"

	# note to self: the exec= line comes later
	fancy_message action "Creating Dynamic Menu file for ${programTitle}"
	echo -e "[Desktop Entry]\nType=Application\nName=${programName}\nCategories=${programCatagories}\nTerminal=${Terminal}\n${execPath}\n${iconPath}" > ${programMenuFile}

	#############################
	# Debugging output
	# clear
	# cat ${programMenuFile}
	# userPrompt
	#############################

}

##################################################################


# 1 - Checks for existing entries in the menu file
	# 2 - desktop-file-install's menu file
	# 3 - update-desktop-datebase
function installMenuFile() {

	localDesktopLocation="/home/$USER/.local/share/applications/"

	[ ! -d "${localDesktopLocation}" ] && mkdir ${localDesktopLocation}

	# check menu file validity
	fancy_message action "Checking Validity of Menu file for ${programName} before adding it to the system"
	desktop-file-validate "${programMenuFile}"

	if [ $? == "0" ]; then
		fancy_message info "Menu file detected as valid"
		fancy_message action "Installing ${programName} Menu file and Updating Desktop Database" && desktop-file-install --dir="${localDesktopLocation}" "${programMenuFile}"

		fancy_message action "Updating Desktop Database" update-desktop-database ${localDesktopLocation}

	else
		fancy_message error "Menu file detected to be invalid or it has issues"
	fi

	userPrompt

}
#################################################################################### Functions to check for valid .Desktop file entries
function checkExecPathLine() {
	[[  "${execPath}" =~ "sh" || "${execPath}" =~ "AppImage" ]] && echo "execPath value is valid" && validDesktopFilePaths="true" ||  echo "execPath value is not valid" || validDesktopFilePaths="false"
}

function checkIconPathLine() {
	[[ "${iconPath}" =~ "png" || "${iconPath}" =~ "svg" ]] && echo "IconPath line valid, now checking ExecPath line" && checkExecPathLine || echo "IconPath line not valid" ||validDesktopFilePaths="false"
}

################################################################################

# call this
function metaMenuFile() {

	clear
	setMenuPathVars

	fancy_message action "Checking for complete Dynamic Menu file"

	# check for exec and icon lines in .Desktop file
		# if the first check (iconPath) is TRUE,
			# execCheck is ran, so there is no point to call that here
		# if the first check (iconPath) is FALSE
			# the menu file is incomplete and things should not continue
	checkIconPathLine

	if [ "${validDesktopFilePaths}" == "true" ]; then

		fancy_message info "Dynamic Menu file complete"
		userPrompt

		# creates the menu file
		createThirdPartyMenuFile

		# Installs the Menu file
		installMenuFile

	elif [ "${validDesktopFilePaths}" == "false" ]; then
		# debugging
		echo -e "iconPath:\t${iconPath}"
		echo -e "execPath:\t${execPath}"
		userPrompt

		echo -e "Not Adding menus since either the icon file line or exec file line is not complete"
	else
		fancy_message warn "Error detected validDesktopFilePaths var value"
	fi
}