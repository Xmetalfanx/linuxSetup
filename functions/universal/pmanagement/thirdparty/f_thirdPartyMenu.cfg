
function createThirdPartyMenuFile() {

	#programMenuFile="${programDir}/${programName}/${programName}.desktop"
	programMenuFile="${finalDownloadLocation}/${programName}.desktop"

	# idea: removing any existing .desktop file of the same name
	fancy_message action "Removing existing menufile if it exists"
	[ -f "${programMenuFile}" ] && rm "${programMenuFile}"
	userPrompt

	# note to self: the exec= line comes later
	fancy_message action "Creating Dynamic Menu file for ${programTitle}"
	echo -e "[Desktop Entry]\nType=Application\nName=${programName}\nCategories=${programCatagories}\nTerminal=${Terminal}\n${execPath}\n${iconPath}" > ${programMenuFile}
	userPrompt

	# clear
	# cat ${programMenuFile}
	# userPrompt
	
}

##################################################################


# 1 - Checks for existing entries in the menu file
# 2 - desktop-file-install's menu file
# 3 - update-desktop-datebase
function installMenuFile() {

	# check menu file validity
	fancy_message action "Checking Validity of Menu file for ${programName} before adding it to the system"
	desktop-file-validate "${programMenuFile}"

	[ $? == "0" ] && fancy_message info "Menu file detected as valid" && fancy_message action "Installing ${programName} Menu file" && sudo desktop-file-install "${programMenuFile}" && fancy_message action "Updating Desktop Database" && sudo update-desktop-database || fancy_message error "Menu file detected to be invalid or it has issues"

	userPrompt

}

# call this
function metaMenuFile() {

	# creates the menu file 
	createThirdPartyMenuFile

	# Installs the Menu file
	installMenuFile

}