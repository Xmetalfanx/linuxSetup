# location: f_customMenuItems.cfg in the root of /functions

function createThirdPartyMenu() {
	programMenuFile="${menusDir}/${programName}.desktop"

	# idea: removing any existing .Desktop file of the same name
	fancy_message action "Removing existing menufile if it exists"
	[ -f "${programMenuFile}" ] && rm "${programMenuFile}"
	userPrompt

	# note to self: the exec= line comes later
	fancy_message action "Creating Dynamic Menu file for ${programName}"
	echo -e "[Desktop Entry]Type=Application\nName=${programName}\nCatagories=${programCatagories}\nTerminal=${Terminal}\nExec=${programFile}\nIcon=${iconFile}" >> ${programMenuFile}
	userPrompt

}

##################################################################

function clearDesktopFileItems() {
  clear

	# both are needed
  # if the entries are not zero
	if [  -n "${execLineCheck}" ] || [  -n "${iconLineCheck}" ]; then
    clear

    fancy_message action "Removing any possible leftover data in .desktop file for ${programName}"

    # Removes existing menu line
    sed -i "/Icon=/d" ${localMenuFile} && sed -i "/Exec=/d" ${localMenuFile} && checkLastCommandStatus "Menu file cleared" "Menu file not cleared"

    userPrompt
 fi

}

# seperate function to check if the exec= and icon= lines exist
# if found it should not be cleared ... that would be code that should be elsewhere
function checkMenuFile() {

	fancy_message action "Checking Menu files for existing data that may cause issues"

	# if i use this for appimages to this exec line will not work
	execLineCheck=$(awk '/^Exec/ && /.sh$/ {print}' "${@}")
	iconLineCheck=$(awk '/^Icon/ && /(.png|.svg)$/ {print}' "${@}")

}

# this adds custom entries to the menu (.desktop) file
function populateMenuFile() {

	fancy_message action "Adding Exec= line, to menu file"
	echo -e "${execPath}" >> "${movedMenuFile}"

	fancy_message action "Adding IconFile= line, to menu file"
	echo -e "${iconPath}" >> "${movedMenuFile}"


	# check menu file validity
	fancy_message action "Checking Validity of Menu file for ${programName} before adding it to the system"
	desktop-file-validate "${movedMenuFile}"


	# hold on ... if invalid does it install anyway?
	checkLastCommandStatus "Menu file detected as valid" "Menu file detected to be invalid or it has issues"
	userPrompt
}


# 1 - Checks for existing entries in the menu file
# 2 - desktop-file-install's menu file
# 3 - update-desktop-datebase
function installMenuFile() {

	fancy_message action "Installing ${programName} Menu file"
	sudo desktop-file-install "${movedMenuFile}"

	fancy_message action "Updating Desktop Database"

	sudo update-desktop-database

	userPrompt

}

# call this, not the other two menu functins
function metaMenuFile() {

	checkMenuFile "${localMenuFile}"

	# clears out any entries (that shouldn't be there .. ) in the menu file
	clearDesktopFileItems

	# Populate Menu file with info from the new path from step 2
	populateMenuFile

	# Installs the Menu file
	installMenuFile

}