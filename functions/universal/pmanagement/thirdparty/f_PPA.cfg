
function ppaBranchSupportCheck() {
    clear
    echo -e "Checking if your Ubuntu base is supported by selected PPA"

    case $distroBase in

      ubuntu)

          # if $lsbCodename INCLUDE what is in $supportedBases
          if [[ $supportedBases =~ $lsbCodename ]]; then
              echo -e "PPA works on the Ubuntu base you are on, which is \"$lsbCodename\" \v"
              PPASupported="yes"

          # check 1 = "if lsbCodename is blank" ... I think anyway
          # check 2 = "if lsbCodename is not blank but is 'n/a' "
          elif  [ -z $lsbCodename ] || \
                [ $lsbCodename = "n/a" ]; then
              echo -e "It appears you are not on Ubuntu"

          else
              echo "PPA not made for the Ubuntu Base you are on"
              PPASupported="no"
          fi

        ;;

      esac
}


# This will check if the user wants to install the packages typically associated with the PPA (listed in each PPA function)
function ppaPackageInstallUserChoice() {

	echo -e "The ppaPackageInstall variable is set to \"$ppaPackageInstall\" "
  echo -e "This controls if packages (if these scripts list any, are installed by default\n"
  echo -e "note: this DOES NOT mean ALL the packages in said-PPA, rather the most popular or most associated with said PPA\n"
	echo -e "Not all PPAs in these scripts have this\v"

  echo -e "\vInstall package from PPA by Default?"
  read -p  "Your Choice? (Y/N):" installPPADefaultSelection

  case $installPPADefaultSelection in

    [yY]|yes) PPAPackageInstall="yes"
      echo -e "Common/Popular packages associated with PPAs ${bold}will${completeReset}now be installed by default"

      ;;

    [nN]|no) PPAPackageInstall="no"
      echo -e "Common/Popular packages associated with PPAs will ${bold}NOT${completeReset} be installed by default"

      ;;

    # Catch all for everything else
    *) echo -e "Invalid selection "
        return ;;

  esac

  # saves the var i think
  printf "PPAPackageInstall=$PPAPackageInstall" > $settingsDir/ubuntuSettings.cfg

  echo -e "\nTo change this setting, just run this menu option again\n "

  userPrompt
  clear

}



function ppaPackageInstallCheck() {

  echo -e "Installing Default PPA packages if the user desires "

  if [ "$PPAPackageInstall" == 'yes' ]; then

    echo -e "Installing $packageNames"
    $install $packageNames

  elif [ "$PPAPackageInstall" = 'no' ]; then
    return
  #  really ... this "else" should never be reached
  else
    echo -e "error detecting PPAPackageInstall variable status"
  fi
}


# sort of, the meta PPA function
function addPPA() {

  case $distroBase in

    ubuntu)

      # check if PPA is supported by the current version of Ubuntu running
      # MAKE sure the way this works is that nothing else is done if the answer is "no"
      ppaBranchSupportCheck

      # IDEA: can i do a "does the PPA already exist (installed) ... using inxi -r may help here "
      # note: this WILL (debugging exit) exit after displaying the result
      thirdPartyRepoCheck

      if [ "${PPASupported}" == "yes" ] && [ "${PPAPresent}" == "no" ]; then
            echo -e "Adding $PPATitle PPA"
            $aptAddRepo $PPASource
      fi

      # if the var to decide if packages from PPAs will be "auto-installed"
      # *** i should remove this or just dispaly a general message to the user without asking the question 
      # in this function 
      #ppaPackageInstallUserChoice

      ppaPackageInstallCheck

      userPrompt

    ;;

    *)
      echo -e "this code only runs on Ubuntu based distros, but your distrobase is $distroBase"
      echo "nothing to do"
      ;;

  esac

}
