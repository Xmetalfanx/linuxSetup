# Check to see if the PPA that would be added supports the Ubuntu base you are currently on, or not
function ppa_branch_support_check() {
    clear
    fancy_message acti "Checking if your Ubuntu base is supported by selected PPA"

    [ "${distroBase}" != "ubuntu" ] && fancy_message info "You are not on Ubuntu therefore, PPAs are pointless" && userPrompt && return

    # if $lsbCodename INCLUDE what is in $supportedBases
    # august 2022 - this ... doesn't make sense to me now .. why lsCodename?
      # lsbCodename SHOULD be say ubuntuBranch
    if [[ ${supportedBases} =~ ${ubuntuBranch} ]]; then
        fancy_message info "PPA works on the Ubuntu base you are on, which is \"${ubuntuBranch}\" \v"
        PPASupported="yes"
    else
        fancy_message info "PPA not made for the Ubuntu Base you are on"
        PPASupported="no"
    fi


}


# This will check if the user wants to install the packages typically associated with the PPA (listed in each PPA function)
function ppa_package_install_menu() {

	echo -e "The ppaPackageInstall variable is set to \"$ppaPackageInstall\" "
  echo -e "This controls if packages (if these scripts list any, are installed by default\n"
  echo -e "note: this DOES NOT mean ALL the packages in said-PPA, rather the most popular or most associated with said PPA\n"
	echo -e "Not all PPAs in these scripts have this\v"

  echo -e "\vInstall package from PPA by Default?"
  read -r -p  "Your Choice? (Y/N):" installPPADefaultSelection

  case ${installPPADefaultSelection} in

    [yY]|yes) PPAPackageInstall="yes"
      fancy_message info "Common/Popular packages associated with PPAs ${bold}will${completeReset}now be installed by default"

      ;;

    [nN]|no) PPAPackageInstall="no"
      fancy_message info "Common/Popular packages associated with PPAs will ${bold}NOT${completeReset} be installed by default"

      ;;

    # Catch all for everything else
    *) fancy_message lwarn "Invalid selection "
        return ;;

  esac

  # saves the var i think
  printf "PPAPackageInstall=$PPAPackageInstall" > ${settingsDir}/ubuntuSettings.cfg

  fancy_message info "\nTo change this setting, just run this menu option again\n "

  userPrompt
  clear

}


# checks if the setting to install common packages associated with a said-ppa is "yes" or "no"
# if "no" the ppa is added eventually but user has to install software "manually"
function ppa_package_install_check() {

  fancy_message action "Installing Default PPA packages if the user desires "

  [ "${PPAPackageInstall}" = 'no' ] && return
  [ "${PPAPackageInstall}" == 'yes' ] && fancy_message action  "Installing $packageNames" && ${install} ${packageNames}

}


# sort of, the meta PPA function
  ## 1 - Check if user is on an Ubuntu base, if not the rest is pointless
  # (on Ubuntu base)
  ## 2 - Check if desired PPA has support for the ubuntu base that the user is on
  # (On Ubuntu, PPA supports current Base)
  ## 3 - Is the PPA already in the repo list, if "yes" i dont want to re-add it
  # (user on Ubuntu base, PPA suports current base, PPA doesn't already exist)

function addPPA() {

  # Step 1 - returns if user is not on Ubuntu
  [ "${distroBase}" != "ubuntu" ] && fancy_message info "this code only runs on Ubuntu based distros, but your distrobase is ${distroBase}, so nothing to do" && userPrompt && return

  # Step 2
    # check if PPA is supported by the current version of Ubuntu running
    # 'PPASupported' is returned
    ppa_branch_support_check

    # "exits" if distro is not supported by the PPAs
    [ "${PPASupported}" == "no" ] && fancy_message info "The current PPA you are trying to install/enable does not have support for your current branch of Ubuntu" && userPrompt && return

  # Step 3
    # checks to see if the repo was already added
    # return var, is  "thirdPartyRepoExists"
    third_party_repo_exists_check


    [ "${thirdPartyRepoExists}" == "no" ] && fancy_message info "current PPA selected detected already, aborting, as to not re-add what is current already present" && userPrompt && return 


    fancy_message action "Adding ${PPATitle} PPA"
    fancy_message info "This does not install ${packageNames}. You can select if you want those typical packages installed by default by going to the second option in the Ubuntu menus\v"

    fancy_message info "I have chosen not to ask the user here since this could get annoying after awhile\v"

    fancy_message info "There is a check after the repo is added... if a user already has said they WANT that software to auto-install, it will"

    # Adds the PPA
    ${aptAddRepo} ${PPASource}

    # 4 - Checks if user already said they want the software to auto-install
      # if yes, this function install it 
    ppa_package_install_check

    userPrompt

}
