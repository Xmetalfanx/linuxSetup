
function opensuseLeapInstallSnapSupport() {
    case ${OSRELEASE_VERSIONID} in
        15.4) snapdURL="https://download.opensuse.org/repositories/system:/snappy/openSUSE_Leap_15.4/system:snappy.repo" ;;
    esac
}

# sub-meta function to install Snap support on OpenSUSE
function opensuseInstallSnapSupport() {

    case ${openSUSEBranch} in

        tumbleweed) snapdURL="https://download.opensuse.org/repositories/system:snappy/openSUSE_Tumbleweed/system:snappy.repo" ;;
        leap) opensuseLeapInstallSnapSupport ;;

    esac

	# source: https://snapcraft.io/install/snap-store/opensuse
	sudo zypper addrepo --refresh https://download.opensuse.org/repositories/system:/snappy/openSUSE_Leap_15.4 snappy

	sudo zypper --gpg-auto-import-keys refresh

	fancy_message action "Performing upgraded after Snappy repo was added"
	sudo zypper dup --from snappy

	fancy_message action "Installing Snapd"
	$install snapd

	fancy_message action "Enabling and starting snapd"
	sudo systemctl enable snapd
	sudo systemctl start snapd

	clear
	echo "PLEASE REBOOT to complete the addition of Snap support"
}

function archlinuxInstallSnapSupport() {
    # Resource: https://docs.snapcraft.io/installing-snap-on-arch-linux

    # install Build packages call here

    # change pwd
    cd ~/Downloads

    # https://aur.archlinux.org/packages/snapd
    fancy_message action "Cloning snapd from github"
    git clone https://aur.archlinux.org/packages/snapd
    cd snapd

    fancy_message action "Installing Snapd Support"
    makepkg -si

    # Cleanup
    fancy_message action"Cleaning up snapd directory downloaded from Github for the install "
    cd ..
    rm -rf ~/Downloads/snapd

    fancy_message action "Enabling snapd service"
    sudo systemctl enable --now snapd.socket

    # Enable Classic Snap support
    sudo ln -s /var/lib/snapd/snap /snap

    sudo pacman -S squashfuse

    fancy_message info "\nSnap support installed"
    fancy_message recommend "\nYou may want to reboot here\n"
    userPrompt
    clear

}

function metaInstallSnapSupport() {
    # Install Snapd
    fancy_message action "Snap Support not detected, Installing  .. "
    case ${distroBase} in

        arch) archlinuxInstallSnapSupport ;;
        fedora)
            installApp "snapd"

            ## due to --classic not working on snaps by default
            sudo ln -s /var/lib/snapd/snap /snap
            ;;

        solus|ubuntu) installApp "snapd" ;;

        opensuse) opensuseInstallSnapSupport ;;

    esac

}

function snapCheck() {
    # Check for snapd being installed
    if [ -e /usr/lib/snapd ] || \
	   [ -e /usr/bin/snap ]; then

        fancy_message info "Snap support IS installed"
        snapSupport="yes"

    else
        fancy_message info "no Snap support currently installed"
        snapSupport="no"
    fi

}

function snapConnRemoveMedia() {
    fancy_message action "Connecting ${snapName} snap to removable-media"

    # the snap name passed has to be EXACT
    snap connect ${snapName}:removable-media
}


#####################################################################################
# Snap Meta function
# consider renaming this to "installSnap" later ... if i do that now, some other things will break (I am in the middle of other tasks now)

function installSnapApp() {
    # What gets passed?
        # snapType = $1
        # snapName = $2

    ## Checks for Snap support
    snapCheck

    case ${snapSupport} in

        "no")
            # Snap support NOT detected, so install it first
            metaInstallSnapSupport
            ;;

        "yes")
            # Snap support found
            fancy_message info "Snap support found"

    esac

    fancy_message action "Installing ${snapName} Snap"

    # Check snap type, located in each app function's list of variables
    case ${snapType} in

		## note to self: I changed it to "normal or anything that is not listed in case $snapType is not passed in some cases "
        classic) snap install --classic ${snapName} ;;
        beta) snap install --beta ${snapName} ;;
        edge) snap install --edge ${snapName};;
		normal|*) snap install ${snapName} ;;

    esac

}

####################################################################

function removeSnapUbuntu() {
    fancy_message info "About to remove Snap support from ${distroBase}"

    fancy_message action "Removing snap cache"
    sudo rm -rf /var/cache/snapd/

    fancy_message "Removing Snap support"
    $uninstall snapd

    fancy_message "Removing user's snap folder"
    rm -fr ~/snap

    fancy_message action "Marking Snapd so it doesn't reinstall"
    sudo apt-mark hold snapd

    userPrompt
}


# Snap removal code 
function removeSnapSupport() {
    # check if snap support is even installed at the start 
    snapCheck

    [ "${snapSupport}" == "no" ] && echo "no Snap support enabled" &&userPrompt && return 

    fancy_message info "BE WARNED: this code, in it's current state will not replace any existing snaps with other versions of the same software"
    userPrompt

    fancy_message action "Removing snapd, disabling support for Snaps"

    case $distroBase in 
        arch|debian|fedora|opensuse|solus) $uninstall "snapd" ;;
        ubuntu) removeSnapUbuntu ;; 
    esac 

    # idea: to prevent snapd from reinstalling on ubuntu 
    sudo apt-mark hold snapd

}