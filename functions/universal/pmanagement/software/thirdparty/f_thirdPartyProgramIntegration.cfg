
# this probably could be named better
# NOTE: ANYTHING RELATED to the icon files and menus shouldn't be here yet 
function setMenuPathVars() {


	# sets the downloaded_file var IF the fileFormat is an AppImage
		# wouldn't this var be known at the software (indivudual) function? 
	[ "${fileFormat}" == "AppImage" ] && execFile=$(basename "${downloaded_file}" )

	##########################################################
	# Debugging 
	#echo -e "finalProgramLocation:\t${finalProgramLocation}"
	##########################################################
	
	echo -e "Finding program Location for fullExecPath var"
	fullExecPath=$(find ${finalProgramLocation} -type f -name "${execFile}")


	# full lines to add to menu files
	execPath="Exec=${fullExecPath}"
	iconPath="Icon=${movedIconFile}"

}

# only for debugging
function debuggingVars() {
    echo -e "\vexecPath:\t ${execPath}"
    echo -e "iconPath:\t ${iconPath}"

}

# End of Var related functions
#######################################################################################

# just for the ~/Programs folder
function programRootFolderDetection() {

	clear
	fancy_message action "Checking for ${programDir}"

	# Creates a folder ~/Program/ if it doesn't exist
	[ ! -d "${programDir}" ] && fancy_message action "${programDir} does not already exist, creating directory to store third party apps" && mkdir ${programDir} && checkLastCommandStatus "Program directory created.  The location is in your user's Home folder as \"Programs\" "  "error creating ${programDir}"

}


# Check if ~/Programs exists, and if not, create it
function programsDestinationDetection() {

	# checks for/creates ~/Programs dir if its not there 
	programRootFolderDetection

	# Subdirectory/SubFolder check
	[ ! -d "${finalProgramLocation}" ] && fancy_message action "Creating ${finalProgramLocation} directory" && mkdir "${finalProgramLocation}" && fancy_message info "${finalProgramLocation} directory created"
}

# copy icon files to ~/Programs/${programTitle}
function copyIconFiles() {


	[  -z "${localIconFile}" ] && echo "localIconFile is empty" && userPrompt && return 
	[  -z "${movedIconFile}" ] && echo "movedIconFile is empty" && userPrompt && return 



	fancy_message action "Copying Icon file to ${finalProgramLocation}"

	cp "${localIconFile}" "${movedIconFile}" && checkLastCommandStatus "Icon file copied sucessfully" "error copying Icon file" && userPrompt

	sleep 1

}

################################################33

function moveAppImageToProgramsFolder() {

	fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
	# TODO: i need to assign the appiamge to this downloaded_file app ...
	cp ${downloaded_file} ${finalProgramLocation}

	checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage"

	userPrompt

}


# Moves needed files to ~/Programs
function moveToProgramsFolder() {

	# Checks for the destination and if what is needed is there
    	# if it's not .... set it up

    programsDestinationDetection

	case ${fileFormat} in
    	AppImage)

        	fancy_message action "Copying $programTitle AppImage to ~/Programs/ folder"
			# todo: asign the right file if needed to downloaded_file
			cp ${downloaded_file} ${finalProgramLocation}

			checkLastCommandStatus "${programTitle} AppImage sucessfully moved" "error moving Appimage"

			;;

      *)
        # what gets to this step?
        #fancy_message action "Moving ${finalProgramLocation} to ${programDir}"

        # finalProgramLocation is the dir inside of ~/Downloads/... with the name of the app as the folder name

        cp -r ${finalProgramLocation} ${programDir}

    	;;

    esac

}


#############################################################################################

# this should be called from handleDownloads function ... the finalProgramPath already existing at this point ... i think

# this is for apps that can run if you just extract them... a sort of meta function i guess
# tar archives OR AppImages should be ok to be passed here 
function setupExtractedApps() {
	userPrompt
	# dev note: HERE i need to know the finalProgramLocation (IF that var is a path)

	# function to move third party app (extracted tarballs or AppImages, not really debs or rpm files) to a Programs folder
	moveToProgramsFolder

	userPrompt

	clear

	assignIconAndMenuFiles && copyIconFiles
	
	echo "Addressing Menus" && metaMenuFile

}

## End of functions for third party extraction to Programs folder
#######################################################################