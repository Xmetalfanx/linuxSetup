function detectPackageStatus()
{
	for indivdualPackage in $@
	{
		clear

		echo -e "Checking $indivdualPackage is installed"


		# idea: so nothing is displayed
		which $indivdualPackage > /dev/null 2>&1

		if [ $? == 0 ]; then
			echo -e "Package $indivdualPackage found on this system"

		else
			echo -e "Package $indivdualPackage is not detected, and needs to be installed"
			userPrompt

			installApp $indivdualPackage
		fi

	}

}

#####################################################################################
## overcomplicated
function oldDetectPackageStatus()
{
  	# $1 is the package you want info on

	if [ "$distroBase" == 'ubuntu' ]; then
		# $1, here = the package you want info on

		## Clear Var if it was assigned a value before
		unset packageStatus

		ubuntuPackageStatus=$(dpkg -l | grep $1)

		# IF package IS installed

		if [ -z "$ubuntuPackageStatus" ]; then
			packageStatus=false
		else
			packageStatus=true
		fi

	elif [ "$distroBase" == 'fedora' ] || [ "$distroBase" == 'opensuse' ]; then

		rpmPackage=$(rpm -q $1)

		## Package not installed
		if [ "$rpmPackage" == "package $1 is not installed" ]; then
			packageStatus=false
		else
			packageStatus=true
		fi
		return

	elif [ "$distroBase" == 'arch' ]; then

		archPkgStatus="pacman -Qi $1 &> /dev/null"

		## Fill this out more later
		if [ "$archPkgStatus" == "error: package $1 was not found" ]; then
			packageStatus=false
		else
			packageStatus=true
		fi

		elif [ "$distroBase" == 'solus' ]; then

		solusPkgDetection=$(eopkg li | grep $1)

		## TEST ONLY
		#clear
		#echo -e "solusPkgDetection:$solusPkgDetection"
		#userPrompt

		if [ -z "$solusPkgDetection" ]; then
			packageStatus=false
		else
			packageStatus=true
		fi

		return

		else
		echo "package detection function - FAILED"
		fi


}


#################################################################################
