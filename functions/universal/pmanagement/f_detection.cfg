# i dont like this idea but i am just putting code into practice here (vs just thinking of how to do it) ... i can refactor later
# considering changing this to detectPackageStatus and making what i have of that function name above say "detectPackageStatusThirdParty"
function detectPackageStatus() {

	for indivdualPackage in $@
	{
		clear

		echo -e "Checking $indivdualPackage is installed"

		# idea: so nothing is displayed
		which $individualPackage > /dev/null 2>&1

		# userprompt = debugging


		# [ $? == 0 ] && echo -e "Package $indivdualPackage found on this system"  && userPrompt && return || echo -e "Package $individualPackage is not detected, and needs to be installed" || userPrompt || return $individualPackage

		#####################################################################
		# what is below, is the same as the one line above .... just in a longer form

		if [ $? == 0 ]; then
			echo -e "Package $indivdualPackage found on this system"

		elif [ $? == 1 ]; then

			echo -e "Package $individualPackage is not detected, and needs to be installed"
			userPrompt

			#returns to "installApp" function
			return $individualPackage

		else
			echo -e "Error detecting package status "
		fi

	}
}


# function detectPackageStatusThirdParty()
# {
# 	for indivdualPackage in $@
# 	{
# 		clear

# 		echo -e "Checking $indivdualPackage is installed"

# 		# idea: so nothing is displayed
# 		which $indivdualPackage > /dev/null 2>&1

# 		# debugging
# 		# show exit code
# 		#echo $?

# 		if [ $? == 0 ]; then
# 			echo -e "Package $indivdualPackage found on this system"
# 			packageInstalled="yes"
# 			return
# 		else
# 			echo -e "Package $indivdualPackage is not detected, and needs to be installed"
# 			packageInstalled="no"
# 			#debugging prompt only
# 			# userPrompt



# 		fi

# 	}

# }