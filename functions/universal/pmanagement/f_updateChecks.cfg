function rollingReleaseUpdateDisplay()
{

  if [ "$diffInYears" -ge  "1" ]; then
    echo "You are on a rolling release; HOWEVER, it appears that you haven't updated in at least 1 year"

  elif [ "$diffInMonths" -ge  "6" ];then

    echo "You are on a rolling release, that hasn't been updated in at least 6 months; but, has been updated within the past year"

  elif [ "$diffInMonths" -le  "6" ] && [ "$diffInMonths" -ge  "1" ]; then
    echo "You are on a rolling release who's last update was between 1 and 6 months ago"

  else
    return
  fi

  echo
  echo "Going too long between updates on some rolling releases may result in issues/breakages when an update is finally done"
  userPrompt
}



function updateInfoDisplay()
{

    ## no need to run lastUpdateCheck since it automatically runs at script startup

    case $distroBase in

      solus)
          echo -e "Please note that the last update check in my code for Solus, so far is ONLY for the last time eopkg update, was ran"
          echo
          echo -e "This does not count the Software Center updater (how one should update Solus)... this may not reflect the actual last time the system was updated"
          ;;

    esac
    userPrompt

    rollingReleaseUpdateDisplay


}

###########################################
function lastUpdateDisplayTest()
{
    #################################
    #echo -e "Last Update: $lastUpdate"
    #echo
    #echo "lastUpdateEpoch: $lastUpdateEpoch"
    #echo -e "durationSinceLastUpdate: $durationSinceLastUpdate"
    #echo -e "diffinDays: $diffinDays"
    #userPrompt
    #################################33
    return 

}
###########################################

function lastUpdateDisplay()
{

    if [ "$diffInDays" -gt "1" ]; then
      echo -e "Time Since last Update: $diffInYears years, $diffInMonths months, $diffInDays days"
    
    elif [ "$diffInDays" -le "1" ]; then
      return 

    fi

    userPrompt

}

#####################################################################################################
## Meta function 
function lastUpdateCheck()
{

  case $distroBase in

    arch)
        lastUpdate=$(awk '/starting/ { print $1 }' /var/log/pacman.log | tail -1 | cut -c 2-11)
        ;;

    opensuse)
        # Test ... I may not need to specify "up" vs "dup"
        lastUpdate=$(sudo awk '/zypper/ { print $1 }' /var/log/zypper.log | tail -1  ) ;;

    solus)
        lastUpdate=$(awk '/Updating/ { print $1 }' /var/log/eopkg.log | tail -1 )
        ;;

    ubuntu)
        lastUpdate=$(awk '/Start-Date/ { print $2 }' /var/log/apt/history.log | tail -1)
        ;;

  esac

  lastUpdateEpoch=$(date +"%s" -d "$lastUpdate")

  #################################################################
  durationSinceLastUpdate=$[currentDate/lastUpdateEpoch]

  #This doesn't make sense since this is using a date as comparsion 
  #diffInMinutes=$[durationSinceLastUpdate/minute]
  #diffInHours=$[durationSinceLastUpdate/hour]

  diffInDays=$[durationSinceLastUpdate/day]
  diffInWeeks=$[durationSinceLastUpdate/week]
  diffInMonths=$[durationSinceLastUpdate/month]
  diffInYears=$[durationSinceLastUpdate/year]

  lastUpdateDisplay
}


## despite the name, I will use this for rolling/semi-rolling releases
function rollingReleaseUpdateCheck()
{
  ## probably should include rawhide
  ## could i just check ....if rollingRelease=yes ... ?? .... though for semi-rolling releases this may be a problem
  case $distroBase in

    arch|debian) rollingReleaseUpdateDisplay ;;

    opensuse)
      if [ "$openSUSEBranch" = "tumbleweed" ]; then
          rollingReleaseUpdateDisplay
      else
        return
      fi

      ;;

    fedora)
      # I think if ...fedoraVersion=rawhide...(I need to check with an lsbrelease check on rawhide)... then this should be triggered
      return
      ;;

    *) return ;;

  esac


}