
# Check if repo is installed/enabled
function repoCheck()
{
	case $distroBase in

	fedora)

		# if this is null, repo is not installed
		if [ $(dnf repolist | grep "fusion") ]; then
			# RPMFusion is installed
			return
		else
			# echo for a test only
			echo -e "RPMFusion needs to be installed"
		fi ;;

	opensuse)
		return ;;

	esac


}

############################################

## This will be the meta function for arch based stuff
## Mirrors/Repos/whatever
function optimizeRepo()
{

    case $distroBase in

    	fedora)
			## Fedora  ... no need for extra checks, since the distroBase should be known here
			echo -e "Optimizing Fedora, by adding fastest mirror check to the dnf.conf file "

			su -c 'echo "fastestmirror=true" >> /etc/dnf/dnf.conf'
			echo -e "Done"
			userPrompt
			;;

		arch)

			# backup original mirrorlist but doesn't touch the original backup if it already exists
			echo -e "Backup Mirrorlist "
			backupMirrorlist

			if  [ "$OSRELEASE_NAME" = "Manjaro Linux" ] || \
				[ "$OSRELEASE_ID" = "Manjaro Linux" ] || \
				[ "$LSBDESCRIPTON" = "ManjaroLinux" ]; then

				# Manjaro
				optimizeManjaroMirror

			else
				# Arch
				optimizeArchMirrorsReflector

			fi
        ;;

    # debian)

	# 	# Feb 2022: IS THIS even needed anymore?

	# 	# netselect-apt creates a backup but .... the date is the extension ... i may want to keep this
	# 	# to do a "restore" alternate function maybe

	# 	netselectBackup="$sourceListDir/sources.list.netselectBackup"

	# 	clear
	# 	echo -e "Installing netselect-apt"
	# 	installApp "netselect netselect-apt"
	# 	clear

	# 	# Backup sources.list
	# 	echo -e "Backing up sources.list to $netselectBackup"
	# 	sudo cp $sourceListDir/sources.list $netselectBackup
	# 	echo -e "Sources.list is backed up"
	# 	echo -e "notice: netselect-apt also backs up your sources.list file it seems"
	# 	userPrompt


	# 	# -n = includes nonfree
	# 	clear
	# 	echo -e "Running netselect-apt - with non-free included "
	# 	$admin netselect-apt -n -o /etc/apt/sources.list

	# 	;;

      *) 	echo "No Optimizations performed"
    		return ;;

    esac

}


## Meta function to add sources
## This IS the meta function
function universalAddRepo()
{
 	# $1 - Repo Name
  	# $2 - Repo URL/Source

  	case $distroBase in

		fedora) sudo dnf config-manager --add-repo $2 ;;
		opensuse)
			## ANOTHER function had  "addrepo -f -n $1 $2"... what is -n ?
			sudo zypper addrepo -f $2
			;;

		solus)
			# probably would only be used for adding the default repo or (forgot what Solus calls it) the testing repo they have
			sudo eopkg add-repo $2 ;;

		ubuntu) addPPA $PPAName $PPASource  ;;

  esac
}

###################################################################################
## PPA Related


function addPPA()
{
	#  Vars that may get passed
	# $PPAName - name of ppa
	# $PPASource - the "ppa/libreoffice" type part
	# (Optional) $packageNames - if a user selects to install the software in some ppas (i may do this a ppa-to-ppa type thing....) these would be what is installed or updated



    # call to function in /functions/ubuntu/PPAs/f_branchCheck.cfg
    # check if PPA is supported by the current version of Ubuntu running
    ppaBranchCheck


    case $PPASupported in

    	yes)
			# echo -e "Adding $1 PPA"
			$aptAddRepo $ppaSource ;;

    esac
    ## ends the case if the PPA is supported

    #Check if user wants to install the software typically associated with the PPA
    ## Idea: i should make a var so if say the user wants to say NO or YES here it remembers and stops asking
    installPPAPackages

  	# Refreshes the repo
  	$refresh


}
## End of PPA Related  Functions
################################################################################3

function thirdPartyRepoQuestion()
{
    # $1 = function name to call if the user wants to proceed

    # This seems messesd up, but I suppose the thing to pass to this function would the function name?
        ## the logic/coding seems hacky to me, but i may come back to that later

    clear
    echo -e "Please note: this is a third party repo that I know works. I would never include repos that I did not trust to at least try on my own systems, but I know some users will not want to add things that are not officially from OpenSUSE"
    echo
    read -p "Do you still want to add this repo? (Y/N)" suseThirdPartyRepoChoice


    case $suseThirdPartyRepoChoice in

        [yY])

			# TODO: redo the echo statement
            echo -e "OpenSuse Repos would be added at this point"
            userPrompt

            ;;

        [nN]) return ;;

        *) echo -e "Invalid selection" ;;


    esac

}
