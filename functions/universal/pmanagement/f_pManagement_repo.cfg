##########################################################
# OpenSUSE Packman Repo code start

function installPackmanSuseRepo() {

    ## note to self: for consistency i should change packmanURL to repoURL .. that way the universal function can be slimmed down

	repoName="Pacman Repository"

	fancy_message action "Installing ${repoName} for OpenSuse"

    case ${openSUSEBranch} in

        leap)
            # Determine what version of Leap the user is on

			if [ "${leapVersion}" == "15.3" ] || [ "${leapVersion}" ==  "15.4" ]; then 
				repoURL="https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_$leapVersion/"
			else 
				fancy_message info "Supported Leap version not detected"
			fi 

            ;;

        tumbleweed) repoURL="http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Tumbleweed/"  ;;

    esac

	# c = check repo / prove repo 
	# f = enable autorefresh 
	# p - priority 
	sudo zypper ar -cfp 90 ${repoURL} packman
	
    # Distro Upgrade
    sudo zypper dup --from packman --allow-vendor-change

}

# End of OpenSUSE Packman related code
#############################################################

## Meta function
function universalAddRepo() {
	# july 2022: I think i can do better then $1 and $2 to be more descriptive 
 	# $1 - Repo Name
  	# $2 - Repo URL/Source

  	case ${distroBase} in

		fedora) 
				
			# sudo dnf config-manager --add-repo $2 
			clear
            fancy_message action "Adding BOTH ${repoName} Free and Non-Free Repos"
			# free repo 
		    sudo dnf install \
			https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
			
			# non-free repo 
			sudo dnf install \
  			https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
			
			# Fails ... everything UP to here seems to pass 
				# actually the name is not correct here 
			# fancy_message action "Enabling ${repoName}"
			# # i may not have the name right in the following step 
			# sudo dnf config-manager --set-enabled ${repoName}
			
			;;
		
		opensuse)
			# ## ANO THER function had  "addrepo -f -n ${1} ${2}"... what is -n ?
			# sudo zypper addrepo -f ${2}

			installPackmanSuseRepo
			;;

		solus)
			# probably would only be used for adding the default repo or (forgot what Solus calls it) the testing repo they have
			sudo eopkg add-repo ${2} ;;

		ubuntu) addPPA ${PPASource}

			## Refresh repos 
			# this maybe redundant for addPPA 
			${refresh}
    
			thirdPartyRepoExists="yes"
			;;
	esac

    clear
    # TODO: add the specific name of the repo here in var
    fancy_message info "Third party repo ${repoName}, added"
  
}

# july 2022: this seemed to be for OpenSUSE specifically but now is for openSUSE/Fedora 
function thirdPartyRepoQuestion() {

    clear
    echo -e "Please note: this is a third party repo, and that I would never include repos that I did not trust (at least with a grain of salt, which is common sense), on my own systems, but I know some users will not want to add things that are not officially from distro maintainers\n"
    read -r -p "Do you still want to add this repo? (Y/N) " thirdPartyRepoChoice

    case ${thirdPartyRepoChoice} in

        [yY])

			fancy_message action "Adding third party Repo, ${repoName} to ${distroBase}"
            userPrompt

			# this function needs a variable (repo "URL" itself passed )
			universalAddRepo

            ;;

        [nN]) return ;;

        *) fancy_message lwarn "Invalid selection" ;;

    esac

}


# Check if repo is installed/enabled
function thirdPartyRepoCheck() {
 	
	# Opensuse has pacman installed
    # Fedora has RPMFusion installed
    # ubuntu has PPAs 
    ########################################

	# case statement to assign repoExistsCheck var and repoName 
	case $distroBase in 

		fedora) 
			repoName="rpmfusion" 
			local repoExistsCheck=$(dnf repolist | grep "${repoName}" )
			;;
		
		opensuse) 
			repoName="packman" 
			local repoExistsCheck=$(zypper lr | grep "${repoName}" )  
			;; 

		ubuntu)
			repoName="${PPAName}"
			local repoExistsCheck=$(inxi -r | grep "${PPAName}" )
			;;
	esac 

	# Check if thirdPartyRepoExists is not present
		# This could be an issue since ubuntu wise my thinking is the CURRENTLY addresssed PPA is the repo but there may be different 
		# repos/PPAs added 

	case ${distroBase} in 
		
		fedora|opensuse) 
			
			# if the results of the check are NOT null 
			if [ ! -z "${repoExistsCheck}" ]; then
				
				fancy_message info "${repoName} already enabled"
				thirdPartyRepoExists="yes"
				
				# without user prompt the code works but it goes right back to the menu, so it seems like it didn't work
				userPrompt

			else
				# echo for a test only
				fancy_message info "The ${repoName} repo, is not installed already"
				userPrompt

        		thirdPartyRepoExists="no"

				# ask if the user would like to install here 
				# ... is this the best place for this ??? 
				thirdPartyRepoQuestion

			fi 
		
		;;

		ubuntu)

			if [ ! -z "${repoExistsCheck}" ]; then
				thirdPartyRepoExists="yes"
				fancy_message info "PPA for ${PPATitle} exists/is already present"
				userPrompt
			else
				thirdPartyRepoExists="no"
			fi  
			;; 
		*) return ;; 

	esac 

}

############################################

## This will be the meta function for arch based stuff
## Mirrors/Repos/whatever
function optimizeRepo() {

    case ${distroBase} in

    	fedora)
			## Fedora  ... no need for extra checks, since the distroBase should be known here
			fancy_message action "Optimizing Fedora, by adding fastest mirror check to the dnf.conf file "

			su -c 'echo "fastestmirror=true" >> /etc/dnf/dnf.conf'
			fancy_message info "Done Optimizing repos on ${distroBase}"
			userPrompt
			;;

		arch)

			# backup original mirrorlist but doesn't touch the original backup if it already exists
			fancy_message action "Backup Mirrorlist "
			backupMirrorlist

			if  [ "${OSRELEASE_NAME}" = "Manjaro Linux" ] || \
				[ "${OSRELEASE_ID}" = "Manjaro Linux" ] || \
				[ "${LSBDESCRIPTON}-" = "ManjaroLinux" ]; then

				# Manjaro
				optimizeManjaroMirror

			else
				# Arch
				optimizeArchMirrorsReflector

			fi
        ;;

    # debian)

	# 	# Feb 2022: IS THIS even needed anymore?

	# 	# netselect-apt creates a backup but .... the date is the extension ... i may want to keep this
	# 	# to do a "restore" alternate function maybe

	# 	netselectBackup="${sourceListDir}/sources.list.netselectBackup"

	# 	clear
	# 	fancy_message action "Installing netselect-apt"
	# 	installApp "netselect netselect-apt"
	# 	clear

	# 	# Backup sources.list
	# 	fancy_message action "Backing up sources.list to ${netselectBackup}"
	# 	sudo cp ${sourceListDir}/sources.list ${netselectBackup}
	# 	fancy_message info "Sources.list is backed up"
	# 	fancy_message info "notice: netselect-apt also backs up your sources.list file it seems"
	# 	userPrompt


	# 	# -n = includes nonfree
	# 	clear
	# 	fancy_message action "Running netselect-apt - with non-free included "
	# 	$admin netselect-apt -n -o /etc/apt/sources.list

	# 	;;

      *) 	fancy_message info "No Optimizations performed"
    		return ;;

    esac

}

