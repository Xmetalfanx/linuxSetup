###################################################################################################
# Arch related 

function optimizeArchMirrors()
{

  clear
  echo -e "About to Optimize Pacman Mirrors, while backing up  the current mirror list"

  # Backing up Current mirror list, TODO: Add option to "auto-reset" mirrorlist in the case of a bork
  sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak

  # Install Reflector
  $install reflector

  # Run Reflector - this is a basic run
  sudo reflector --verbose -l 6 --sort rate --save /etc/pacman.d/mirrorlist

}

###################################################################################################
### Backup section 

function backupMirrorlist()
{
  
  ## Check if original mirrorlist has been created/backed up yet 
  if [ -f $originalMirrorlist ]

    # makes backup of current mirrorlist but doesn't touch mirrorlist.original IF IT ALREADY EXISTS 
    echo -e "Making a backup of your current mirrorlist"
    sudo cp $mirrorlist $backupMirrorlist
    echo -e "Mirrorlist successfully backed up"
    clear

  else
    clear

    echo -e "Backing up original mirrorlist"
    echo -e "Note: THIS backup file is only created once and is the original mirrorlist file before my scripts ever did anything"
    
    # For a space
    echo
    echo "The original mirrorlist is backed up at: $originalMirrorlist"
    sudo cp $mirrorlist $originalMirrorlist

  fi

}

function optimizeArchMirrorMeta()
{
  # Backup

    ## Declare Variables
     
      # Mirrorlist file
      mirrorlist="/etc/packman.d/mirrorlist"
      # backup of original mirrorlist before my scripts do anything 
      originalMirrorlistBackup="/etc/pacman.d/mirrorlist.original"
      # backup file to be created "each time"
      backupMirrorlist="/etc/pacman.d/mirrorlist.backup"
      ######################################################################


  # backup original mirrorlist but doesn't touch the original backup if it already exists 
  originalMirrorlistBackup

  #Optimize mirrors
  optimizeArchMirrors

  echo -e "You do not seem to be on an Arch based distro "

}

## End Arch Section 
#######################################################################################



#######################################################################################
## Manjaro Related 

function manjaroRankMirrors()
{
  clear 
  echo -e "About to run a command optimizing the download mirrors for Manjaro"
  sudo pacman-mirrors -f 0 && $refresh
  clear
  echo -e "Mirrors have been optimized and updated, successfully "
  userPrompt
}

function manjaroRankMirrorsFastTrack()
{
  clear 
  echo -e "About to run a command optimizing the download mirrors for Manjaro, using the five fastest detected mirrors"
  sudo pacman-mirrors -f 5 && $refresh
  clear
  echo -e "Mirrors have been optimized and updated, successfully "
  userPrompt
}


## Do not use ... for now but keep the function 
function manjaroOptDBSpeed()
{
  #clear
  #echo -e "Attention: This command defragments Pacman's database, which boosts performance on slow hard drives but is harmful on SSDs. So, DO NOT use this command on SSDs! "
  #userPrompt 

  #sudo pacman-optimize && sync
  #userPrompt

}

## End Manjaro Section 
#####################################################################################


## This will be the meta function 
## Mirrors/Repos/whatever 
function optimizeRepos
{
    ## Fedora  ... no need for extra checks, since the distroBase should be known here 
    if [ "$distroBase" == 'fedora' ]; then  
    
      su -c 'echo "fastestmirror=true" >> /etc/dnf/dnf.conf'
      userPrompt


    ## I need to do a check for arch but i CANT use distroBase since that will trigger if the distro is Manjaro too 





    # TODO: Check these vars ... they could be slightly wrong 
    ## If Manjaro 
    ## This number of checks may be overkill 
    elif [ "$OSRELEASE_NAME" = "Manjaro Linux" ] || [ "$OSRELEASE_ID" = "Manjaro Linux" ] || [ "$LSBDESCRIPTON" = "ManjaroLinux" ]

      ## Call to Function 
      manjaroRankMirrors

    else
      return 
    
    fi


}

######################################################################################
## Related to upgrading, below 

function logUpgradeInfo()
{
  
  clear

  # the idea of this is to keep track (in my scripts anyway) of the last time the system was updated.   I do have a few ideas for why that may be needed that I am throwing around in my head.

  upgradeDate=$(date +%D%t:%r)

  echo -e "Last Upgraded:\t $distroBase $version \t$upgradeDate" >> updateInfo.txt

}



####################################################################################3
# Start of Add source/repo section 

## OpenSuse
function suseAddRepoName
{
      ## $1 is the Repo Name
      ## $2 is the Repo "URL"

      #Adding Repos in OpenSuse
      sudo zypper addrepo -f -n $1 $2
}


## Universal function to add sources 

function universalAddRepo
{

  if [ "$distroBase" == 'ubuntu' ]; then
    addrepo= sudo apt-add-repository -y $1

  elif [ "$distroBase" == 'fedora' ]; then
    sudo dnf config-manager --add-repo $1

  elif [ "$distroBase" == 'opennsuse' ]; then
    zypper ar -r %1

    # Refresh Repo
    zypper ref

  else
    return 
  
  fi
}

## End Add Source/Repo Section 
################################################################


#################################################################
# Start of the package installation section 

## Install related

  function installApp()
  {

    if [ "$distroBase" == 'ubuntu' ] || [ "$distroBase" == 'fedora' ] || [ "$distroBase" == 'opennsuse' ] || [ "$distroBase" == 'arch' ] || [ "$distroBase" == 'solus' ]; then
      $install $1

    else
        echo "FILLER TEXT FOR NOW ... "
    fi

  }

## End of Package installation section 
###############################################################################