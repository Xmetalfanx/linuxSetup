
#########################################################################

## Question to self: WHAT is the point of having "packageName" in these functions? ... shouldn't stripFileInfo find that info? ... is this var being here a leftover from the old pre-template way of doing things?

#############################################################################

function LAMPInstall()
{
  ## Assumes packages names are same cross-distro

  ## This code below is probably from an Ubuntu based distro
  $install apache2 mysql-server php libapache2-mod-php
}

#################################################################################

###################################################################################
# Start of Wine related code 
function wineLinuxMint()
{
  # lsbRelease is the number ... not sure if it say stays "18" or changes from "18.1"


  # Linux Mint 19.x 
  if  [ "$lsbRelease" = '19' ]; then 
      #  checks for Linux Mint 

    sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'

  # Linux Mint 18.x
  elif  [ "$lsbRelease" = '18' ]; then
      #  checks for Linux Mint 

    sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main'

  #  Linux Mint 17 
  ## is most of this not EOL? 
  elif  [ "$lsbRelease" = '17' ]; then 
    #  checks for Linux Mint 

    sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ trusty main' 

  fi 

}

function wineUbuntuInstall()
{
  # Source: https://wiki.winehq.org/Ubuntu

  echo -e "The WineHQ repository key was changed on 2018-12-19. If you downloaded and added the key before that time, you will need to download and add the new key and run sudo apt update to accept the repository changes."

  echo -e "Beginning with Wine 4.5, the wine-devel packages for Ubuntu 18.04 and 18.10 require libfaudio0 as a dependency. Since the distro does not provide it, libfaudio0 packages can be downloaded from the OBS. See https://forum.winehq.org/viewtopic.php?f=8&t=32192 for details"  

  clear
  # Add architecture 
  sudo dpkg --add-architecture i386

  # Add Key
  wget -nc https://dl.winehq.org/wine-builds/winehq.key
  sudo apt-key add winehq.key


  # Add Repo

    # Ubuntu 18.04 - Bionic
    if  [ "lsbCodename" = 'bionic' ] || \
        [ "$lsbRelease" = '18.04' ]; then

        sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'

    # Ubuntu 16.04 - xenial
    elif  [ "lsbCodename" = 'xenial' ] || \
        [ "$lsbRelease" = '16.04' ]; then 

        sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main'

    # Ubuntu 14.04 Trusty
    ## is most of this not EOL? 
    elif  [ "lsbCodename" = 'trusty' ] || \
      [ "$lsbRelease" = '14.04' ]; then 

        sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ trusty main' 

    #  18.10
    elif  [ "lsbCodename" = 'cosmic' ] || \
      [ "$lsbRelease" = '18.10' ]; then

      sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ cosmic main'
    fi 

    ## Refresh repos 
    $refresh
    clear

    # install 
    $install --install-recommends winehq-stable

    $install playonlinux 

}

function wineInstall()
{
    programName="Wine Emulator"
    programHomepage=http://www.winehq.com
    
    # this will not work in all cases as some distros use "wine-stable" or "wine-developement"
    packageNames="wine playonlinux"


    if [ "$distroBase" = 'ubuntu' ]; then
        wineUbuntuInstall

        ## Refresh repos 
        $refresh
        clear

        # install 
        $install --install-recommends winehq-stable

        $install playonlinux 

        # Linux Mint Checks - idea is there is no need to go threw the ubuntu section, if the distro is clearly Mint 
    elif [ "$lsbDistribID" = 'LinuxMint' ]; then
        wineLinuxMint

        ## Refresh repos 
        $refresh
        clear

        # install 
        $install --install-recommends winehq-stable

        $install playonlinux 

    elif  [ "$distroBase" = 'arch' ] || \
          [ "$distroBase" = 'fedora' ] || \
          [ "$distroBase" = 'opennsuse' ] || \ 
          [ "$distroBase" = 'solus' ]; then
        
        # Wine is in the default repos 
        $install $packageNames
    
    else
      echo "FILLER TEXT FOR NOW ... "
    fi

}


function etcherInstall()
{
  programName=Etcher
  packageURL=https://github.com/balena-io/etcher/releases/download/v1.5.5/balena-etcher-electron-1.5.5-linux-x64.zip


  externalDownload $programName $packageURL
  
  # note to self comment to be removed later: HERE the etcher AppImage file is extracted to the user's Download folder 
  userPrompt
  echo 
  echo -e "Etcher's AppImage is now located in your Downloads folder"
  echo -e "Please navigate to that folder and click the icon to run it"
  echo -e "or navigate to it in a terminal and type \"./Etcher-linux-x64.AppImage\" "
}

#####################################################################################
#######################################################################################


# Metafuntion
function universalSoftwareInstaller {
    
    # $software should carry over from f_common.cfg 
    
    clear 
    echo -e "About to install $software"
    userPrompt

    # $install $software

    # vscodeInstall

    # xnViewMPInstall

    # tiny Media Manager install 
    # tinyMediaManagerInstall

    # etcher install
    # etcherInstall

    makeMKVInstall


}