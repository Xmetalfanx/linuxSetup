
#########################################################################

## Question to self: WHAT is the point of having "packageName" in these functions? ... shouldn't stripFileInfo find that info? ... is this var being here a leftover from the old pre-template way of doing things?

#############################################################################

# mainly due to the package name issue on Debian 
function firefoxInstall
{
  case $distroBase in 

  debian) $install firefox-esr ;;

  arch|fedora|opensuse|solus|ubuntu) $install firefox ;;

  esac

}

function debianMessage 
{
  
      clear
      echo -e "If you are using Debian you may need to edit your sources.list file "
      echo -e "My install of Debian Bulleyes only had 'main' listed .... add 'contrib' and 'nonfree' "
  

}


# the plan: call this instead of just "$install $software" in the menus
# some distro bases have issues that may be able to be solved by doing it this way
function massSoftwareInstall()
{
  case $distroBase in 

    debian) debianMessage ;;

  esac 

  
  # no comment here as i probably put the echo in the function itself
  thirdPartyRepoCheck

  #refresh repos first
  $refresh

  echo -e "About to install $software"
  userPrompt
  $install $software

  # Install Firefox 
  firefoxInstall

  # for Variety
  # this may be a good place for other distro and odd "dep issues"
  case $distroBase in

    opensuse) $install python-requests ;;

    *) return ;;

  esac

}

# Meta function
function universalBuildEssentials()
{

  echo -e "About to install build essential packages based on your distro"

  case $distroBase in

  arch) sudo pacman -Sy base-devel ;;

  debian) $install build-essential ;; 
  fedora)
      sudo dnf groupinstall "Development Tools"
      sudo dnf groupinstall "C Development Tools and Libraries"

      $install zlib-devel openssl-devel expat-devel ffmpeg ffmpeg-devel qt5-qtbase-devel
      ;;

  opensuse) sudo zypper install -t pattern devel_basis ;;

  solus) sudo eopkg it -c system.devel ;;

  ubuntu)

    $install build-essential pkg-config libc6-dev libssl-dev libexpat1-dev libavcodec-dev libgl1-mesa-dev libqt4-dev zlib1g-dev ;;

  esac


}

function etcherInstall()
{
  programName="Etcher"
  releaseURL=$(curl -s "https://github.com/balena-io/etcher/releases" | grep -m1 AppImage | cut -d\" -f2 )

  #githubURL is in the variable file f_variables.cfg
  appImageURL=$githubURL$releaseURL


  metaExternalDownload $programName $appImageURL

}


##############################################################################################################
## Java Section start

function javaInstall()
{

  # Note to self: these package names will have to be checked
  case $distroBase in

  arch)
      $install java-runtime-common
  ;;

  fedora)
    # you have to select the package (due to numbering) manually ... this may be tricky
    # I need to boot into Fedora and check myself
    return ;;

  opensuse)
    # source: https://en.opensuse.org/SDB:Installing_Java

    oracleJavaURL="https://javadl.oracle.com/webapps/download/AutoDL?BundleId=238718_478a62b7d4e34b78b671c754eaaf38ab"

    cd $downloadsDir
    mkdir javaInstall
    cd javaInstall

    # this needs to be in quotes for wget and fish
    wget -O javaJRE.rpm $oracleJavaURL

    # install RPM
    sudo rpm -ivh javaJRE.rpm

    # cleanup
    rm *.rpm
    cd ..
    rm javaInstall

    # This just downloads it so far

    ;;

  solus)
    # openjfx-8 ... not just "openjfx"
    $install openjfx-8
    ;;


  esac

  $install $javaPackages

}


function checkForJava()
{
  # JavaDetected

  clear
  echo -e "Checking for Java "

  if  [ "java -version 2>&1 >/dev/null" ]; then

        echo -e "Java is detected"

  else

    echo -e "JRE not detected"
    echo -e "About to install"

    javaInstall

  fi

}

## End of Java section
#######################################################################################


# Metafuntion
function universalSoftwareInstaller {

    #Installs software located in most distro bases
    massSoftwareInstall

    #installs vscode
    vscodeInstall

    #install XNViewMP
    xnViewMPInstall

    # tiny Media Manager install
    tinyMediaManagerInstall

    # etcher install
    etcherInstall


    makeMKVInstall


}