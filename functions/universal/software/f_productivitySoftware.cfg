## Meta Function for Atom
# ?? with Atom being EOL and a fork (not done yet) out ... how do i handle this? 
# ?? Nov 2022 update: gitDownload is not done yet but how can I possibly refactor this for gitDownload 
    ## what would be needed for that function is the file format and name format, based on the distro 
function installAtom() {

  programTitle="Atom Editor"
  programName="atom"
  programHomepage="http://atom.io"
  repoName="atom/atom"

  # Nov 2022: this case statement is (when gitDownload works) going to be simplified 
  case $distroBase in
    debian|ubuntu)
      # curl -L to follow redirects
      atomURL=$(curl -s -L ${releasePage} | awk -F \" '/amd64.deb/ {print $2;exit}') ;;

    fedora|opensuse)
      # curl -L to follow redirects
      atomURL=$(curl -s -L ${releasePage} | awk -F \" '/rpm/ {print $2;exit}') ;;

  esac

  # condense code above
  case $distroBase in
    arch|solus) installApp "atom" ;;

    debian|fedora|opensuse|ubuntu)

      programURL=${githubBaseURL}${atomURL}
      metaExternalDownload $programTitle $programURL ;;
  esac

}

##################################################################################
## VSCode Functions

# WHY is this it's own function?
function refreshInstallVSCode() {
    refreshRepositories

    # install (vs)code
    fancy_message info "Installing ${programTitle}"
    installApp ${programName}

}

# WHAT is going on with the cases of the function name?
function handleVscodeRPMs() {
  # offical instructions: https://code.visualstudio.com/docs/setup/linux

  # 1 - RPM import vscode key
  sudo rpm --import $vscodeKey

  # 2 - Add Key to proper file
  # ?? this needed? ... doublecheck official instructions
  case $distroBase in

    fedora)sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo' ;;

    opensuse) sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ntype=rpm-md\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/zypp/repos.d/vscode.repo' ;;
  esac


  # 3 - I 100% need to know the name of the rpm file for this step
    # update: the instructions, 100% say "code"
  refreshInstallVSCode

}


## Meta VSCode Function
## I should include an option to install the snap

function installVSCode() {
  programTitle="VS Code"
  
  # the official instructions say this should be "code" for Ubuntu deb (debian?), fedora AND opensuse too 
  programName="code"
  programHomepage="https://code.visualstudio.com/"

  vscodeKey="https://packages.microsoft.com/keys/microsoft.asc"


  fancy_message action "Downloading and Installing $programName"

  case $distroBase in

    fedora|opensuse) handleVscodeRPMs ;;

    arch)
        # code is the package name in arch, NOT vscode
        refreshInstallVSCode ;;

    debian|ubuntu)

      if [ "${debgetInstalled}" == "yes" ]; then fancy_message action "Installing ${programName}, with deb-get"; deb-get install ${programName}; userPrompt; return; fi

      # IF deb-get is not installed, do the following

      # test
      vscodeDEBURL="https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"

      packageName="${programName}.deb"
      programURL=$(curl -L -o ${packageName} ${vscodeDEBURL} )

      # May 2022: this because of the "-o ${packageName}" i think ... otherwise i'd use metalExternalDownload for consistency
      # check for gdebi
      installApp "gdebi"

      # install vscode
      sudo gdebi ${packageName}

      # cleanup
      rm ${packageName}
    ;;


    solus)
        # this in the solus repo?
        installApp vscode ;;


  *) fancy_message warn "Issue, installing vscode " ;;

  esac

  ## I had to put the refresh and install back in the if statement due to Solus being "vscode" and not "code" ... any other way I see, other than this revert is just going to be more code THAN the revert

}


######################################################################################
function installTypora()
{
    programName="typora"
    programTitle="Typora"
    programHomepage="https://typora.io/"

    # Universal Apps
    snapName="typora-alanzanattadev"
    snapType="normal"



    # I dont like that the only option is for the snap
    case $distroBase in

      arch|fedora|opensuse|solus|ubuntu)

        installSnapApp $snapType $snapname ;;

    esac

}

#############################################################################
# Gitkraken

function installGitKraken()
{
    programName="gitkraken"
    programTitle="GitKraken"
    programHomepage="https://www.gitkraken.com/"

    # Universal Apps info
    snapName="gitkraken"
    snapType="normal"

    # there is no need to overcomplicate this ...
      ## last i knew ... these URLs is is the same but always the latest DEB or RPM files
    gitKrakenDEBURL="https://release.gitkraken.com/linux/gitkraken-amd64.deb"
    gitKrakenRPMURL="https://release.gitkraken.com/linux/gitkraken-amd64.rpm"

    case $distroBase in

      arch)
        # Downloads from SOurce
        aurAppInstall ${programName} ;;

      debian|ubuntu)

        if [ "${debgetInstalled}" == "yes" ]; then fancy_message action "installing ${programName}, with deb-get"; deb-get install ${programName}; userPrompt; return; fi
        
          programURL=${gitKrakenDEBURL}

          metaExternalDownload ${programTitle} ${programURL}
          return

        ;;

      fedora|opensuse)
        programURL=${gitKrakenRPMURL}

        metaExternalDownload $programTitle $programURL
        return ;;

      solus)
        # Source: https://getsol.us/articles/software/third-party/en/
        sudo eopkg bi --ignore-safety https://raw.githubusercontent.com/getsolus/3rd-party/master/programming/gitkraken/pspec.xml
        sudo eopkg it gitkraken*.eopkg
        sudo rm gitkraken*.eopkg ;;

    esac

}
