## Meta Function for Atom
function installAtom
{

  programTitle="Atom Editor"
  programName="atom"
  programHomepage="http://atom.io"
  latestURL="https://github.com/atom/atom/releases/latest"


  ## If i am not mistake the metaExternalDownload thing will take care of everything
  case $distroBase in
    debian|ubuntu)
      # curl -L to follow redirects
      atomURL=$(curl -s -L "https://github.com/atom/atom/releases/latest" | awk -F \" '/amd64.deb/ {print $2;exit}') ;;

    fedora|opensuse) 
      # curl -L to follow redirects
      atomURL=$(curl -s -L "https://github.com/atom/atom/releases/latest" | awk -F \" '/rpm/ {print $2;exit}') ;;
      
    arch|solus) installApp "atom" ;;

  esac

  # condense code above 
  case $distroBase in 
    debian|fedora|opensuse|ubuntu) 
    
      packageURL=$githubURL$atomURL
      metaExternalDownload $programTitle $packageURL ;;
  esac 

}

##################################################################################
## VSCode Functions

# WHY is this it's own function?
function refreshInstallVSCode()
{
    # refresh/update repo
    echo -e "Refreshing Repos" 
    $refresh

    # install (vs)code
    echo -e "Installing vscode"
    installApp "code"

}


## Meta VSCode Function
## I should include an option to install the snap

function installVSCode()
{
  programTitle="VS Code"
  programName="vscode"
  programHomepage="https://code.visualstudio.com/"

  vscodeKey="https://packages.microsoft.com/keys/microsoft.asc"

  ## If the RPM is needed for Fedora and Suse ... can I combine the two?
  echo "Downloading and Installing $programName"

  case $distroBase in

    opensuse)

      sudo rpm --import $vscodeKey

      sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ntype=rpm-md\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/zypp/repos.d/vscode.repo'

      refreshInstallVSCode ;;


    fedora)

      sudo rpm --import $vscodeKey

      sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

      refreshInstallVSCode ;;

    arch)
        # code is the package name in arch, NOT vscode

        refreshInstallVSCode ;;

    debian|ubuntu)
      packageURL=$(curl -L -o vscode.deb https://go.microsoft.com/fwlink/?LinkID=760868)
  
      # May 2022: this beause of the -o vscode.deb i think ... otherwise i'd use metalExternalDownload for consistency 
      # check for gdebi 
      checkGdebi

      #install vscode
      sudo gdebi vscode.deb 

      rm vscode.deb
      ;;


    solus)
        installApp vscode ;;


  *) echo -e "Issue, installing vscode " ;;

  esac

  ## I had to put the refresh and install back in the if statement due to Solus being "vscode" and not "code" ... any other way I see, other than this revert is just going to be more code THAN the revert

}


######################################################################################
function installTypora()
{
    programName="typora"
    programTitle="Typora"
    programHomepage="https://typora.io/"

    # Universal Apps
    snapName="typora-alanzanattadev"
    snapType="normal"



    # I dont like that the only option is for the snap 
    case $distroBase in

      arch|fedora|opensuse|solus|ubuntu)

        installSnapApp $snapType $snapname ;;

    esac

}

#############################################################################
# Gitkraken

function installGitKraken()
{
    programName="gitkraken"
    programTitle="GitKraken"
    programHomepage="https://www.gitkraken.com/"

    # Universal Apps info
    snapName="gitkraken"
    snapType="normal"

    # there is no need to overcomplicate this ... 
      ## last i knew ... these URLs is is the same but always the latest DEB or RPM files 
    gitKrakenDEBURL="https://release.gitkraken.com/linux/gitkraken-amd64.deb"
    gitKrakenRPMURL="https://release.gitkraken.com/linux/gitkraken-amd64.rpm"

    case $distroBase in

      arch)
        aurAppInstall $programName ;;

      debian|ubuntu)
        packageURL=$gitKrakenDEBURL

        metaExternalDownload $programTitle $packageURL
        return ;;

      fedora|opensuse)
        packageURL=$gitKrakenRPMURL

        metaExternalDownload $programTitle $packageURL
        return ;;

      solus)
        # Source: https://getsol.us/articles/software/third-party/en/
        sudo eopkg bi --ignore-safety https://raw.githubusercontent.com/getsolus/3rd-party/master/programming/gitkraken/pspec.xml
        sudo eopkg it gitkraken*.eopkg
        sudo rm gitkraken*.eopkg ;;

    esac

}
