. $uniFunctionDir/software/multimedia/f_makeMKV.cfg 
. $uniFunctionDir/software/multimedia/f_codecs.cfg

#################################################################################################################

function installXNViewMP()
{
  programTitle="XNView MP"
  programName="xnViewMP"
  programHomepage="https://www.xnview.com/en/xnviewmp/"
  tarballURL="https://download.xnview.com/XnViewMP-linux-x64.tgz"
  appimageURL="https://download.xnview.com/XnView_MP.glibc2.17-x86_64.AppImage"
  
  debURL="https://download.xnview.com/XnViewMP-linux-x64.deb"

  # note to self: other functions move the pwd ... no need for that here 


  echo -e "Downloading " $programTitle" AppImage"
  
  case $distroBase in 

    arch|fedora|opensuse|solus) metaExternalDownload $appimageURL  ;; 

    ubuntu)  metaExternalDownload $debURL ;;

    *) return ;; 

  esac

  # idea: make a function to ask if the user wants appimages to +x automatically (in my scripts), for them
  echo
  echo -e "To run: In your Downloads folder, drop to a terminal and type the code below "
  echo 
  echo -e "sudo chmod +x XnView_MP.glibc2.17-x86_64.AppImage"
  echo 
  echo -e "Then you should be able to run the AppImage from the terminal or click it from your favorite file manager"
  userPrompt
}
############################################################
############################################################

function installDeadbeef()
{
  programName="deadbeef"
  programTitle="DeadBeef Media Player"
  programHomepage="http://deadbeef.sourceforge.net/"
  
  snapName="deadbeef-vs"
  snapType="classic"

  clear 
  echo -e "Installing $programTitle"

  case $distroBase in 

    opensuse|solus|arch) 

        # OpenSuse should be ok (Leap and TW), Solus has this in the repos ... 
        # Fedora and the Ubuntu base is what needs work 
        # Arch should have this without the need for the AUR 

        $install deadbeef ;;

    fedora|ubuntu) 
    
        clear
        echo -e "Installing Deadbeef snap"
        $snapInstallClassic $snapName

        snapConnRemoveMedia $snapName

        echo -e "Deadbeef Snap installed "
    
      ;; 

    *) # The catch-all step
        echo "Deadbeef not installed. You are not (detected to be..) on a supported distro for my scripts" ;; 

  esac 

}  


##########################################
function tinyMediaManagerInstall
{
  ## Note to self: Java has to be installed
  ## I need to put a check/install if not installed thing in for java/jre 

  programTitle="Tiny Media Manager"
  programName="tinyMediaManager"
  programHomepage="https://www.tinymediamanager.org/"
  releaseDomain="http://release.tinymediamanager.org/"
  releaseVersion=$(curl "https://release.tinymediamanager.org/" | grep -m 1 "tar.gz" | cut -d\' -f 2 )
  
  packageURL="$releaseDomain$releaseVersion"

  # Check for Java, as this app can not run without jre/java 
  # Location: f_universalSoftware.cfg file 
  checkForJava

  clear
  
  # Testing message 
  #echo -e "tinyMediaManager packageURL: $packageURL"
 
  metaExternalDownload $programName $packageURL

}
##########################################################################

# Meta Function
function installAudioRecorder()
{
  
  progName="audio-recorder"
  progTitle="Audio Recorder"
  programHomepage=""


  # Universal Apps
  snapName="audio-recorder"
  snapType="edge"

  case $distroBase in 
  
    arch|fedora|solus) 
      
      echo -e "About to install the snap version of "
      installSnapApp $snapName ;; 

    opensuse) 

      # audio-recorder is in the Leap 42.3, Leap 15, and TW repos (not pacman, btw ) 
      $install audio-recorder ;; 

    ubuntu) installAudioRecorderPPA ;;

  esac 
  

}

function installMediaElch
{
    progName="mediaElch"
    progTitle="Media Elch"
    programHomepage="https://www.kvibes.de/mediaelch/"
    
    tarURL=""

    # https://github.com/Komet/MediaElch/releases
    appImageURL="https://github.com/Komet/MediaElch/releases/download/v2.6.0/MediaElch_2.6.0_linux.AppImage"

    case $distroBase in 

        arch|fedora|opensuse|solus|ubuntu)
        
        metaExternalDownload $appImageURL 
        
         ;;

    esac

}