function universalCodecInstall()
{
  clear
  echo -e "Preparing Codecs"
  
  
  if [ "$distroBase" = "arch" ]; then
    $install a52dec faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv \
    wavpack x264 xvidcore gstreamer0.10-plugins libdvdcss libdvdread libdvdnav dvd+rw-tools dvdauthor dvgrab cdrdao

  elif [ "$distroBase" = "fedora" ]; then
    sudo dnf -y groupinstall multimedia
    clear

    # why this too? ... eh well ... leave it for now 
    $install gstreamer1-libav

  elif [ "$distroBase" = "opensuse" ]; then
    echo -e "Filler for now "

  elif [ "$distroBase" = "ubuntu" ]; then
    echo -e "filler for now "

  fi 

  echo -e "Codecs are now installed"
  userPrompt

}

#########################################################################
#########################################################################

function xnViewMPInstall()
{
  programTitle="XNView MP"
  programName="xnViewMP"
  programHomepage=https://www.xnview.com/en/xnviewmp/
  packageURL=https://download.xnview.com/XnViewMP-linux-x64.tgz

    echo -e "Downloading " $programTitle" Tgz file "
    externalDownload $programName $packageURL

    echo -e "To run XNviewMP, go into the extracted folder and run ./xnview.sh"


}


function deadbeefInstall()
{
  programName="deadbeef"
  programTitle="DeadBeef Media Player"
  programHomepage="http://deadbeef.sourceforge.net/"


  # OpenSuse should be ok (Leap and TW), Solus has this in the repos ... 
  # Fedora and the Ubuntu base is what needs work 
  # Arch should have this without the need for the AUR 

    if  [ "$distroBase" = "opensuse" ] || \
        [ "$distroBase" = "solus" ] || \
        [ "$distroBase" = "arch" ]; then
          $install deadbeef 

    elif [ "$distroBase" = 'ubuntu' ]; then
      ## need to install via DEB file ... 
      ## where to get the most legit DEB of this? 
      externalDownload $progName $packageURL

    elif [ "$distroBase" = 'fedora' ]; then

      echo -e "filler"

      # Step 1 - install/check to see if RPM Fusion is installed


      # step 2 - 


    else

       # The catch-all step
       echo "Deadbeef not installed. You are not (detected to be..) on a supported distro for my scripts"
    fi
    
    installApp deadbeef
}

#################################################################



##########################################
## Doesn't matter what distro it is 
function tinyMediaManagerInstall
{
  ## Note to self: Java has to be installed
  ## I need to put a check/install if not installed thing in for java/jre 

  programTitle="Tiny Media Manager"
  programName="tinyMediaManager"
  programHomepage="https://www.tinymediamanager.org/"
  releaseDomain="http://release.tinymediamanager.org/"
  releaseVersion=$(curl "https://release.tinymediamanager.org/" | grep -m 1 "tar.gz" | cut -d\' -f 2 )
  
  packageURL="$releaseDomain$releaseVersion"
  
  # Static URL 
  #packageURL=https://release.tinymediamanager.org/v2/dist/tmm_2.9.16_42413ce_linux.tar.gz

  clear
  echo -e "tinyMediaManager packageURL: $packageURL"
  userPrompt

  #  externalDownload $programName $packageURL

}
##########################################################################



###########################################
# MakeMKV Related

# I shouldn't need to do this here but ... whatever 
function makeMKVFileInfo()
{
  # $1 = URL for current file being downloaded

  fileNameFULL=${1##*/}
  fileName=${fileNameFULL%.tar.gz}

}


function makeMKVOSSInstall()
{

  makeMKVFileInfo $makeMKVOSSURL

  # Download MakeMKV-OSS tarball 
  wget $makeMKVOSSURL

  # Extract and enter directory 
  tar -zxvf $fileNameFULL --one-top-level && cd $fileName

  # compile and install
  clear
  echo -e "Compile MakeMKVOSS"
  ./configure
  
  clear
  echo -e "Make makeMKVOSS"
  make
  
  clear
  echo -e "Install MakeMKVOSS"
  sudo make install



  # Cleanup 
  #cd ..
  #rm -rf $fileName

}

function makeMKVBinInstall()
{

    
    makeMKVFileInfo $makeMKVBinURL
    
    # Download MakeMKVBin tarball 
    wget $makeMKVBinURL
    
    # Extract and enter directory 
    tar -zxvf $fileNameFULL --one-top-level && cd $fileName

    # Make/Make install 
    echo -e "Make MakeMKVBin"
    userPrompt
    make


    echo -e "Install MakeMKVBin"
    sudo make install

    # Cleanup 
    cd .. 
    rm -rf $fileName 


}

# Meta-function 
function makeMKVInstall()
{
  programName="makemkv"
  programTitle="Make MKV"
  programHomepage="http://www.makemkv.com"
  betaKeyURL="https://www.makemkv.com/forum/viewtopic.php?t=1053"

  currentBetaKey=$(curl $betaKeyURL | grep -o -P '(?<=<code>).*(?=</code>)')
  
  # End of this period
  currentBetaKeyExpiration=$(curl "https://www.makemkv.com/forum/viewtopic.php?t=1053" | grep -o -P '(?<=end of).*(?=. Please)')

  makeMKVOSSURL=$(curl "https://www.makemkv.com/forum/viewtopic.php?f=3&t=224" | grep ".tar.gz" | grep "oss" | cut -d "\"" -f 2)
  makeMKVBinURL=$(curl "https://www.makemkv.com/forum/viewtopic.php?f=3&t=224" | grep ".tar.gz" | grep "bin" | cut -d "\"" -f 2)

  #####################################################

  ## Message about the key and the link to the site should be here 
  clear
  echo -e "MakeMKV is free, though every 30 or so days the key changes"
  echo -e "if you are prompted for the key, here is the current info (at script run time) "
  echo 
  echo -e "MakeMKV Beta Key:  ${bold}${fglightred}$currentBetaKey${completeReset}"
  echo -e "This key expires at the end of ${bold}${fglightyellow}$currentBetaKeyExpiration${completeReset}"
  echo

  userPrompt
  # End Debugging 
  
  makeMKVOSSURL=$(curl "https://www.makemkv.com/forum/viewtopic.php?f=3&t=224" | grep ".tar.gz" | grep "oss" | cut -d "\"" -f 2)
  makeMKVBinURL=$(curl "https://www.makemkv.com/forum/viewtopic.php?f=3&t=224" | grep ".tar.gz" | grep "bin" | cut -d "\"" -f 2)


  #####################################################

  # change pwd, to user's Downloads folder 
  cd ~/Downloads

  # Get Build Dependencies 
  if [ "$distroBase" = "ubuntu" ]; then
    echo -e "Install build dependencies for Ubuntu based distros"
    userPrompt
    sudo apt install build-essential pkg-config libc6-dev libssl-dev libexpat1-dev libavcodec-dev libgl1-mesa-dev libqt4-dev zlib1g-dev
  else
    return
  fi 


  if  [ "$distroBase" = "solus" ] || \
        [ "$distroBase" = "fedora" ] || \
        [ "$distroBase" = "arch" ] || \
        [ "$distroBase" = "opensuse" ] || \
        [ "$distroBase" = "ubuntu" ]; then
        
          # Source: https://www.makemkv.com/forum/viewtopic.php?f=3&t=224

          mkdir makeMKVInstall
          cd makeMKVInstall
  
          ## Arch has it in the AUR but since i am going to build it from the offical Tarballs anyway for other distros, I may as well do the same for arch 
      
          clear
          echo -e "get the Tarballs and build "

          echo -e "Compiling and Installing MakeMKVOSS"
          userPrompt
          # makeMKVOSSInstall

          clear
          echo -e "Compiling and Installing MakeMKVBin"
          userPrompt
          makeMKVBinInstall
          

  else
      echo "distroBase not detected" 
  fi 

}