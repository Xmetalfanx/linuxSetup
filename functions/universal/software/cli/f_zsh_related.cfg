##################################################################################
## Start of code for zsh and oh-my-zsh

function installZSHExtras() {
	fancy_message action "Installing a few extras"

	# Extra packages not in openSUSE it seems
	# Nov 2022: what? ... what is the code below doing? ... I think i forgot to finsh this
	case distroBase in

		arch) zsh-completions zsh-syntax-highlighting zsh-autosuggestions ;;
		debian|solus|ubuntu) zsh-syntax-highlighting zsh-autosuggestions ;;

	esac

	fancy_message info "Extras's installed"
}

function installZSH() {
	#installs (all supported distros) JUST zsh
	fancy_message action "Installing zsh shell"
	installApp "zsh"


	fancy_message action "Changing Shell to zsh"
	chsh -s "/usr/bin/zsh"

	userPrompt
}


# Howto: https://linuxhint.com/setup-configure-autocomplete-zsh/
function installGITZSH_autocomplete() {
	fancy_message action "Installing zsh-autocomplete from Git repo"
	git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git

	cd zsh-autocomplete source
	zsh-autocomplete.plugin.zsh
}


function installOhMyZsh() {

	fancy_message action "Installing Oh-My-Zsh"

	# wget
	sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"
}

function installZapPluginManager() {

	# note to self: Official instructions, below
	# zsh && checkLastCommandStatus "zsh is Installed"

	fancy_message action "Installing Zap Plugin Manager for zsh" && zsh <(curl -s https://raw.githubusercontent.com/zap-zsh/zap/master/install.zsh) --branch release-v1 && fancy_message info "Zap Plugin Manager now installed, a restart of your terminal maybe needed" || "ZSH Shell not installed, yet"

	userPrompt

}

# idea: a sort of template function 
function add_zap_plugin() {

	# 1 - check for zsh
	[ ! $(command -v zsh) ] && echo "zsh not found" && return

	# not sure why "command -v zap" doesn't return the expected result ... i rather use that
	# 2 - check for zap plugin manager
	[ ! -f "/home/$USER/.local/share/zap/zap.zsh" ] && echo "zap, zsh plugin manager, not found" && userPrompt && return

	# 3 - check for line in zshrc (I dont want to readd it )
		# if it starts with "plug", than any characters then the (passed to this function), plugin_name
	[ "$(grep -e "^plug.*${plugin_name}" ${zsh_config_file} )" ] && echo "zap ${plugin_name} line already detected" && userPrompt && return

	# 4- get last line startig with "plug" (so i can append to the end of it)
	last_plugin_line=$(awk '/^plug/ { print NR }' ${zsh_config_file} | tail -n 1)

	#append after the last line
	sed -i "${last_plugin_line} a plug \"${plugin_name}\" " ${zsh_config_file} && fancy_message info "zap sudo line added to zsh config file" && userPrompt
}

function zap_sudo_plugin() {

	plugin_name="zap-zsh/sudo"

	add_zap_plugin "${plugin_name}"

}