# What i need to know?
    # Shortcut name (what is in front of ".Desktop") ?


#########################################################

# function to move third party app (tarballs, not really debs or rpm files) to a "Programs" folder
function moveToProgramsFolder()
{
    clear 
    
    # Check if ~/Programs exists, and if not, create it
    if [ -d "$programDir" ]; then
        echo -e "$programDir already exists"
    else
        echo -e "$programDir does not already exist, creating directory to store third party apps"
        mkdir $programDir
        echo -e "Program directory create.  The location is in your user's Home folder as \"Programs\" "

    fi




    # check here to see if destination A) Exists B) is empty
    if [ -d "$programDir/$progName" ] && [ -z "$(ls -A $programDir/$progName)" ]; then
        # Destination exists and IS EMPTY 
        echo -e "$programDir/$progName already exists, and is empty "
        echo
        echo -e "Moving $progName/ to $programDir"
        cp $progName/ $programDir

        clear

        userPrompt
    elif [ ! -d "$programDir/$progName" ]; then
            echo -e "$programDir/$progName does not exist"

            # Create the directory
            mkdir $programDir/$progName

    elif [ ! -z "$(ls -A $programDir/$progName)" ]; then
        echo -e "$programDir/$progName is not empty" 

    fi

    # Pause for debugging
    userPrompt

}

function customizeMenuFile()
{
    
    # Thought: there HAS TO BE a way to make this one step vs calling this function twice
    # Idea: "$1" is the first part of the .desktop file entry I want to add,
        # The second var pasted 

    # Example idea 
    # $1=/Home/$USER/$programDir/$progName/$iconFile
    # $1=/Home/$USER/$programDir/$progName/$execFile

    #programDir and $progName stay as vars ... no need to change 

    ## I need a check to make sure the entry doesn't already exist 
    if [ -z $(grep "$1" $xmetalScriptsRoot/menu/$menuFile) ]; then
        echo "$1=$Home/$programDir/$progName/$2" >> $xmetalScriptsRoot/menu/$menuFile

    else 
        # i will not output this ... this output is for debugging
        echo -e "$1 entry already in .desktop file "
        userPrompt
    fi 


}


## Customize Icon and EXEC line

function menuItemAddition()
{

    clear

    # Here the program HAS been moved to ~/Programs/, already 

    # Icon related
    customizeMenuFile "Icon" "$iconFile"
    # Exec line related
    customizeMenuFile "Exec" "$execFile"

    cat $xmetalScriptsRoot/menu/$menuFile
    userPrompt
    
    
    ## At this point the program should be in it's proper directory in ~/Programs/
    echo -e "Creating Menu Item, for $progTitle"

    # Moving .Desktop "Menu"file, to correct folder
    # sudo is needed due to the permission of the destination folder
    # menuDir declared in f_variable file

    # Moves .desktop file to correct directory
    sudo cp $xmetalScriptsRoot/menu/$menuFile $menuDir

    # Install .desktop file
    sudo desktop-file-install $xmetalScriptsRoot/menu/$menuFile

    sudo update-desktop-database

    # note to self: the icon may be in the same dir ... forget that "for now"
    echo -e "Menu entry created for $progTitle"
    userPrompt

}

function menuItemRemoval()
{
    echo -e "Removing Menu Item for $1"


    echo -e "Menu Entry for $1 removed"

}

## Meta function?
function customMenuItemChoice()
{

    echo
    echo -e "Do you want to Add or Remove a Menu entry for $1?"
    echo -e "(A) Add Memu item"
    echo -e "(R) Remove Menu Item"

    read -p "(A/R): " custoMenuChoice

    case $custoMenuChoice in

        [aA])

        menuItemAddition ;;

        [rR]) menuItemRemoval ;;

    esac

}