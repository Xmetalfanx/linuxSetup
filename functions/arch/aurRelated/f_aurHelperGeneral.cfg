# Displays AURHelper var to the user telling them what they would use
function aurHelperDisplay() {
	fancy_message info "aurHelper at this point is: ${aurHelper}" && userPrompt
}

function createArchSettingsFile() {
	# check for the "settings dir" create it if it doesn't exist (touch has errors if it doesn't )
	checkDirExits "${settingsDir}"

  # if the arch settings file doesn't exist, create it
  [ ! -f "${archSettingsFile}" ] && fancy_message "Creating Arch config file" && touch "${archSettingsFile}"

}



# may 2022 update: change the name of this perhaps
  # assignAURHelperUpdateVer
function assignAURHelperVars() {

  case ${aurHelper} in

    trizen) aurUpdate="trizen -Su" ;;

    yay)
      # --norebuild = do not rebuild if already built and cache is up to date
      # nodiffmenu = Don't show diffs for build files
      # upgrademenu = Show a detailed list of updates with the option to skip any
      # noeditmenu = Don't edit/view PKGBUILDS
      aurUpdate="yay -Syu --norebuild --nodiffmenu --upgrademenu --noeditmenu"

      ;;

  esac

	# only creates the file
  	createArchSettingsFile

  # Export/Save aurHelper value to arch config file
	fancy_message action "Adding aurHelper var to Arch Settings file "
  	echo -e "aurHelper=${aurHelper}" > $archSettingsFile

  	aurHelperDisplay

}

## Function to determine if an AUR Helper is installed
  ## it could be installed and just not set in my arch config file
function isAURHelperInstalled() {

	# do i need to put a "is the aurHelper var set?" check here?

    # IF both are installed
    if  [ -f /usr/bin/yay ] && \
        [ -f /usr/bin/trizen ]; then

        fancy_message info "trizen and yay are both installed"
        userPrompt

        # Check what the user wants to do
        aurChoiceMenuType

    ## if it gets to this step or the next ELIF
    elif [ -f /usr/bin/trizen ]; then

      	aurHelper="trizen"
		fancy_message info "${aurHelper} detected"
      	assignAURHelperVars

    elif [ -f /usr/bin/yay ]; then

    	aurHelper="yay"
		fancy_message info "${aurHelper} detected"
    	assignAURHelperVars

    # if NEITHER is installed
    elif  [ ! -f /usr/bin/yay ] && \
          [ ! -f /usr/bin/trizen ]; then

        fancy_message info "Neither trizen or yay detected "
        userPrompt

        #lets the user choose what is default (this installs an aurhelper)
        aurChoiceMenuType

    fi


    ### Install using AURHelper Trizen or yay
    # the same for trizen or yay

    aurInstall="${aurHelper} -S $@"
}

function AURHelperCheck() {

    # If aurHelper is not set (not in an existing arch settings file for example)
		# then, check to see if there is an aurHelper installed anyway
	[ -z ${aurHelper+x} ] && isAURHelperInstalled

}

###################################################################
# this is the Meta package
## CALL THIS when installing from the AUR
function aurAppInstall() {

    # Check for aurHelper var - This controls if yay or trizen is used
    AURHelperCheck

	# $@ = package name
    #install based on aurHelper
    $aurHelper -S $@

}