# Displays AURHelper var to the user telling them what they would use
function aurHelperDisplay()
{

	fancy_message info "aurHelper at this point is: ${currentAURHelper}"
	userPrompt

}

# If  one exists, reads on Arch config file
# this is a custom file that i created to store the desired aur helper info
function readArchSettings()
{
	fancy_message action "Reading Arch settings file"


	if  [ -f $archSettingsFile ]; then
		# old way 
    # currentAURHelper=$(grep "aurHelper" $archSettingsFile | cut -d = -f 2 | xargs)

    currentAURHelper=$(awk -F \= ' {print $2 } ' $archSettingsFile)

		aurHelperDisplay "${currentAURHelper}"

	else
		# no arch config file
		fancy_message info "no Arch Config file detected"

	fi
}

# may 2022 update: change the name of this perhaps
  # assignAURHelperUpdateVer
function assignAURHelperVars()
{
  case $aurHelper in

    trizen)
      # not 100% sure on this being totally correct
      aurUpdate="trizen -Su"
      ;;

    yay)
      # --norebuild = do not rebuild if already built and cache is up to date
      # nodiffmenu = Don't show diffs for build files
      # upgrademenu = Show a detailed list of updates with the option to skip any
      # noeditmenu = Don't edit/view PKGBUILDS
      aurUpdate="yay -Syu --norebuild --nodiffmenu --upgrademenu --noeditmenu"

      ;;

  esac

}

# Export/Save aurHelper value to arch config file
function exportAURHelper()
{
  # if the arch settings file doesn't exist, create it 
  if [ ! -f "${archSettingsFile}" ]; then
    touch $archSettingsFile
  fi

  echo -e "aurHelper=${aurHelper}" > $archSettingsFile
}


## Function to determine if an AUR Helper is installed
function isAURHelperInstalled()
{

    # IF both are installed
    if  [ -f /usr/bin/yay ] && \
        [ -f /usr/bin/trizen ]; then

        # Check what the user wants to do

        fancy_message info "trizen and yay are both installed"
        userPrompt

        #lets the user choose what is default
        aurChoiceMenuType

    ## if it gets to this step or the next ELIF
    elif [ -f /usr/bin/trizen ]; then

      fancy_message info "Trizen detected"
      aurHelper="trizen"
      assignAURHelperVars

    elif [ -f /usr/bin/yay ]; then

	    fancy_message info "yay detected"
      aurHelper="yay"
      assignAURHelperVars

    # if NEITHER is installed
    elif  [ ! -f /usr/bin/yay ] && \
          [ ! -f /usr/bin/trizen ]; then

        fancy_message info "Neither trizen or yay detected "
        userPrompt

        #lets the user choose what is default
        aurChoiceMenuType

        aurHelperDisplay
    fi


    ### Install using AURHelper Trizen or yay
    # the same for trizen or yay

    aurInstall="${aurHelper} -S $@"
}

function AURHelperCheck()
{
    ## ?? wait .... shouldn't this be in a more generic location?
    readArchSettings

    # If aurHelper is not set, check to see if there is an aurHelper installed anyway
    if  [ -z ${aurHelper+x} ]; then

      isAURHelperInstalled

    fi

}

###################################################################
# this is the Meta package
## CALL THIS when installing from the AUR
function aurAppInstall()
{
    ## $@ = package name
    ## one of the two can accept mutiple vars (to install at the same time ... can both? )

    # Check for aurHelper var
        # This controls if yay or trizen is used
    AURHelperCheck

    #install based on aurHelper
    $aurHelper -S $@

}