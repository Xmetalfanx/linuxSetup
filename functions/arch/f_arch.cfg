##########################################
# Functions to install AUR Helpers

function installYAY()
{
  # yay commands seem to be very similar to pacman's 
  gitRepoName="yay"
  gitURL="https://aur.archlinux.org/yay.git"

  clear
  echo -e "Installing $gitRepoName"
  archGitInstall $gitRepoName $gitURL 

}

function installTrizen
{
  # Source: https://github.com/trizen/trizen
  gitRepoName="trizen"
  gitURL="https://aur.archlinux.org/trizen.git"


  clear
  echo -e "Installing $gitRepoName"
  archGitInstall $gitRepoName $gitURL 

}

# Possible issue wih the echo statements above ... I could already have similar echo statements in the archGitInstall function 



# End of AUR Helper Installation functions 
############################################################


function AURHelperCheck
{
  # The idea is if aurhelper IS SET there is no reason to go through all of this 
  # reference/help: https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
  
  ## ?? I think "is not set or is set and blank" ?? ... that's the idea anyway 
  if  [ -z ${aurHelper+x} ]; then
    
    # IF both are installed 
    if  [ -f /usr/bin/yay ] && \
        [ -f /usr/bin/trizen ]; then 

      # Check what the user wants to do
      # update: return where? 


      echo -e "trizen and yay are both installed"
      userPrompt
      userChoiceAURHelperMenu

    
    # this doesn't make sense IF BOTH are installed 
    elif [ -f /usr/bin/trizen ]; then 
      aurHelper="trizen"

      echo -e "Trizen is installed"
    

    elif [ -f /usr/bin/yay ]; then
      aurHelper="yay"

      echo -e "yay is installed"

    elif  [ ! -f /usr/bin/yay ] && \
          [ ! -f /usr/bin/trizen ]; then   
    
        echo -e "Neither trizen or yay detected "
        userPrompt

        userChoiceAURHelperMenu
    
    fi

    # Moved out here since it's the same for trizen or yay 
    aurInstall="$aurHelper -S $1" 

    #################################
    ### Test only 
    echo -e "aurInstall: $aurInstall"
    userPrompt
    #######################3


  fi 
}


# End of AUR Support related 
##################################################################################

function aurAppInstall
{
  ## What gets passed? 
  ## $1 = package name
  ## one of the two can accept mutiple vars (to install at the same time ... can both? )
  
  # Check for aurHelper var 
  AURHelperCheck

  #install based on aurHelper
  $aurInstall $1 

}






##################################################################################
# Misc Functions 

function archiveSupport()
{

  clear
  echo "Adding Archive Support to Arch "

  ## A way to detected the DE is needed and and if/then loop below should work 

    $install zlib p7zip unzip zip zziplib

    # 2019: use something other then yaourt 
      # yaourt -S engrampa-thunar

    # for the cinnamon desktop use
    # $install nemo-fileroller

    # for Gnome Desktop
    # $install file-roller

}


function soundSupport()
{

  ## Volume settings
  clear
  echo -e "Adding Sound Support to Arch"

  ## Volume settings

  ### "For XFCE"
  $install pavucontrol pulseaudio-alsa

  # For keyboard volume buttom usage
  yaourt -S xfce4-volumed

  echo "VolumeD settings will take effect after a reboot"

}

#################################
function installVirtualBox()
{

    clear
    echo -p "Installing VirtualBox"
    
    ## Hold on ... shouldn't archPacInstall be installApp 

    $install virtualbox virtualbox-host-dkms virtualbox-host-modules
    yaourt -S virtualbox-ext-oracle

    echo -p "\n\n Modprobing the Virtualbox Driver"
    sudo modprobe vboxdrv

    echo -p "Giving User Permissions to use features in Virtualbox"
    sudo gpasswd -a $USER vboxusers


    # To load the VirtualBox module at boot time, refer to Kernel_modules#Loading and create a *.conf with the line:
    # vboxdrv

    # in location
    # /etc/modules-load.d/virtualbox.conf

}

# End Misc Functions
###################################################
