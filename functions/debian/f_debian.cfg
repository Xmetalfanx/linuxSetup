######################################################################
function debianAddUsefulPackages() {

    # some of the extra packages listed are for if "apt-add-repo... " is not working; THIS is needed to add (via scripts)
    packages="synaptic apt-xapian-index policykit-1-gnome software-properties-common dirmngr apt-transport-https lsb-release ca-certificates apt-transport-https dirmngr"

    clear
    fancy_message action "Adding ${packages}"
	userPrompt
    # using installApp here will check and ask ONE BY ONE .. not what i want here
    install "${packages}"

	clear

}

# Think I found this in a guide
# the check doesn't seem right ... even if i am not getting errors i am not sure this is right-
function debianAddSudoToUser() {
    clear
    checkSudoForUser=$(grep "${USER}" /etc/passwd)

    # if not empty
    if [[ -n "${checkSudoForUser}" ]]; then
        echo -e "It appears ${bold}$USER ${completeReset}already has sudo permissions"
    else
        fancy_message action "Adding sudo permissions to ${USER}"
        adduser ${USER} sudo

        echo -e "${USER} now should have sudo permissions"
    fi

    userPrompt

}


###############################################################################
function set_source_file_vars(){
    # ? in a source.list.d sub-folder?
    sources_file="/etc/apt/sources.list"
    sources_list_originalBackup=${sources_file}".original_backup"
    sources_list_backup=${sources_list}".backup"
    tmp_sources_list_file=${sources_list}".tmp"
}

function backup_sources_list_file() {

    # backup original file if it doesn't exist.
    # if it does, it should not run this code
    [ ! -f ${sources_list_originalBackup} ] && fancy_message action "Backing up Apt source file" && sudo cp "${sources_file}" "${sources_list_originalBackup}" && userPrompt && return

    # if the backup NOT related to the original (first backup) doesn't exist create it
    [ ! -f ${sources_list_backup} ] && fancy_message action "Backing up Apt source file" && sudo cp "${sources_file}" "${sources_list_backup}" && userPrompt
}

# to check and add component line if needed
function add_component_to_sourcelist() {
    # just to be clear
    component="${1}"

    componentExists=$(sed -n "/^deb.*${component}/p" ${sources_file} )

    # if zero, meaning component doesn't exist in the line 
	[ -z "${componentExists}" ] && sudo sed -ir "/^deb/ s/$/ ${component}/g" ${sources_file}

}

# "Meta" function
function sourceListAdd() {
    # sets variables
    set_source_file_vars

    # backs up sources.list file
    backup_sources_list_file

    # clear possible spaces at end lines in source.list
    echo -e "trimming possible spaces at end of source file lines"
    sudo sed -i 's/[[:blank:]]*$//g' ${sources_file}
    sleep 2

    fancy_message action "Checking for and Adding components to source.list file, if needed"
    add_component_to_sourcelist "contrib"
    add_component_to_sourcelist "non-free-firmware"
    add_component_to_sourcelist "non-free"

    fancy_message action "Refreshing/Updating Repos"
    $refresh

}

############################################
# sort of a meta function
function debianContribAndNonFreeCheck() {

    # adds contrib and non-free (if needed) to source list
    sourceListAdd

    userPrompt

}

############################################################################

# Add Firmware related packages
function debianLinuxFirmmare() {
    # needs non-free and contrib
	debianContribAndNonFreeCheck

	clear
    fancy_message action "Installing Firmware related packages"
    installApp "gdebi firmware-linux-free firmware-linux-nonfree"

    userPrompt
}

# Add archive support
# issue: different DE's do better with different "archive" packages
function debianArchiveSupport() {
    # needs non-free and contrib
	debianContribAndNonFreeCheck

	installApp "file-roller rar unrar"
}


#################################################

function batchDebianTasks() {

    optimizeRepo

    debianAddUsefulPackages

    # Add Archive support
    debianArchiveSupport

    # Add Firmware packages
    debianLinuxFirmmare

}
