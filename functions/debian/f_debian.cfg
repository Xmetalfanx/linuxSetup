######################################################################
function debianAddUsefulPackages() {

    # some of the extra packages listed are for if "apt-add-repo... " is not working; THIS is needed to add (via scripts)
    packages="synaptic apt-xapian-index policykit-1-gnome software-properties-common dirmngr apt-transport-https lsb-release ca-certificates apt-transport-https dirmngr"

    clear
    fancy_message action "Adding ${packages}"
	userPrompt
    # using installApp here will check and ask ONE BY ONE .. not what i want here
    install "${packages}"

	clear

}

# Think I found this in a guide
# the check doesn't seem right ... even if i am not getting errors i am not sure this is right-
function debianAddSudoToUser() {
    clear
    checkSudoForUser=$(grep "${USER}" /etc/passwd)

    # if not empty
    if [[ -n "${checkSudoForUser}" ]]; then
        echo -e "It appears ${bold}$USER ${completeReset}already has sudo permissions"
    else
        fancy_message action "Adding sudo permissions to ${USER}"
        adduser ${USER} sudo

        echo -e "${USER} now should have sudo permissions"
    fi

    userPrompt

}


###############################################################################
function backupSourceFile() {
    # ? in a source.list.d sub-folder?
    source_file="/etc/apt/source.list"
    source_temp_file=${source_file}".tmp"
    # named this way to no override a prior backup that maybe there already
    my_source_backup="/etc/apt/source.list.xmetalBackup"

    [ ! -f my_source_backup ] && fancy_message action "Backing up Apt source file" && sudo cp ${source_file} ${my_source_backup} && userPrompt
}


function sourceListAdd() {
    backupSourceFile

    # clear possible spaces at end lines in source.list
    echo -e "clearing possible spaces"
    sed -i 's/[[:blank:]]*$//g' ${source_file}
    sleep 2

    fancy_message action "Checking for and Adding Repos if needed"
    # 1 - if it starts with "deb" AND
    # 2 - if "contrib non-free" doesn't exist in the line already, add it at the end
    awk '/^deb/ && $0 !~ "contrib non-free" {print $0 " contrib non-free"}' $(source_file) > ${source_temp_file}

    ## note to self: the cp or mv's here may need sudo
    # if ${source_temp_file} is there but NOT blank, then move it
    [ -s ${source_temp_file} ] && sudo mv ${source_temp_file} ${source_file}

    # cleanup temp file if it still exists
    fancy_message action "Cleaning up temp source file if it exists"
    [ -f ${source_temp_file} ] && sudo rm ${source_temp_file}

}

############################################
# sort of a meta function
function debianContribAndNonFreeCheck() {

    # adds contrib and non-free (if needed) to source list
    sourceListAdd

    # put here so it only runs ONCE
	debianAddUsefulPackages
}

############################################################################

# Add Firmware related packages
function debianLinuxFirmmare() {
    # needs non-free and contrib
	debianContribAndNonFreeCheck

	clear
    fancy_message action "Installing Firmware related packages"
    installApp "gdebi firmware-linux-free firmware-linux-nonfree"

    userPrompt
}

# Add archive support
# issue: different DE's do better with different "archive" packages
function debianArchiveSupport() {
    # needs non-free and contrib
	debianContribAndNonFreeCheck

	installApp "file-roller rar unrar"
}


#################################################

function batchDebianTasks() {

    optimizeRepo

    debianAddUsefulPackages

    # Add Archive support
    debianArchiveSupport

    # Add Firmware packages
    debianLinuxFirmmare

}
