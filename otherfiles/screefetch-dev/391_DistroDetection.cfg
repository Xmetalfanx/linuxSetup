
#########################
# Begin Detection Phase
#########################

# Distro Detection - Begin
detectdistro () {
	local distro_detect=""
	if [[ -z "${distro}" ]]; then
		distro="Unknown"
		# LSB Release or MCST Version Check
		if [[ -e "/etc/mcst_version" ]]; then
			distro="OS Elbrus"
			distro_release="$(tail -n 1 /etc/mcst_version)"
		elif type -p lsb_release >/dev/null 2>&1; then
			# read distro_detect distro_release distro_codename <<< $(lsb_release -sirc)
			#OLD_IFS=$IFS
			#IFS=" "
			#read -r -a distro_detect <<< "$(lsb_release -sirc)"
			#IFS=$OLD_IFS
			#if [[ ${#distro_detect[@]} -eq 3 ]]; then
			#	distro_codename=${distro_detect[2]}
			#	distro_release=${distro_detect[1]}
			#	distro_detect=${distro_detect[0]}
			#else
			#	for i in "${!distro_detect[@]}"; do
			#		if [[ ${distro_detect[$i]} =~ ^[[:digit:]]+((.[[:digit:]]+|[[:digit:]]+|)+)$ ]]; then
			#			distro_release=${distro_detect[$i]}
			#			distro_codename=${distro_detect[*]:$((i+1))}
			#			distro_detect=${distro_detect[*]:0:${i}}
			#			break 1
			#		elif [[ ${distro_detect[$i]} =~ [Nn]/[Aa] || ${distro_detect[$i]} == "rolling" ]]; then
			#			distro_release=${distro_detect[$i]}
			#			distro_codename=${distro_detect[*]:$((i+1))}
			#			distro_detect=${distro_detect[*]:0:${i}}
			#			break 1
			#		fi
			#	done
			#fi
			distro_detect="$(lsb_release -si)"
			distro_release="$(lsb_release -sr)"
			distro_codename="$(lsb_release -sc)"
			case "${distro_detect}" in
				"archlinux"|"Arch Linux"|"arch"|"Arch"|"archarm")
					distro="Arch Linux"
					distro_release="n/a"
					if [ -f /etc/os-release ]; then
						os_release="/etc/os-release";
					elif [ -f /usr/lib/os-release ]; then
						os_release="/usr/lib/os-release";
					fi
					;;
				"BunsenLabs")
					distro=$(source /etc/lsb-release; echo "$DISTRIB_ID")
					distro_release=$(source /etc/lsb-release; echo "$DISTRIB_RELEASE")
					distro_codename=$(source /etc/lsb-release; echo "$DISTRIB_CODENAME")
					;;
				"Debian")
					if [[ -f /etc/crunchbang-lsb-release || -f /etc/lsb-release-crunchbang ]]; then
						distro="CrunchBang"
						distro_release=$(awk -F'=' '/^DISTRIB_RELEASE=/ {print $2}' /etc/lsb-release-crunchbang)
						distro_codename=$(awk -F'=' '/^DISTRIB_DESCRIPTION=/ {print $2}' /etc/lsb-release-crunchbang)
					elif [[ -f /usr/bin/pveversion ]]; then
						distro="Proxmox VE"
						distro_more="$(/usr/bin/pveversion | grep -oP 'pve-manager\/\K\d+\.\d+')"
					elif [[ -f /etc/os-release ]]; then
						if grep -q -i 'Raspbian' /etc/os-release ; then
							distro="Raspbian"
							distro_release=$(awk -F'=' '/^PRETTY_NAME=/ {print $2}' /etc/os-release)
						elif grep -q -i 'BlankOn' /etc/os-release ; then
							distro='BlankOn'
							distro_release=$(awk -F'=' '/^PRETTY_NAME=/ {print $2}' /etc/os-release)
						else
							distro="Debian"
						fi
					else
						distro="Debian"
					fi
					;;
				"elementary"|"elementary OS")
					distro="elementary OS"
					;;
				"KaOS"|"kaos")
					distro="KaOS"
					;;
				"Fuduntu")
					distro="Fuduntu"
					distro_codename=null
					;;
				"Fux")
					distro="Fux"
					distro_codename=null
					;;

					case $ACCEPT_KEYWORDS in
						[a-z]*) distro_release=stable       ;;
						~*)     distro_release=testing      ;;
						'**')   distro_release=experimental ;; #experimental usually includes git-versions.
					esac
					;;
				"LinuxDeepin")
					distro="LinuxDeepin"
					distro_codename=null
					;;
				"Kali"|"Debian Kali Linux")
					distro="Kali Linux"
					if [[ "${distro_codename}" =~ "kali-rolling" ]]; then
						distro_codename="n/a"
						distro_release="n/a"
					fi
					;;
				"neon"|"KDE neon")
					distro="KDE neon"
					distro_codename="n/a"
					distro_release="n/a"
					if [[ -f /etc/issue ]]; then
						if grep -q '^KDE neon' /etc/issue ; then
							distro_release="$(grep '^KDE neon' /etc/issue | cut -d ' ' -f3)"
						fi
					fi
					;;
				"LinuxMint")
					distro="Mint"
					if [[ "${distro_codename}" == "debian" ]]; then
						distro="LMDE"
						distro_codename="n/a"
						distro_release="n/a"
					#adding support for LMDE 3	
					elif [[ "$(lsb_release -sd)" =~ "LMDE" ]]; then
						distro="LMDE"	
					fi
					;;
				"openSUSE"|"openSUSE project"|"SUSE LINUX" | "SUSE")
					distro="openSUSE"
					if [ -f /etc/os-release ]; then
					fi
					if [[ "${distro_codename}" == "Tumbleweed" ]]; then
						distro_release="n/a"
					fi
					;;

				"Parrot"|"Parrot Security")
					distro="Parrot Security"
					;;
				"PCLinuxOS")
					distro="PCLinuxOS"
					distro_codename="n/a"
					distro_release="n/a"
					;;
				"Peppermint")
					distro="Peppermint"
					distro_codename=null
					;;
				"rhel")
					distro="Red Hat Enterprise Linux"
					;;
				"RosaDesktopFresh")
					distro="ROSA"
					distro_release=$(grep 'VERSION=' /etc/os-release | cut -d ' ' -f3 | cut -d "\"" -f1)
					distro_codename=$(grep 'PRETTY_NAME=' /etc/os-release | cut -d ' ' -f4,4)
					;;

				"Sparky"|"SparkyLinux")
					distro="SparkyLinux"
					;;
				"Ubuntu")
					for each in "${ubuntu_codenames[@]}"; do
						if [[ "${each,,}" =~ "${distro_codename,,}" ]]; then
							distro_codename="$each"
						fi
					done
					;;


				"Zorin")
					distro="Zorin OS"
					distro_codename=""
					;;
				*)
					if [ "x$(printf "${distro_detect}" | od -t x1 | sed -e 's/^\w*\ *//' | tr '\n' ' ' | grep 'eb b6 89 ec 9d 80 eb b3 84 ')" != "x" ]; then
						distro="Red Star OS"
						distro_codename="n/a"
						distro_release=$(printf "${distro_release}" | grep -o '[0-9.]' | tr -d '\n')
					else
						distro="${distro_detect}"
					fi
					;;
			esac

		fi

		# Existing File Check
		if [ "$distro" == "Unknown" ]; then
		
			if [[ "${distro}" == "Unknown" ]]; then
				if [ -f /etc/os-release ]; then
					os_release="/etc/os-release";
				elif [ -f /usr/lib/os-release ]; then
					os_release="/usr/lib/os-release";
				fi
				if [[ -n ${os_release} ]]; then
					distrib_id=$(<${os_release});
					for l in $distrib_id; do
						if [[ ${l} =~ ^ID= ]]; then
							distrib_id=${l//*=}
							distrib_id=${distrib_id//\"/}
							break 1
						fi
					done
					if [[ -n ${distrib_id} ]]; then
						if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
							distrib_id=$(for i in ${distrib_id}; do echo -n "${i^} "; done)
							distro=${distrib_id% }
							unset distrib_id
						else
							distrib_id=$(for i in ${distrib_id}; do FIRST_LETTER=$(echo -n "${i:0:1}" | tr "[:lower:]" "[:upper:]"); echo -n "${FIRST_LETTER}${i:1} "; done)
							distro=${distrib_id% }
							unset distrib_id
						fi
					fi

					# Hotfixes
                    [[ "${distro}" == "Opensuse-tumbleweed" ]] && distro="openSUSE" && distro_more="Tumbleweed"
					[[ "${distro}" == "Opensuse-leap" ]] && distro="openSUSE"
					[[ "${distro}" == "void" ]] && distro="Void Linux"
					[[ "${distro}" == "evolveos" ]] && distro="Evolve OS"
					[[ "${distro}" == "Sulin" ]] && distro="Sulin"
					[[ "${distro}" == "antergos" ]] && distro="Antergos"
					[[ "${distro}" == "logos" ]] && distro="Logos"
					[[ "${distro}" == "Arch" || "${distro}" == "Archarm" || "${distro}" == "archarm" ]] && distro="Arch Linux"
					[[ "${distro}" == "elementary" ]] && distro="elementary OS"
					[[ "${distro}" == "Fedora" && -d /etc/qubes-rpc ]] && distro="qubes" # Inner VM
					[[ "${distro}" == "Ol" || "${distro}" == "ol" ]] && distro="Oracle Linux"
					if [[ "${distro}" == "Oracle Linux" && -f /etc/oracle-release ]]; then
						distro_more="$(sed 's/Oracle Linux //' /etc/oracle-release)"
					fi

					[[ "${distro}" == "Neon" ]] && distro="KDE neon"
					[[ "${distro}" == "SLED" || "${distro}" == "sled" || "${distro}" == "SLES" || "${distro}" == "sles" ]] && distro="SUSE Linux Enterprise"
					if [[ "${distro}" == "SUSE Linux Enterprise" && -f /etc/os-release ]]; then
						distro_more="$(awk -F'=' '/^VERSION_ID=/ {print $2}' /etc/os-release | tr -d '"')"
					fi
					if [[ "${distro}" == "Debian" && -f /usr/bin/pveversion ]]; then
						distro="Proxmox VE"
						distro_more="$(/usr/bin/pveversion | grep -oP 'pve-manager\/\K\d+\.\d+')"
					fi
				fi
			fi

			if [[ "${distro}" == "Unknown" && "${OSTYPE}" =~ "linux" && -f /etc/lsb-release ]]; then
				LSB_RELEASE=$(</etc/lsb-release)
				distro=$(echo "${LSB_RELEASE}" | awk 'BEGIN {
					distro = "Unknown"
				}
				{
					if ($0 ~ /[Uu][Bb][Uu][Nn][Tt][Uu]/) {
						distro = "Ubuntu"
						exit
					}
					else if ($0 ~ /[Mm][Ii][Nn][Tt]/ && $0 ~ /[Dd][Ee][Bb][Ii][Aa][Nn]/) {
						distro = "LMDE"
						exit
					}
					else if ($0 ~ /[Mm][Ii][Nn][Tt]/) {
						distro = "Mint"
						exit
					}
				} END {
					print distro
				}')
			fi

			if [[ "${distro}" == "Unknown" ]] && [[ "${OSTYPE}" =~ "linux" || "${OSTYPE}" == "gnu" ]]; then
				for di in arch chakra crunchbang-lsb evolveos exherbo fedora \
							frugalware fux gentoo kogaion mageia obarun oracle \
							pardus pclinuxos redhat redstar rosa SuSe; do
					if [ -f /etc/$di-release ]; then
						distro=$di
						break
					fi
				done
				if [[ "${distro}" == "crunchbang-lsb" ]]; then
					distro="Crunchbang"
				elif [[ "${distro}" == "gentoo" ]]; then
					grep -q -i 'Funtoo' /etc/gentoo-release && distro="Funtoo"
				elif [[ "${distro}" == "mandrake" ]] || [[ "${distro}" == "mandriva" ]]; then
					grep -q -i 'PCLinuxOS' /etc/${distro}-release && distro="PCLinuxOS"
				elif [[ "${distro}" == "fedora" ]]; then
					grep -q -i 'Korora' /etc/fedora-release && distro="Korora"
					grep -q -i 'BLAG' /etc/fedora-release && distro="BLAG" && distro_more="$(head -n1 /etc/fedora-release)"
				elif [[ "${distro}" == "oracle" ]]; then
					distro_more="$(sed 's/Oracle Linux //' /etc/oracle-release)"
				elif [[ "${distro}" == "SuSe" ]]; then
					distro="openSUSE"
					if [ -f /etc/os-release ]; then
						if grep -q -i 'SUSE Linux Enterprise' /etc/os-release ; then
							distro="SUSE Linux Enterprise"
							distro_more=$(awk -F'=' '/^VERSION_ID=/ {print $2}' /etc/os-release | tr -d '"')
						fi
					fi
					if [[ "${distro_more}" =~ "Tumbleweed" ]]; then
						distro_more="Tumbleweed"
					fi
				elif [[ "${distro}" == "redstar" ]]; then
					distro_more=$(grep -o '[0-9.]' /etc/redstar-release | tr -d '\n')
				elif [[ "${distro}" == "redhat" ]]; then
					grep -q -i 'CentOS' /etc/redhat-release && distro="CentOS"
					grep -q -i 'Scientific' /etc/redhat-release && distro="Scientific Linux"
					grep -q -i 'EuroLinux' /etc/redhat-release && distro="EuroLinux"
					grep -q -i 'PCLinuxOS' /etc/redhat-release && distro="PCLinuxOS"
					if [ "x$(od -t x1 /etc/redhat-release | sed -e 's/^\w*\ *//' | tr '\n' ' ' | grep 'eb b6 89 ec 9d 80 eb b3 84 ')" != "x" ]; then
						distro="Red Star OS"
						distro_more=$(grep -o '[0-9.]' /etc/redhat-release | tr -d '\n')
					fi
				fi
			fi

			if [[ "${distro}" == "Unknown" ]]; then
				if [[ "${OSTYPE}" =~ "linux" || "${OSTYPE}" == "gnu" ]]; then
					if [ -f /etc/debian_version ]; then
						if [ -f /etc/issue ]; then
							if grep -q -i 'gNewSense' /etc/issue ; then
								distro="gNewSense"
							elif grep -q -i 'KDE neon' /etc/issue ; then
								distro="KDE neon"
								distro_more="$(cut -d ' ' -f3 /etc/issue)"
							else
								distro="Debian"
							fi
						fi

					elif [ -f /etc/NIXOS ]; then distro="NixOS"
					elif [ -f /etc/dragora-version ]; then
						distro="Dragora"
						distro_more="$(cut -d, -f1 /etc/dragora-version)"
					elif [ -f /etc/slackware-version ]; then distro="Slackware"

				else
					if [[ -x /usr/bin/sw_vers ]] && /usr/bin/sw_vers | grep -i 'Mac OS X' >/dev/null; then
						distro="Mac OS X"
					elif [[ -f /var/run/dmesg.boot ]]; then
						distro=$(awk 'BEGIN {
							distro = "Unknown"
						}
						{
							if ($0 ~ /DragonFly/) {
								distro = "DragonFlyBSD"
								exit
							}
							else if ($0 ~ /FreeBSD/) {
								distro = "FreeBSD"
								exit
							}
							else if ($0 ~ /NetBSD/) {
								distro = "NetBSD"
								exit
							}
							else if ($0 ~ /OpenBSD/) {
								distro = "OpenBSD"
								exit
							}
						} END {
							print distro
						}' /var/run/dmesg.boot)
					fi
				fi
			fi

			if [[ "${distro}" == "Unknown" ]] && [[ "${OSTYPE}" =~ "linux" || "${OSTYPE}" == "gnu" ]]; then
				if [[ -f /etc/issue ]]; then
					distro=$(awk 'BEGIN {
						distro = "Unknown"
					}
					{
						if ($0 ~ /"Hyperbola GNU\/Linux-libre"/) {
							distro = "Hyperbola GNU/Linux-libre"
							exit
						}
						else if ($0 ~ /"LinuxDeepin"/) {
							distro = "LinuxDeepin"
							exit
						}
						else if ($0 ~ /"Obarun"/) {
							distro = "Obarun"
							exit
						}
						else if ($0 ~ /"Parabola GNU\/Linux-libre"/) {
							distro = "Parabola GNU/Linux-libre"
							exit
						}
						else if ($0 ~ /"Solus"/) {
							distro = "Solus"
							exit
						}
						else if ($0 ~ /"ALDOS"/) {
							distro = "ALDOS"
							exit
						}
					} END {
						print distro
					}' /etc/issue)
				fi
			fi

		fi
	fi

	if [[ -n ${distro_more} ]]; then
		distro_more="${distro} ${distro_more}"
	fi

	if grep -q -i 'Microsoft' /proc/version 2>/dev/null || \
		grep -q -i 'Microsoft' /proc/sys/kernel/osrelease 2>/dev/null
	then
		wsl="(on the Windows Subsystem for Linux)"
	fi
	verboseOut "Finding distro...found as '${distro} ${distro_release}'"
}
# Distro Detection - End