/**
 * Transform a `tree` in mdast to nlcst.
 *
 * @param {MdastNode} tree
 * @param {VFile} file
 * @param {ParserInstance|ParserConstructor} Parser
 * @param {Options} [options]
 */
export function toNlcst(
  tree: MdastNode,
  file: VFile,
  Parser: ParserInstance | ParserConstructor,
  options?: Options | undefined
): import('nlcst').Root
export type Point = import('unist').Point
export type NlcstRoot = import('nlcst').Root
export type NlcstContent = import('nlcst').Content
export type NlcstSentenceContent = import('nlcst').SentenceContent
export type NlcstWhiteSpace = import('nlcst').WhiteSpace
export type NlcstSource = import('nlcst').Source
export type NlcstNode = NlcstRoot | NlcstContent
export type MdastRoot = import('mdast').Root
export type MdastContent = import('mdast').Content
export type MdastNode = MdastRoot | MdastContent
export type MdastParent = Extract<MdastNode, import('unist').Parent>
export type VFile = import('vfile').VFile
export type Location = ReturnType<typeof location>
export type ParserInstance = {
  parse(nodes: NlcstContent[]): NlcstRoot
  tokenizeSource(value: string): NlcstSource
  tokenizeWhiteSpace(value: string): NlcstWhiteSpace
  tokenize(value: string): NlcstSentenceContent[]
}
export type ParserConstructor = new () => ParserInstance
export type Options = {
  ignore?: string[] | undefined
  source?: string[] | undefined
}
export type Context = {
  doc: string
  place: Location
  parser: ParserInstance
  ignore: string[]
  source: string[]
}
import {location} from 'vfile-location'
