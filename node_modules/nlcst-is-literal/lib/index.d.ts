/**
 * Check if the child in `parent` at `index` is enclosed by matching
 * delimiters.
 *
 * For example, `foo` is literal in the following samples:
 *
 * *   `Foo - is meant as a literal.`
 * *   `Meant as a literal is - foo.`
 * *   `The word “foo” is meant as a literal.`
 *
 * @template {Parent} ParentType
 *   Parent node.
 * @param {ParentType} parent
 *   Parent node.
 * @param {number | ParentType['children'][number]} index
 *   Child node of parent or index of child in parent.
 * @returns {boolean}
 *   Whether the child is a literal.
 */
export function isLiteral<ParentType extends Parent>(
  parent: ParentType,
  index: number | ParentType['children'][number]
): boolean
export type UnistParent = import('unist').Parent
export type Root = import('nlcst').Root
export type Content = import('nlcst').Content
export type Node = Root | Content
export type Parent = Extract<Node, UnistParent>
